% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boot2est_lavaan.R
\name{fit2boot_out}
\alias{fit2boot_out}
\alias{fit2boot_out_do_boot}
\title{Bootstrapping Estimates for a \code{lavaan} Output}
\usage{
fit2boot_out(fit)

fit2boot_out_do_boot(
  fit,
  R = 100,
  seed = NULL,
  parallel = FALSE,
  ncores = NULL,
  make_cluster_args = list(spec = getOption("cl.cores", 2)),
  progress = TRUE
)
}
\arguments{
\item{fit}{The fit object. Currently only supports a
\link[lavaan:lavaan-class]{lavaan::lavaan} object.}

\item{R}{Number of bootstrap samples. Default is 100.}

\item{seed}{The seed for the random resampling. Default is \code{NULL}.}

\item{parallel}{Logical. Whether parallel processing will be used.
Default is \code{NULL}.}

\item{ncores}{Integer. The number of CPU cores to use when \code{parallel} is \code{TRUE}.
Default is \code{NULL}, and the number of cores determined by
\code{getOption("cl.cores", 2)}. Will raise an error if greater than
the number of cores detected by \code{\link[parallel:detectCores]{parallel::detectCores()}}.
If \code{ncores} is set, it will override \code{make_cluster_args}.}

\item{make_cluster_args}{A named list of additional arguments to be passed
to \code{\link[parallel:makeCluster]{parallel::makeCluster()}}. For advanced users.
See \code{\link[parallel:makeCluster]{parallel::makeCluster()}} for details.
Default is \code{list(spec = getOption("cl.cores", 2))}.}

\item{progress}{Logical. Display progress or not. Default is \code{TRUE}.}
}
\value{
A \code{boot_out}-class object that can be used for the
\code{boot_out} argument of \code{\link[=cond_indirect]{cond_indirect()}} and
\code{\link[=cond_indirect_effects]{cond_indirect_effects()}} for forming bootstrapping confidence
intervals.
}
\description{
Extract the bootstrapping estimates from
the output of \code{\link[lavaan:sem]{lavaan::sem()}}.
}
\details{
If bootstrapping confidence intervals was requested
when calling \code{\link[lavaan:sem]{lavaan::sem()}} by setting \code{se = "boot"},
\code{\link[=fit2boot_out]{fit2boot_out()}} can be used to extract the stored
bootstrap estimates such that they can be reused by
\code{\link[=cond_indirect]{cond_indirect()}} and \code{\link[=cond_indirect_effects]{cond_indirect_effects()}}
to form bootstrapping confidence intervals for
conditional effects.

If bootstrapping confidence intervals was not requested,
\code{\link[=fit2boot_out_do_boot]{fit2boot_out_do_boot()}} can be used to generate nonparametric
bootstrap estimates from the output of \code{\link[lavaan:sem]{lavaan::sem()}}
and store them for use by
\code{\link[=cond_indirect]{cond_indirect()}} and \code{\link[=cond_indirect_effects]{cond_indirect_effects()}}.

This approach removes the need to repeat bootstrapping in
each call to \code{\link[=cond_indirect]{cond_indirect()}} and \code{\link[=cond_indirect_effects]{cond_indirect_effects()}}.
It also ensures that the same set of bootstrap samples
is used in all subsequent analysis.
}
\section{Functions}{
\itemize{
\item \code{fit2boot_out}: Process stored bootstrap estimates for functions
such as \code{\link[=cond_indirect_effects]{cond_indirect_effects()}}.

\item \code{fit2boot_out_do_boot}: Do bootstrapping and store information to be used
by \code{\link[=cond_indirect_effects]{cond_indirect_effects()}} and related functions.
Support parallel processing and can be faster than
setting \code{se} to \code{"boot"} in \code{\link[lavaan:sem]{lavaan::sem()}}.
}}

\examples{

library(lavaan)
data(data_med_mod_ab1)
dat <- data_med_mod_ab1
dat$"x:w" <- dat$x * dat$w
dat$"m:w" <- dat$m * dat$w
mod <-
"
m ~ x + w + x:w + c1 + c2
y ~ m + w + m:w + x + c1 + c2
"
# Bootstrapping confidence interval requested in lavaan::sem()
# bootstrap should be set to 2000 or even 5000 in real study
set.seed(1234)
fit <- sem(model = mod, data = dat, fixed.x = FALSE,
           se = "boot", bootstrap = 10)
fit_boot_out <- fit2boot_out(fit)
wlevels <- mod_levels(w = "w", fit = fit)
out <- cond_indirect_effects(wlevels = wlevels,
                             x = "x",
                             y = "y",
                             m = "m",
                             fit = fit,
                             boot_ci = TRUE,
                             boot_out = fit_boot_out)
out
# Bootstrapping not requested in calling lavaan::sem()
fit <- sem(model = mod, data = dat, fixed.x = FALSE)
fit_boot_out <- fit2boot_out_do_boot(fit = fit,
                                     R = 10,
                                     seed = 1234)
wlevels <- mod_levels(w = "w", fit = fit)
out <- cond_indirect_effects(wlevels = wlevels,
                             x = "x",
                             y = "y",
                             m = "m",
                             fit = fit,
                             boot_ci = TRUE,
                             boot_out = fit_boot_out)
out

}
\author{
Shu Fai Cheung \url{https://orcid.org/0000-0002-9871-9448}
}
