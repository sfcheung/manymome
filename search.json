[{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Generate Bootstrap Estimates","text":"article brief illustration use do_boot() package manymome generate bootstrap estimates indirect_effect() cond_indirect_effects() form percentile bootstrap confidence intervals. Although indirect_effect() cond_indirect_effects() can also used generate bootstrap estimates called (see vignette(\"manymome\")), may situations users prefer generating bootstrap estimates first calling indirect_effect() cond_indirect_effects(). do_boot() purpose.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"the-workflow","dir":"Articles","previous_headings":"","what":"The Workflow","title":"Generate Bootstrap Estimates","text":"following workflow demonstrated; Fit model usual. Use do_boot() generate bootstrap estimates. Call functions (e.g, indirect_effect() cond_indirect_effects()) compute desired effects form bootstrap confidence intervals.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"fit-a-model-by-lavaansem","dir":"Articles","previous_headings":"Demonstration: lavaan::sem()","what":"Fit a Model by lavaan::sem()","title":"Generate Bootstrap Estimates","text":"data set illustration: one predictor (x), one mediator (m), one outcome variable (y), two control variables (c1 c2). simple mediation model two control variables (c1 c2) fitted: plot chunk do_boot_draw_model first fit model lavaan::sem(): Suppose like use robust “sandwich” standard errors confidence intervals provided MLR free parameters, want use percentile nonparametric bootstrap confidence interval indirect effect. call , used estimator = \"MLR\" set se = \"boot\".","code":"library(manymome) dat <- data_med head(dat) #>           x        m        y       c1       c2 #> 1  9.931992 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150 22.91594 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678 5.770532 #> 4 11.196969 20.01750 25.05038 3.120056 4.654931 #> 5 11.887811 22.08645 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712 mod <- \" m ~ x + c1 + c2 y ~ m + x + c1 + c2 \" fit_lavaan <- sem(model = mod, data = dat,            fixed.x = FALSE,            estimator = \"MLR\") summary(fit_lavaan) #> lavaan 0.6.15 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        15 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                               Standard      Scaled #>   Test Statistic                                 0.000       0.000 #>   Degrees of freedom                                 0           0 #>  #> Parameter Estimates: #>  #>   Standard errors                             Sandwich #>   Information bread                           Observed #>   Observed information based on                Hessian #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m ~                                                  #>     x                 0.935    0.075   12.437    0.000 #>     c1                0.198    0.079    2.507    0.012 #>     c2               -0.168    0.099   -1.703    0.089 #>   y ~                                                  #>     m                 0.785    0.233    3.363    0.001 #>     x                 0.508    0.323    1.573    0.116 #>     c1                0.140    0.188    0.747    0.455 #>     c2               -0.154    0.214   -0.720    0.471 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   x ~~                                                 #>     c1                0.026    0.121    0.211    0.833 #>     c2                0.100    0.084    1.186    0.235 #>   c1 ~~                                                #>     c2               -0.092    0.109   -0.841    0.400 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m                 0.681    0.085    7.976    0.000 #>    .y                 4.030    0.580    6.944    0.000 #>     x                 1.102    0.150    7.338    0.000 #>     c1                1.218    0.161    7.540    0.000 #>     c2                0.685    0.073    9.340    0.000"},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"generate-bootstrap-estimates","dir":"Articles","previous_headings":"Demonstration: lavaan::sem()","what":"Generate Bootstrap Estimates","title":"Generate Bootstrap Estimates","text":"can call do_boot() output lavaan::sem() generate bootstrap estimates free parameters implied statistics, variances m y, free parameters needed form confidence interval standardized indirect effect. Usually, just three arguments needed: fit: output lavaan::sem(). R: number bootstrap samples. least 2000 even 5000 real research. 100 used just illustration. ncores: number CPU cores used generating bootstrap estimates parallel processing. seed: seed random number generator. used set.seed(). recommended set argument results reproducible. Parallel processing enabled default, text progress bar (generated package pbapply) displayed. ncores omitted, number cores (ncores) used decided automatically. Therefore, users usually need use ncores. set 1 just illustration. real research complicated model moderate large sample size, even parallel processing, may take several minutes, even twenty minutes cases. Nevertheless, need conducted workflow manymome. bootstrapping takes appreciable time run, recommended save output using saveRDS() save(): recommend readRDS() although save() probably popular function.","code":"boot_out_lavaan <- do_boot(fit = fit_lavaan,                            R = 100,                            ncores = 1,                            seed = 58491) ### Use saveRDS() ### # Save the output saveRDS(boot_out_lavaan, file = \"boot_out_lavaan.rds\") # Load the output boot_out_lavaan <- readRDS(\"boot_out_lavaan.rds\")  ### Use save() ### # Save the output save(boot_out_lavaan, file = \"boot_out_lavaan.RData\") # Load the output load(\"boot_out_lavaan.RData\")"},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"using-the-output-of-do_boot-in-other-functions-of-manymome","dir":"Articles","previous_headings":"Demonstration: lavaan::sem()","what":"Using the Output of do_boot() in Other Functions of manymome","title":"Generate Bootstrap Estimates","text":"calling indirect_effect() cond_indirect_effects(), argument boot_out can assigned output do_bout(). retrieve stored bootstrap estimates form bootstrap confidence intervals, requested. Reusing bootstrap estimates can ensure analysis bootstrap confidence intervals based set bootstrap samples.","code":"out_lavaan <- indirect_effect(x = \"x\",                               y = \"y\",                               m = \"m\",                               fit = fit_lavaan,                               boot_ci = TRUE,                               boot_out = boot_out_lavaan) out_lavaan #>  #> == Indirect Effect == #>                                       #>  Path:               x -> m -> y      #>  Indirect Effect     0.733            #>  95.0% Bootstrap CI: [0.279 to 1.202] #>  #> Computation Formula: #>   (b.m~x)*(b.y~m) #> Computation: #>   (0.93469)*(0.78469) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>  Path Coefficient #>   m~x       0.935 #>   y~m       0.785"},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"fit-the-model-by-several-calls-to-lm","dir":"Articles","previous_headings":"Demonstration: lm()","what":"Fit the Model by Several Calls to lm()","title":"Generate Bootstrap Estimates","text":"Suppose estimate parameters using multiple regression. need fit two regression models, one predicts m predicts y: use do_boot(), first combine regression outputs one object using lm2list(). output lm_list-class object.","code":"# Fit Models lm_m <- lm(m ~ x + c1 + c2, dat) lm_y <- lm(y ~ m + x + c1 + c2, dat) # # ###### Regression: Predict m ###### summary(lm_m) #>  #> Call: #> lm(formula = m ~ x + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.82810 -0.56016 -0.08481  0.52524  2.09155  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  9.68941    0.91979  10.534   <2e-16 *** #> x            0.93469    0.08083  11.563   <2e-16 *** #> c1           0.19778    0.07678   2.576   0.0115 *   #> c2          -0.16841    0.10305  -1.634   0.1055     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.8425 on 96 degrees of freedom #> Multiple R-squared:  0.5981, Adjusted R-squared:  0.5855  #> F-statistic: 47.62 on 3 and 96 DF,  p-value: < 2.2e-16 # # ###### Regression: Predict y ###### # summary(lm_y) #>  #> Call: #> lm(formula = y ~ m + x + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -4.1336 -1.3365 -0.1014  1.4597  6.5470  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)   4.4152     3.3016   1.337  0.18432    #> m             0.7847     0.2495   3.145  0.00222 ** #> x             0.5077     0.3057   1.661  0.10004    #> c1            0.1405     0.1941   0.724  0.47093    #> c2           -0.1544     0.2554  -0.604  0.54695    #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 2.06 on 95 degrees of freedom #> Multiple R-squared:  0.3576, Adjusted R-squared:  0.3305  #> F-statistic: 13.22 on 4 and 95 DF,  p-value: 1.336e-08 fit_lm <- lm2list(lm_m, lm_y) fit_lm #>  #> The models: #> m ~ x + c1 + c2 #> y ~ m + x + c1 + c2"},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"generate-bootstrap-estimates-1","dir":"Articles","previous_headings":"Demonstration: lm()","what":"Generate Bootstrap Estimates","title":"Generate Bootstrap Estimates","text":"can now use do_boot() described , using output lm2list() instead output lavaan::sem(): Like working outputs lavaan::lavaan(), parallel processing also used default. ncores number CPU cores used. output may saved, recommended set seed random number generation using seed, set 98715 example. seed can integer within range allowed R, see set.seed(). Setting seed ensures R set bootstrap samples generated every time.","code":"boot_out_lm <- do_boot(fit = fit_lm,                        R = 100,                        seed = 98715,                        ncores = 1)"},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"using-the-output-of-do_boot-in-other-functions-of-manymome-1","dir":"Articles","previous_headings":"Demonstration: lm()","what":"Using the Output of do_boot() in Other Functions of manymome","title":"Generate Bootstrap Estimates","text":"calling indirect_effect() cond_indirect_effects(), cab set argument boot_out output do_bout():","code":"out_lm <- indirect_effect(x = \"x\",                           y = \"y\",                           m = \"m\",                           fit = fit_lm,                           boot_ci = TRUE,                           boot_out = boot_out_lm) out_lm #>  #> == Indirect Effect == #>                                       #>  Path:               x -> m -> y      #>  Indirect Effect     0.733            #>  95.0% Bootstrap CI: [0.277 to 1.206] #>  #> Computation Formula: #>   (b.m~x)*(b.y~m) #> Computation: #>   (0.93469)*(0.78469) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>  Path Coefficient #>   m~x       0.935 #>   y~m       0.785"},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"models-fitted-by-lavaansem","dir":"Articles","previous_headings":"The Structure of the Output","what":"Models Fitted by lavaan::sem()","title":"Generate Bootstrap Estimates","text":"output do_boot() case object class boot_out, list R lists, three elements: est, implied_stats, ok. content est first list: content just first four columns output lavaan::parameterEstimates(). Note fixed free parameters used rows, , used even present. content implied_stats first list: three elements. cov implied variances covariances variables. model latent variables, included . elements, mean mean_lv, implied means observed variables latent variables (), respectively. zero length mean structure fitted model. last element, ok, denotes whether solution bootstrap sample admissible (determined lavaan::lavInspect() = \"post.check\"). admissible, used forming confidence intervals.","code":"boot_out_lavaan[[1]]$est #>    lhs op rhs    est #> 1    m  ~   x  0.828 #> 2    m  ~  c1  0.224 #> 3    m  ~  c2 -0.231 #> 4    y  ~   m  1.257 #> 5    y  ~   x  0.089 #> 6    y  ~  c1 -0.118 #> 7    y  ~  c2 -0.632 #> 8    m ~~   m  0.571 #> 9    y ~~   y  4.317 #> 10   x ~~   x  1.207 #> 11   x ~~  c1  0.146 #> 12   x ~~  c2  0.115 #> 13  c1 ~~  c1  1.331 #> 14  c1 ~~  c2  0.153 #> 15  c2 ~~  c2  0.688 #> 16   m r2   m  0.618 #> 17   y r2   y  0.396 boot_out_lavaan[[1]]$implied_stats #> $cov #>         m      y      x     c1     c2 #> m   1.497                             #> y   1.944  7.150                      #> x   1.006  1.281  1.207               #> c1  0.383  0.241  0.146  1.331        #> c2 -0.030 -0.480  0.115  0.153  0.688 #>  #> $mean #> numeric(0) #>  #> $mean_lv #> numeric(0)"},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"models-fitted-by-lm","dir":"Articles","previous_headings":"The Structure of the Output","what":"Models Fitted by lm()","title":"Generate Bootstrap Estimates","text":"output do_boot() using outputs lm() identical using output lavaan::sem(). object class boot_out, list R lists, two elements: est implied_stats. content est first list: content similar structure output lavaan::parameterEstimates(). However, estimates estimates based lm(). content implied_stats first list: two elements. cov variances covariances variables. Unlike output based lavaan::sem(), content just sample variances covariances variables bootstrap sample, generated using cov(). element, mean, stores sample means variables bootstrap sample.","code":"boot_out_lm[[1]]$est #>   lhs op rhs        est #> 1   m  ~   x  0.9583396 #> 2   m  ~  c1  0.2808811 #> 3   m  ~  c2 -0.3040130 #> 4   m ~1      9.9351030 #> 5   y  ~   m  0.3986059 #> 6   y  ~   x  0.5626298 #> 7   y  ~  c1  0.5010449 #> 8   y  ~  c2 -0.3614863 #> 9   y ~1     11.7212742 boot_out_lm[[1]]$implied_stats #> $cov #>             m          x         c1          c2          y #> m   1.7489520 0.99463099 0.32168750 -0.15480736  1.4738922 #> x   0.9946310 1.03034065 0.04418569  0.01709202  0.9921266 #> c1  0.3216875 0.04418569 1.13244802  0.12743087  0.6744295 #> c2 -0.1548074 0.01709202 0.12743087  0.68082701 -0.2343517 #> y   1.4738922 0.99212663 0.67442949 -0.23435172  5.4383227 #>  #> $mean #>         m         x        c1        c2         y  #> 18.487194  9.848009  2.329366  5.065314 23.967238"},{"path":"https://sfcheung.github.io/manymome/articles/do_boot.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Generate Bootstrap Estimates","text":"information do_boot(), please refer help page.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Generate Monte Carlo Estimates","text":"article brief illustration use do_mc() package manymome generate Monte Carlo estimates indirect_effect() cond_indirect_effects() form Monte Carlo confidence intervals. Although indirect_effect() cond_indirect_effects() can also used generate Monte Carlo estimates called (see vignette(\"manymome\")), may situations users prefer generating Monte Carlo estimates first calling indirect_effect() cond_indirect_effects(). do_mc() purpose. Monte Carlo confidence intervals support models fitted lavaan::sem() (since version 0.1.9.8) semTools::sem.mi() semTools::runMI().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How It Works","title":"Generate Monte Carlo Estimates","text":"function do_mc() retrieves variance-covariance matrix parameter estimates generates number sets simulated sample estimates using multivariate normal distribution. parameters implied variances, covariances, means variables generated simulated estimates. \\((1 - \\alpha)\\)% Monte Carlo confidence interval requested, \\(100(\\alpha/2)\\)th percentile \\(100(1 - \\alpha/2)\\)th percentile used form confidence interval. 95% Monte Carlo confidence interval, 2.5th percentile 97.5th percentile used.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"the-workflow","dir":"Articles","previous_headings":"","what":"The Workflow","title":"Generate Monte Carlo Estimates","text":"following workflow demonstrated; Fit model usual. Use do_mc() generate Monte Carlo estimates. Call functions (e.g, indirect_effect() cond_indirect_effects()) compute desired effects form Monte Carlo confidence intervals.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"fit-a-model-by-lavaansem","dir":"Articles","previous_headings":"Demonstration","what":"Fit a Model by lavaan::sem()","title":"Generate Monte Carlo Estimates","text":"data set illustration: one predictor (x), one mediator (m), one outcome variable (y), two control variables (c1 c2). following simple mediation model two control variables (c1 c2) fitted: plot chunk do_mc_draw_model Fit model lavaan::sem(): Suppose like use robust “sandwich” standard errors confidence intervals provided MLR free parameters, want use Monte Carlo confidence interval indirect effect. call , used estimator = \"MLR\" set se = \"boot\".","code":"library(manymome) dat <- data_med head(dat) #>           x        m        y       c1       c2 #> 1  9.931992 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150 22.91594 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678 5.770532 #> 4 11.196969 20.01750 25.05038 3.120056 4.654931 #> 5 11.887811 22.08645 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712 mod <- \" m ~ x + c1 + c2 y ~ m + x + c1 + c2 \" fit_lavaan <- sem(model = mod, data = dat,                   fixed.x = FALSE,                   estimator = \"MLR\") summary(fit_lavaan) #> lavaan 0.6.15 ended normally after 1 iteration #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        15 #>  #>   Number of observations                           100 #>  #> Model Test User Model: #>                                               Standard      Scaled #>   Test Statistic                                 0.000       0.000 #>   Degrees of freedom                                 0           0 #>  #> Parameter Estimates: #>  #>   Standard errors                             Sandwich #>   Information bread                           Observed #>   Observed information based on                Hessian #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   m ~                                                  #>     x                 0.935    0.075   12.437    0.000 #>     c1                0.198    0.079    2.507    0.012 #>     c2               -0.168    0.099   -1.703    0.089 #>   y ~                                                  #>     m                 0.785    0.233    3.363    0.001 #>     x                 0.508    0.323    1.573    0.116 #>     c1                0.140    0.188    0.747    0.455 #>     c2               -0.154    0.214   -0.720    0.471 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   x ~~                                                 #>     c1                0.026    0.121    0.211    0.833 #>     c2                0.100    0.084    1.186    0.235 #>   c1 ~~                                                #>     c2               -0.092    0.109   -0.841    0.400 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .m                 0.681    0.085    7.976    0.000 #>    .y                 4.030    0.580    6.944    0.000 #>     x                 1.102    0.150    7.338    0.000 #>     c1                1.218    0.161    7.540    0.000 #>     c2                0.685    0.073    9.340    0.000"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"generate-monte-carlo-estimates","dir":"Articles","previous_headings":"Demonstration","what":"Generate Monte Carlo Estimates","title":"Generate Monte Carlo Estimates","text":"can call do_mc() output lavaan::sem() generate Monte Carlo estimates free parameters implied statistics, variances m y, free parameters needed form confidence interval standardized indirect effect. Usually, just three arguments needed: fit: output lavaan::sem(). R: number Monte Carlo replications. least 10000 real research. seed: seed random number generator. used set.seed(). recommended set argument results reproducible. Parallel processing used. However, time taken rarely long need refit model many times.","code":"mc_out_lavaan <- do_mc(fit = fit_lavaan,                        R = 10000,                        seed = 4234) #> Stage 1: Simulate estimates #> Stage 2: Compute implied statistics"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"using-the-output-of-do_mc-in-other-functions-of-manymome","dir":"Articles","previous_headings":"Demonstration","what":"Using the Output of do_mc() in Other Functions of manymome","title":"Generate Monte Carlo Estimates","text":"calling indirect_effect() cond_indirect_effects(), argument mc_out can assigned output do_mc(). retrieve stored simulated estimates form Monte Carlo confidence intervals, requested. Reusing simulated estimates can ensure analyses Monte Carlo confidence intervals based set simulated estimates, without need generate estimates .","code":"out_lavaan <- indirect_effect(x = \"x\",                               y = \"y\",                               m = \"m\",                               fit = fit_lavaan,                               mc_ci = TRUE,                               mc_out = mc_out_lavaan) out_lavaan #>  #> == Indirect Effect == #>                                         #>  Path:                 x -> m -> y      #>  Indirect Effect       0.733            #>  95.0% Monte Carlo CI: [0.306 to 1.174] #>  #> Computation Formula: #>   (b.m~x)*(b.y~m) #> Computation: #>   (0.93469)*(0.78469) #>  #> Monte Carlo confidence interval with 10000 replications. #>  #> Coefficients of Component Paths: #>  Path Coefficient #>   m~x       0.935 #>   y~m       0.785"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"missing-data","dir":"Articles","previous_headings":"","what":"Missing Data","title":"Generate Monte Carlo Estimates","text":"Monte Carlo confidence intervals can formed variance-covariance matrix parameter estimates can retrieved. Therefore, do_mc() can used missing data handled full information maximum likelihood lavaan using missing = \"fiml\". also supports multiple imputation semTools::sem.mi() semTools::runMI() (since version 0.1.9.8). See vignette(\"do_mc_lavaan_mi\") illustration.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"the-structure-of-the-output","dir":"Articles","previous_headings":"","what":"The Structure of the Output","title":"Generate Monte Carlo Estimates","text":"output do_mc() case object class mc_out, list R lists, two elements: est implied_stats. content est first list: content just first four columns output lavaan::parameterEstimates(). Note fixed free parameters used rows, , used even present. content implied_stats first list: three elements. cov implied variances covariances variables. model latent variables, included . elements, mean mean_lv, implied means observed variables latent variables (), respectively. elements NA mean structure fitted model.","code":"mc_out_lavaan[[1]]$est #>    lhs op rhs    est #> 1    m  ~   x  0.860 #> 2    m  ~  c1  0.160 #> 3    m  ~  c2 -0.086 #> 4    y  ~   m  0.567 #> 5    y  ~   x  0.881 #> 6    y  ~  c1  0.008 #> 7    y  ~  c2  0.117 #> 8    m ~~   m  0.619 #> 9    y ~~   y  3.431 #> 10   x ~~   x  1.061 #> 11   x ~~  c1 -0.113 #> 12   x ~~  c2  0.099 #> 13  c1 ~~  c1  1.190 #> 14  c1 ~~  c2 -0.243 #> 15  c2 ~~  c2  0.724 mc_out_lavaan[[1]]$implied_stats #> $cov #>         m      y      x     c1     c2 #> m   1.401                             #> y   1.575  5.619                      #> x   0.886  1.448  1.061               #> c1  0.114 -0.053 -0.113  1.190        #> c2 -0.016  0.161  0.099 -0.243  0.724 #>  #> $mean #>  m  y  x c1 c2  #> NA NA NA NA NA"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Generate Monte Carlo Estimates","text":"Monte Carlo confidence intervals require variance-covariance matrix free parameters. Therefore, models fitted lavaan::sem() (since 0.1.9.8) semTools::sem.mi() semTools::runMI() supported. Models fitted stats::lm() variance-covariance matrix regression coefficients two regression models supported do_mc().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Generate Monte Carlo Estimates","text":"information do_mc(), please refer help page.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"article brief illustration use do_mc() package manymome model fitted multiple imputation datasets generate Monte Carlo estimates, can used indirect_effect() cond_indirect_effects() form Monte Carlo confidence intervals presence missing data. details using do_mc(), please refer vignette(\"do_mc\"). article assumes readers know use do_mc() focus using model estimated multiple imputation. supports model fitted semTools::sem.mi() semTools::runMI().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How It Works","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"used multiple imputation, do_mc() retrieves pooled point estimates variance-covariance matrix free model parameters generates number sets simulated sample estimates using multivariate normal distribution. parameters implied variances, covariances, means variables generated simulated estimates. \\((1 - \\alpha)\\)% Monte Carlo confidence interval requested, \\(100(\\alpha/2)\\)th percentile \\(100(1 - \\alpha/2)\\)th percentile used form confidence interval. 95% Monte Carlo confidence interval, 2.5th percentile 97.5th percentile used.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"the-workflow","dir":"Articles","previous_headings":"","what":"The Workflow","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"following workflow demonstrated; Generate datasets using multiple imputation, covered (please refer guides mice Amelia, two packages supported semTools::sem.mi() semTools::runMI()). Fit model using semTools::sem.mi() semTools::runMI(). Use do_mc() generate Monte Carlo estimates. Call functions (e.g, indirect_effect() cond_indirect_effects()) compute desired effects form Monte Carlo confidence intervals.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"Demonstration","what":"Multiple Imputation","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"data set, missing data introduced, used illustration. one predictor (x), one mediator (m), one outcome variable (y), two control variables (c1 c2). following simple mediation model two control variables (c1 c2) fitted: plot chunk do_mc_lavaan_mi_draw_model practice, imputation model needs decided checked (van Buuren, 2018). sake illustration, just use default mice::mice() imputation:","code":"library(manymome) dat <- data_med dat[1, 1] <- dat[2, 3] <- dat[3, 5] <- dat[4, 3] <- dat[5, 2] <- NA head(dat) #>           x        m        y       c1       c2 #> 1        NA 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150       NA 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678       NA #> 4 11.196969 20.01750       NA 3.120056 4.654931 #> 5 11.887811       NA 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712 library(mice) #>  #> Attaching package: 'mice' #> The following object is masked from 'package:stats': #>  #>     filter #> The following objects are masked from 'package:base': #>  #>     cbind, rbind set.seed(26245) out_mice <- mice(dat, m = 5, printFlag = FALSE) dat_mi <- complete(out_mice, action = \"all\") # The first imputed dataset head(dat_mi[[1]]) #>           x        m        y       c1       c2 #> 1  9.762412 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150 25.68452 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678 3.969419 #> 4 11.196969 20.01750 24.87107 3.120056 4.654931 #> 5 11.887811 20.82502 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712 # The last imputed dataset head(dat_mi[[5]]) #>           x        m        y       c1       c2 #> 1  8.301276 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150 22.93143 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678 6.238426 #> 4 11.196969 20.01750 26.90840 3.120056 4.654931 #> 5 11.887811 20.82502 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"fit-a-model-by-semtoolssem-mi","dir":"Articles","previous_headings":"Demonstration","what":"Fit a Model by semTools::sem.mi()","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"fit model semTools::sem.mi():","code":"library(semTools) #>  #> ############################################################################### #> This is semTools 0.5-6 #> All users of R (or SEM) are invited to submit functions or ideas for functions. #> ############################################################################### mod <- \" m ~ x + c1 + c2 y ~ m + x + c1 + c2 \" fit_lavaan <- sem.mi(model = mod,                      data = dat_mi) summary(fit_lavaan) #> lavaan.mi object based on 5 imputed data sets.  #> See class?lavaan.mi help page for available methods.  #>  #> Convergence information: #> The model converged on 5 imputed data sets  #>  #> Rubin's (1987) rules were used to pool point and SE estimates across 5 imputed data sets, and to calculate degrees of freedom for each parameter's t test and CI. #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate  Std.Err  t-value       df  P(>|t|) #>   m ~                                                           #>     x                 0.891    0.080   11.117      Inf    0.000 #>     c1                0.162    0.077    2.118 5182.950    0.034 #>     c2               -0.114    0.102   -1.117 6281.324    0.264 #>   y ~                                                           #>     m                 0.736    0.251    2.935 3642.608    0.003 #>     x                 0.616    0.298    2.065  383.680    0.040 #>     c1                0.181    0.193    0.939      Inf    0.348 #>     c2               -0.156    0.254   -0.616 3050.071    0.538 #>  #> Variances: #>                    Estimate  Std.Err  t-value       df  P(>|t|) #>    .m                 0.682    0.098    6.959      Inf    0.000 #>    .y                 4.151    0.597    6.958 8812.141    0.000"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"generate-monte-carlo-estimates","dir":"Articles","previous_headings":"Demonstration","what":"Generate Monte Carlo Estimates","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"steps identical illustrated vignette(\"do_mc\"). related functions use pooled point estimates variance-covariance matrix detect model fitted semTools::sem.mi() semTools::runMI() (.e., fit object class lavaan.mi). call do_mc() output semTools::sem.mi() generate Monte Carlo estimates free parameters implied statistics, variances m y, free parameters needed form confidence interval standardized indirect effect. Usually, just three arguments needed: fit: output lavaan::sem(). R: number Monte Carlo replications. least 10000 real research. seed: seed random number generator. used set.seed(). recommended set argument results reproducible. Parallel processing used. However, time taken rarely long need refit model many times. structure output, please refer vignette(\"do_mc\").","code":"mc_out_lavaan <- do_mc(fit = fit_lavaan,                        R = 10000,                        seed = 4234) #> Stage 1: Simulate estimates #> Stage 2: Compute implied statistics"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"using-the-output-of-do_mc-in-other-functions-of-manymome","dir":"Articles","previous_headings":"Demonstration","what":"Using the Output of do_mc() in Other Functions of manymome","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"calling indirect_effect() cond_indirect_effects(), argument mc_out can assigned output do_mc(). retrieve stored simulated estimates form Monte Carlo confidence intervals, requested. Reusing simulated estimates can ensure analysis Monte Carlo confidence intervals based set simulated estimates.","code":"out_lavaan <- indirect_effect(x = \"x\",                               y = \"y\",                               m = \"m\",                               fit = fit_lavaan,                               mc_ci = TRUE,                               mc_out = mc_out_lavaan) out_lavaan #>  #> == Indirect Effect == #>                                         #>  Path:                 x -> m -> y      #>  Indirect Effect       0.656            #>  95.0% Monte Carlo CI: [0.219 to 1.130] #>  #> Computation Formula: #>   (b.m~x)*(b.y~m) #> Computation: #>   (0.89141)*(0.73569) #>  #> Monte Carlo confidence interval with 10000 replications. #>  #> Coefficients of Component Paths: #>  Path Coefficient #>   m~x       0.891 #>   y~m       0.736"},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"limitation","dir":"Articles","previous_headings":"","what":"Limitation","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"Monte Carlo confidence intervals require variance-covariance matrix free parameters. Therefore, models fitted lavaan::sem() (since 0.1.9.8) semTools::sem.mi() semTools::runMI() supported. Models fitted stats::lm() variance-covariance matrix regression coefficients two regression models supported do_mc().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"information do_mc(), please refer help page.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/do_mc_lavaan_mi.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"Monte Carlo Confidence Intervals with Multiple Imputation","text":"van Buuren, S. (2018). Flexible imputation missing data (2nd Ed.). CRC Press, Taylor Francis Group.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"technical appendix describes product terms model dataset identified package manymome. function, get_prod(), called internally main functions. Users need call directly. Nevertheless, advanced users may interested learning works.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"get_prod","dir":"Articles","previous_headings":"","what":"get_prod()","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"function used find product term(s), , x y, x direct path y.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"main-arguments","dir":"Articles","previous_headings":"get_prod()","what":"Main arguments","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"x: name predictor. y: name outcome. fit: fit object. Currently supports lavaan-class object. est: output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ge ignored. data: data frame. supplied, used identify product terms. operator: string used indicate product term. Default \":\", used lm() lavaan::sem() observed variables. raw data available, needed identifying product terms.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"output","dir":"Articles","previous_headings":"get_prod()","what":"Output","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"sample output: returns list elements: prod: name(s) product term(s) model data. can one element effect x y moderated one moderator. b: coefficient(s) product term(s). w: name(s) moderator(s). x: predictor, x. y: outcome variable, y.","code":"$prod [1] \"x_o_w1\"  $b    x_o_w1 0.2337979  $w [1] \"w1\"  $x [1] \"x\"  $y [1] \"m1\""},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"sample-data-and-model","dir":"Articles","previous_headings":"get_prod()","what":"Sample Data and Model","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"sample dataset modmed_x1m3w4y1 package manymome used illustration: illustration, product terms formed manually, product terms formed using : operator lavaan: Fit model lm():","code":"library(manymome) dat <- modmed_x1m3w4y1 print(head(dat), digits = 3) ##        x     w1     w2     w3     w4    m1    m2     m3    y    gp  city ## 1  0.192  1.461 -0.280  0.936  1.239 10.20  9.25  9.435 17.2  mars gamma ## 2  0.362  1.302 -0.476 -1.494  0.677 10.46  9.05  6.527 12.7  mars alpha ## 3 -1.282  0.409  0.751 -0.938 -1.689  6.94 12.19 19.180 11.1 earth alpha ## 4 -0.321 -1.296 -0.439 -1.066  1.588  9.78  8.50 -0.168 11.3 earth gamma ## 5  1.941  2.409  1.416  1.589 -0.814 11.79 10.18 12.061 15.2 earth sigma ## 6 -0.598  0.861  0.918  1.289  1.713  9.36 11.21 16.945 17.7 earth  beta dat$x_o_w1 <- dat$x * dat$w1 library(lavaan) ## This is lavaan 0.6-16 ## lavaan is FREE software! Please report any bugs. mod <- \" m1 ~ x   + w1 + x_o_w1 m2 ~ m1  + w2 + m1:w2 m3 ~ m2 y  ~ m3  + w4 + m3:w4 + x + w3 + x:w3 + x:w4 \" fit <- sem(model = mod,            data = dat,            meanstructure = TRUE,            fixed.x = FALSE) lm_m1 <- lm(m1 ~ x*w1, dat) lm_m2 <- lm(m2 ~ m1*w2, dat) lm_m3 <- lm(m3 ~ m2, dat) lm_y <- lm(y ~ m3*w4 + x*w3 + x*w4, dat) lm_list <- lm2list(lm_m1, lm_m2, lm_m3, lm_y) lm_est <- manymome:::lm2ptable(lm_list)"},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"modes","dir":"Articles","previous_headings":"get_prod()","what":"Modes","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"works several modes.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"fit-only-with-raw-data","dir":"Articles","previous_headings":"get_prod() > Modes","what":"fit only, with raw data","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"fit object (lavaan-class object) supplied, raw data stored. parameter estimate table, est, extracted fit. Raw data extracted fit identify product terms. returns product terms involve x predicting y, . Case: path moderator Case: path one moderator Case: path without moderator Case: x direct path y","code":"get_prod(x = \"x\", y = \"m1\", fit = fit) ## $prod ## [1] \"x_o_w1\" ##  ## $b ##    x_o_w1  ## 0.2337967  ##  ## $w ## [1] \"w1\" ##  ## $x ## [1] \"x\" ##  ## $y ## [1] \"m1\" get_prod(x = \"x\", y = \"y\", fit = fit) ## $prod ## [1] \"x:w3\" \"x:w4\" ##  ## $b ##       x:w3       x:w4  ##  0.5576550 -0.4167135  ##  ## $w ## [1] \"w3\" \"w4\" ##  ## $x ## [1] \"x\" ##  ## $y ## [1] \"y\" get_prod(x = \"m2\", y = \"m3\", fit = fit) ## [1] NA get_prod(x = \"m1\", y = \"m3\", fit = fit) ## [1] NA"},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"est-and-data","dir":"Articles","previous_headings":"get_prod() > Modes","what":"est and data","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"mode, raw data supplied directly used identify product terms. parameter estimate table est used determine form model. returns product term(s) involve x predicting y, . Case: path moderator Case: path one moderator Case: path without moderator Case: x direct path y","code":"get_prod(x = \"x\", y = \"m1\", est = lm_est$est, data = lm_est$data) ## $prod ## [1] \"x:w1\" ##  ## $b ##      x:w1  ## 0.2337967  ##  ## $w ## [1] \"w1\" ##  ## $x ## [1] \"x\" ##  ## $y ## [1] \"m1\" get_prod(x = \"x\", y = \"y\", est = lm_est$est, data = lm_est$data) ## $prod ## [1] \"x:w3\" \"w4:x\" ##  ## $b ##       x:w3       w4:x  ##  0.5576550 -0.4167135  ##  ## $w ## [1] \"w3\" \"w4\" ##  ## $x ## [1] \"x\" ##  ## $y ## [1] \"y\" get_prod(x = \"m2\", y = \"m3\", est = lm_est$est, data = lm_est$data) ## [1] NA get_prod(x = \"m1\", y = \"m3\", est = lm_est$est, data = lm_est$data) ## [1] NA"},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"est-only","dir":"Articles","previous_headings":"get_prod() > Modes","what":"est only","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"mode, operator needs set identify product terms parameter estimate table est. table est used determine form model. returns product term(s) involve x predicting y, . mode useful product term formed raw data. example, product term product two latent variables, raw data available. Case: path moderator Case: path one moderator Case: path without moderator Case: x direct path y","code":"get_prod(x = \"x\", y = \"m1\", est = lm_est$est, operator = \":\") ## $prod ## [1] \"x:w1\" ##  ## $b ##      x:w1  ## 0.2337967  ##  ## $w ## [1] \"w1\" ##  ## $x ## [1] \"x\" ##  ## $y ## [1] \"m1\" get_prod(x = \"x\", y = \"y\", est = lm_est$est, operator = \":\") ## $prod ## [1] \"x:w3\" \"w4:x\" ##  ## $b ##       x:w3       w4:x  ##  0.5576550 -0.4167135  ##  ## $w ## [1] \"w3\" \"w4\" ##  ## $x ## [1] \"x\" ##  ## $y ## [1] \"y\" get_prod(x = \"m2\", y = \"m3\", est = lm_est$est, operator = \":\") ## [1] NA get_prod(x = \"m1\", y = \"m3\", est = lm_est$est, operator = \":\") ## [1] NA"},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"workflow","dir":"Articles","previous_headings":"get_prod()","what":"Workflow","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"Workflow manymome::get_prod()","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"how-it-works","dir":"Articles","previous_headings":"find_all_products() and find_product()","what":"How it works","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"function find_all_products() internal function identifying product terms dataset. requires raw data work. called get_prod() raw data available. column dataset, calls find_product() check whether column product two columns. yes, find_product() returns component column names. returns named list output find_product() columns product term. search find_product() done numerically, checking whether column can formed product two columns (missing data allowed). approach exact simple. need rely special naming convention model denote product term. find_all_products() returns named list product term components. expand = TRUE, try find lowest order components. Therefore, product term three columns can also identified.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/get_prod.html","id":"example","dir":"Articles","previous_headings":"find_all_products() and find_product()","what":"Example","title":"Technical Appendix: Workflow of `get_prod()` and Friends","text":"first create dataset product terms. output named list character vectors. names column names product terms. character vector stores column names components.","code":"library(manymome) set.seed(63224) dat <- round(as.data.frame(MASS::mvrnorm(100, rep(0, 5), diag(5))), 3) head(dat) ##       V1     V2     V3     V4     V5 ## 1 -1.291  0.166  0.384  0.270  1.469 ## 2  0.516  0.497  0.071  1.538 -0.441 ## 3 -1.262 -0.146 -1.103 -0.031 -0.664 ## 4  1.586 -0.098  1.241  1.035 -0.004 ## 5  2.072  0.384 -0.964 -1.068 -0.307 ## 6 -0.428 -0.187 -0.717  1.519  0.416 dat$V2V1 <- dat$V2 * dat$V1 dat$V3V5 <- dat$V3 * dat$V5 dat$V1V2V3 <- dat$V1 * dat$V2 * dat$V3 print(head(dat), digits = 3) ##       V1     V2     V3     V4     V5   V2V1     V3V5  V1V2V3 ## 1 -1.291  0.166  0.384  0.270  1.469 -0.214  0.56410 -0.0823 ## 2  0.516  0.497  0.071  1.538 -0.441  0.256 -0.03131  0.0182 ## 3 -1.262 -0.146 -1.103 -0.031 -0.664  0.184  0.73239 -0.2032 ## 4  1.586 -0.098  1.241  1.035 -0.004 -0.155 -0.00496 -0.1929 ## 5  2.072  0.384 -0.964 -1.068 -0.307  0.796  0.29595 -0.7670 ## 6 -0.428 -0.187 -0.717  1.519  0.416  0.080 -0.29827 -0.0574 manymome:::find_all_products(dat) ## $V2V1 ## [1] \"V1\" \"V2\" ##  ## $V3V5 ## [1] \"V3\" \"V5\" ##  ## $V1V2V3 ## [1] \"V3\" \"V1\" \"V2\""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"manymome","text":"article brief illustration main functions package manymome can used typical cases. assumes readers basic understanding mediation, moderation, moderated mediation, structural equation modeling (SEM), bootstrapping.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"workflow","dir":"Articles","previous_headings":"Introduction","what":"Workflow","title":"manymome","text":"use manymome adopts two-stage workflow: Stage 1: Fit model can done SEM (using lavaan::sem()) series regression (using lm()). lavaan::sem() used, need label parameters denote variables predictors, mediators, moderators, outcome variables computing indirect effects conditional indirect effects. Stage 2 take care . Stage 2: Compute indirect effects conditional indirect effects can done along nearly path model levels moderators. Just specify start (x), mediator(s) (m, ), end (y) indirect effects. functions find coefficients automatically. path one moderators, conditional indirect effects can computed. Product terms identified automatically. levels moderators can decided stage can changed often needed. Bootstrapping confidence intervals: main functions support bootstrap confidence intervals effects. Bootstrapping can done Stage 1 (e.g., lavaan::sem() using se = \"boot\") Stage 2 first call main functions, needs conducted . Alternatively, do_boot() can use (see vignette(\"do_boot\")). bootstrap estimates can reused main functions manymome path level moderators. Monte Carlo confidence intervals: Initial support Monte Carlo confidence interval added main functions effects model fitted lavaan::sem(). recommended workflow use do_mc() generate simulated sampling estimates. simulated estimates can reused main functions manymome path level moderators. keep length vignette short, covers bootstrapping confidence intervals. Please see vignette(\"do_mc\") illustration form Monte Carlo confidence intervals. Standardized effects: main functions Stage 2 support standardized effects form bootstrap confidence interval correctly (Cheung, 2009; Friedrich, 1982). need standardize variables advance Stage 1, even paths moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"what-will-be-covered-in-this-get-started-article","dir":"Articles","previous_headings":"Introduction","what":"What Will Be Covered In This Get-Started Article","title":"manymome","text":"Use cond_indirect_effects() compute conditional indirect effects, bootstrap confidence intervals. Use indirect_effect() compute indirect effect, bootstrap confidence interval. Use + - compute function effects, total indirect effects total effects. Use do_boot() generate bootstrap estimates cond_indirect_effects(), indirect_effect(), functions manymome. Use index_of_mome() index_of_momome() compute index moderated mediation index moderated moderated mediation, respectively, bootstrap confidence intervals. Compute standardized conditional indirect effects standardized indirect effect using cond_indirect_effects() indirect_effect(), respectively.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"moderated-mediation-by-sem-using-lavaan","dir":"Articles","previous_headings":"","what":"Moderated Mediation by SEM using lavaan","title":"manymome","text":"sample data set comes package: Suppose model fitted: plot chunk manymome_draw_model models intended simple enough illustration complicated enough show flexibility manymome. complicated models also supported, discussed later.","code":"library(manymome) dat <- data_med_mod_ab print(head(dat), digits = 3) #>       x   w1   w2    m    y    c1   c2 #> 1  9.27 4.97 2.66 3.46 8.80  9.26 3.14 #> 2 10.79 4.13 3.33 4.05 7.37 10.71 5.80 #> 3 11.10 5.91 3.32 4.04 8.24 10.60 5.45 #> 4  9.53 4.78 2.32 3.54 8.37  9.22 3.83 #> 5 10.00 4.38 2.95 4.65 8.39  9.58 4.26 #> 6 12.25 5.81 4.04 4.73 9.65  9.51 4.01"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"fitting-the-model","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan","what":"Fitting the Model","title":"manymome","text":"model fitted moderated mediation model mediation path x -> m -> y, two moderators: x -> m moderated w1 m -> y moderated w2. effects interest conditional indirect effects: indirect effects x y m different levels w1 w2. cond_indirect_effects() can estimate effects model fitted lavaan::sem(). need label path coefficients define user parameters (users can, desired; impact functions manymome). illustrate realistic scenario, two control variables, c1 c2, also included. MLR used take account probable nonnormality due product terms. fixed.x = FALSE used allow predictors random variables. usually necessary values predictor also sampled populations, standard deviations sample statistics. parameter estimates paths: moderation effects w1 w2 significant. indirect effect x y m depends level w1 w2.","code":"library(lavaan) # Form the product terms dat$w1x <- dat$w1 * dat$x dat$w2m <- dat$w2 * dat$m mod <- \" m ~ x + w1 + w1x + c1 + c2 y ~ m + w2 + w2m + x + c1 + c2 # Covariances of the error term of m with w2m and w2 m ~~ w2m + w2 # Covariance between other variables # They need to be added due to the covariances added above # See Kwan and Chan (2018) and Miles et al. (2015) w2m ~~ w2 + x + w1 + w1x + c1 + c2 w2  ~~ x + w1 + w1x + c1 + c2 x   ~~ w1 + w1x + c1 + c2 w1  ~~ w1x + c1 + c2 w1x ~~ c1 + c2 c1  ~~ c2 \" fit <- sem(model = mod,            data = dat,            fixed.x = FALSE,            estimator = \"MLR\") parameterEstimates(fit)[parameterEstimates(fit)$op == \"~\", ] #>    lhs op rhs    est    se      z pvalue ci.lower ci.upper #> 1    m  ~   x -0.663 0.533 -1.244  0.213   -1.707    0.381 #> 2    m  ~  w1 -2.290 1.010 -2.267  0.023   -4.269   -0.310 #> 3    m  ~ w1x  0.204 0.101  2.023  0.043    0.006    0.401 #> 4    m  ~  c1 -0.020 0.079 -0.251  0.801   -0.175    0.135 #> 5    m  ~  c2 -0.130 0.090 -1.444  0.149   -0.306    0.046 #> 6    y  ~   m -0.153 0.248 -0.616  0.538   -0.638    0.333 #> 7    y  ~  w2 -0.921 0.401 -2.300  0.021   -1.706   -0.136 #> 8    y  ~ w2m  0.204 0.079  2.579  0.010    0.049    0.359 #> 9    y  ~   x  0.056 0.086  0.653  0.514   -0.113    0.225 #> 10   y  ~  c1 -0.102 0.081 -1.261  0.207   -0.261    0.056 #> 11   y  ~  c2 -0.108 0.087 -1.249  0.212   -0.279    0.062"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"conditional-indirect-effects","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan","what":"Conditional Indirect Effects","title":"manymome","text":"form bootstrap confidence intervals, bootstrapping needs done. several ways . first illustrate using do_boot().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"do-bootstrapping-once","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan > Conditional Indirect Effects","what":"Do Bootstrapping (Once)","title":"manymome","text":"Using do_boot() instead setting se \"boot\" calling lavaan::sem() allows users use method standard errors confidence intervals parameters, various types robust standard errors provided lavaan::sem(). function do_boot() used generate store bootstrap estimates well implied variances variables, needed estimate standardized effects. major arguments: fit: output lavaan::sem(). R: number bootstrap samples, 2000 even 5000 real research. R set 100 just illustration. seed: seed reproduce results. ncores: number processes parallel processing. default number number detected physical cores minus 1. Can omitted real studies. Set 1 illustration. default, parallel processing used, results reproducible seed number processes . See do_boot() options vignette(\"do_boot\") output do_boot(). output, fit_boot case, can used subsequent analyses model.","code":"fit_boot <- do_boot(fit = fit,                     R = 100,                     seed = 53253,                     ncores = 1)"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"estimate-conditional-indirect-effects","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan > Conditional Indirect Effects","what":"Estimate Conditional Indirect Effects","title":"manymome","text":"compute conditional indirect effects form bootstrap confidence intervals, can use cond_indirect_effects(). major arguments: wlevels: vector names moderators. Order matter. default levels suitable, custom levels can created functions like mod_levels() merge_mod_levels() (see vignette(\"mod_levels\")). x: name predictor. y: name outcome variable. m: name mediator, vector names path one mediator (see example). fit: output lavaan::sem(). boot_ci: Set TRUE request bootstrap confidence intervals. Default FALSE. boot_out: pregenerated bootstrap estimates generated do_boot() previous call cond_indirect_effects() indirect_effect(). output: two moderators, default levels numeric moderators one standard deviation (SD) mean one SD mean. two moderators, four combinations. shown , among four sets levels, indirect effect x y m significant w1 w2 one SD means. indirect effect levels w1 w2 0.399, 95% bootstrap confidence interval [0.121, 0.654].","code":"out_cond <- cond_indirect_effects(wlevels =c(\"w1\", \"w2\"),                                   x = \"x\",                                   y = \"y\",                                   m = \"m\",                                   fit = fit,                                   boot_ci = TRUE,                                   boot_out = fit_boot) out_cond #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind  CI.lo CI.hi Sig   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.399  0.121 0.654 Sig 0.596 0.671 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.158 -0.012 0.359     0.596 0.266 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.107 -0.166 0.372     0.160 0.671 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.043 -0.066 0.216     0.160 0.266 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - The 'ind' column shows the indirect effects. #>  - 'm~x','y~m' is/are the path coefficient(s) along the path conditional #>    on the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"examine-the-effect-at-a-particular-set-of-levels-of-the-moderators","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan > Conditional Indirect Effects > Estimate Conditional Indirect Effects","what":"Examine the Effect at a Particular Set of Levels of the Moderators","title":"manymome","text":"learn conditional effect one combination levels moderators, get_one_cond_indirect_effect() can used, first argument output cond_indirect_effects() second argument row number. example, shows details computation indirect effect w1 w2 one SD means (row 1):","code":"get_one_cond_indirect_effect(out_cond, 1) #>  #> == Conditional Indirect Effect   == #>                                                      #>  Path:                        x -> m -> y            #>  Moderators:                  w1, w2                 #>  Conditional Indirect Effect: 0.399                  #>  95.0% Bootstrap CI:          [0.121 to 0.654]       #>  When:                        w1 = 6.173, w2 = 4.040 #>  #> Computation Formula: #>   (b.m~x + (b.w1x)*(w1))*(b.y~m + (b.w2m)*(w2)) #> Computation: #>   ((-0.66304) + (0.20389)*(6.17316))*((-0.15271) + (0.20376)*(4.04049)) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>   m~x              0.596               -0.663 #>   y~m              0.671               -0.153"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"changing-the-levels-of-the-moderators","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan > Conditional Indirect Effects > Estimate Conditional Indirect Effects","what":"Changing the Levels of the Moderators","title":"manymome","text":"levels moderators, w1 w2 example, can controlled directly users. examples, percentiles exact values moderators can used. See vignette(\"mod_levels\") specify levels moderators, arguments w_method, sd_from_mean, percentiles cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"standardized-conditional-indirect-effects","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan","what":"Standardized Conditional Indirect Effects","title":"manymome","text":"compute standardized conditional indirect effects, can standardize predictor (x), outcome (y), . standardize x, set standardized_x TRUE. standardize y, set standardized_y TRUE. standardize , set standardized_x standardized_y TRUE. result x y standardized: Note fit_boot used need bootstrapping . output: standardized indirect effect w1 w2 one SD mean 0.401, 95% bootstrap confidence interval [0.129, 0.607]. , w1 w2 one SD means, x increases one SD, leads increase 0.401 SD y m.","code":"out_cond_stdxy <- cond_indirect_effects(wlevels =c(\"w1\", \"w2\"),                                         x = \"x\",                                         y = \"y\",                                         m = \"m\",                                         fit = fit,                                         boot_ci = TRUE,                                         boot_out = fit_boot,                                         standardized_x = TRUE,                                         standardized_y = TRUE) out_cond_stdxy #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   std  CI.lo CI.hi Sig   m~x   y~m   ind #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.401  0.129 0.607 Sig 0.596 0.671 0.399 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.159 -0.013 0.351     0.596 0.266 0.158 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.108 -0.154 0.416     0.160 0.671 0.107 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.043 -0.068 0.224     0.160 0.266 0.043 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - std: The standardized indirect effects.  #>  - ind: The unstandardized indirect effects. #>  - 'm~x','y~m' is/are the path coefficient(s) along the path conditional #>    on the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"index-of-moderated-moderated-mediation","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan","what":"Index of Moderated Moderated Mediation","title":"manymome","text":"index moderated moderated mediation (Hayes, 2018) can estimated, along bootstrap confidence interval, using function index_of_momome(): major arguments: x: name predictor. y: name outcome variable. m: name mediator, vector names path one mediator (see example). w: name one moderator. z: name moderator. order w z matter. fit: output lavaan::sem(). boot_ci: Set TRUE request bootstrap confidence intervals. Default FALSE. boot_out: pregenerated bootstrap estimates generated do_boot() previous call cond_indirect_effects() indirect_effect(). result: index moderated moderated mediation 0.042, 95% bootstrap confidence interval [-0.011, 0.118]. Note index specifically change w1 w2 increases one unit.","code":"out_momome <- index_of_momome(x = \"x\",                               y = \"y\",                               m = \"m\",                               w = \"w1\",                               z = \"w2\",                               fit = fit,                               boot_ci = TRUE,                               boot_out = fit_boot) out_momome #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>   [w1] [w2] (w1) (w2)    ind  CI.lo CI.hi Sig    m~x    y~m #> 1    1    1    1    1 -0.023 -0.244 0.353     -0.459  0.051 #> 2    1    0    1    0  0.070 -0.238 0.705     -0.459 -0.153 #> 3    0    1    0    1 -0.034 -0.335 0.496     -0.663  0.051 #> 4    0    0    0    0  0.101 -0.272 0.936     -0.663 -0.153 #>  #> == Index of Moderated Moderated Mediation == #>  #> Levels compared: #> (Row 1 - Row 2) - (Row 3 - Row 4) #>  #>       x y Index  CI.lo CI.hi #> Index x y 0.042 -0.011 0.118 #>  #>  - [CI.lo, CI.hi]: 95% percentile confidence interval."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"index-of-moderated-mediation","dir":"Articles","previous_headings":"Moderated Mediation by SEM using lavaan","what":"Index of Moderated Mediation","title":"manymome","text":"manymome package also function compute index moderated mediation (Hayes, 2015). Suppose modify model remove one moderators: plot chunk manymome_plot_mome1 lavaan model: parameter estimates paths: generate bootstrap estimates first (R 2000 even 5000 real research): function index_of_mome() can used compute index moderated mediation w1 path x -> m -> y: arguments nearly identical index_of_momome(), except w needs specified. output: model, index moderated mediation 0.088, 95% bootstrap confidence interval [-0.032, 0.228]. indirect effect x y m significantly change w1 increases one unit. Note index specifically change w1 increases one unit. index significant contradict significant moderation effect suggested product term.","code":"library(lavaan) dat$w1x <- dat$w1 * dat$x mod2 <- \" m ~ x + w1 + w1x + c1 + c2 y ~ m + x + c1 + c2 \" fit2 <- sem(model = mod2,            data = dat,            fixed.x = FALSE,            estimator = \"MLR\") parameterEstimates(fit2)[parameterEstimates(fit2)$op == \"~\", ] #>   lhs op rhs    est    se      z pvalue ci.lower ci.upper #> 1   m  ~   x -0.663 0.533 -1.244  0.213   -1.707    0.381 #> 2   m  ~  w1 -2.290 1.010 -2.267  0.023   -4.269   -0.310 #> 3   m  ~ w1x  0.204 0.101  2.023  0.043    0.006    0.401 #> 4   m  ~  c1 -0.020 0.079 -0.251  0.801   -0.175    0.135 #> 5   m  ~  c2 -0.130 0.090 -1.444  0.149   -0.306    0.046 #> 6   y  ~   m  0.434 0.114  3.815  0.000    0.211    0.657 #> 7   y  ~   x  0.053 0.093  0.570  0.569   -0.130    0.237 #> 8   y  ~  c1 -0.108 0.080 -1.352  0.177   -0.265    0.049 #> 9   y  ~  c2 -0.077 0.085 -0.904  0.366   -0.243    0.090 fit2_boot <- do_boot(fit = fit2,                     R = 100,                     seed = 53253,                     ncores = 1) out_mome <- index_of_mome(x = \"x\",                           y = \"y\",                           m = \"m\",                           w = \"w1\",                           fit = fit2,                           boot_ci = TRUE,                           boot_out = fit2_boot) out_mome #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>   [w1] (w1)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1    1    1 -0.199 -0.698 0.304     -0.459 0.434 #> 2    0    0 -0.288 -0.938 0.340     -0.663 0.434 #>  #> == Index of Moderated Mediation == #>  #> Levels compared: Row 1 - Row 2 #>  #>       x y Index  CI.lo CI.hi #> Index x y 0.088 -0.032 0.228 #>  #>  - [CI.lo, CI.hi]: 95% percentile confidence interval."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"mediation-only","dir":"Articles","previous_headings":"","what":"Mediation Only","title":"manymome","text":"package can also used mediation model. sample data set comes package: Suppose model fitted, c1 c2 control variables. plot chunk manymome_draw_med","code":"library(manymome) dat <- data_serial print(head(dat), digits = 3) #>       x   m1    m2     y        c1   c2 #> 1 12.12 20.6  9.33  9.00  0.109262 6.01 #> 2  9.81 18.2  9.47 11.56 -0.124014 6.42 #> 3 10.11 20.3 10.05  9.35  4.278608 5.34 #> 4 10.07 19.7 10.17 11.41  1.245356 5.59 #> 5 11.91 20.5 10.05 14.26 -0.000932 5.34 #> 6  9.13 16.5  8.93 10.01  1.802727 5.91"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"fitting-the-model-1","dir":"Articles","previous_headings":"Mediation Only","what":"Fitting the Model","title":"manymome","text":"Fitting model lavaan::sem() simple. manymome, need label paths define user parameters indirect effects. estimates paths:","code":"mod_med <- \" m1 ~ x + c1 + c2 m2 ~ m1 + x + c1 + c2 y ~ m2 + m1 + x + c1 + c2 \" fit_med <- sem(model = mod_med,                data = dat,                fixed.x = TRUE) parameterEstimates(fit_med)[parameterEstimates(fit_med)$op == \"~\", ] #>    lhs op rhs    est    se      z pvalue ci.lower ci.upper #> 1   m1  ~   x  0.822 0.092  8.907  0.000    0.641    1.003 #> 2   m1  ~  c1  0.171 0.089  1.930  0.054   -0.003    0.346 #> 3   m1  ~  c2 -0.189 0.091 -2.078  0.038   -0.367   -0.011 #> 4   m2  ~  m1  0.421 0.099  4.237  0.000    0.226    0.615 #> 5   m2  ~   x -0.116 0.123 -0.946  0.344   -0.357    0.125 #> 6   m2  ~  c1  0.278 0.090  3.088  0.002    0.101    0.454 #> 7   m2  ~  c2 -0.162 0.092 -1.756  0.079   -0.343    0.019 #> 8    y  ~  m2  0.521 0.221  2.361  0.018    0.088    0.953 #> 9    y  ~  m1 -0.435 0.238 -1.830  0.067   -0.902    0.031 #> 10   y  ~   x  0.493 0.272  1.811  0.070   -0.040    1.026 #> 11   y  ~  c1  0.099 0.208  0.476  0.634   -0.308    0.506 #> 12   y  ~  c2 -0.096 0.207 -0.465  0.642   -0.501    0.309"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"est_indirect","dir":"Articles","previous_headings":"Mediation Only","what":"Estimate Indirect Effects","title":"manymome","text":"indirect_effect() can used estimate indirect effect form bootstrapping confidence interval along path model starts numeric variable, ends numeric variable, numeric variable(s). illustrate another approach generate bootstrap estimates: using indirect_effect() bootstrapping estimate indirect effect. example, call indirect effect x y m1 m2: main arguments : x: name predictor. start path. y: name outcome variable. end path. m: name mediator, vector names mediators path one mediator, example. path moves first mediator last mediator. example, correct order c(\"m1\", \"m2\"). fit: output lavaan::sem(). boot_ci: Set TRUE request bootstrapping confidence intervals. Default FALSE. R: number bootstrap samples. 100 bootstrap samples illustration. Set R 2000 even 5000 real research. seed: seed random number generator. ncores: number processes parallel processing. default number number detected physical cores minus 1. Can omitted real studies. Set 1 illustration. Like do_boot(), default, parallel processing used, results reproducible seed number processes (cores) . output: indirect effect x y m1 m2 0.180, 95% confidence interval [0.043, 0.332], significantly different zero (p < .05). bootstrap confidence interval requested, bootstrap estimates stored out_med. output indirect_effect() can also used argument boot_out functions.","code":"out_med <- indirect_effect(x = \"x\",                            y = \"y\",                            m = c(\"m1\", \"m2\"),                            fit = fit_med,                            boot_ci = TRUE,                            R = 100,                            seed = 43143,                            ncores = 1) out_med #>  #> == Indirect Effect == #>                                         #>  Path:               x -> m1 -> m2 -> y #>  Indirect Effect     0.180              #>  95.0% Bootstrap CI: [0.043 to 0.332]   #>  #> Computation Formula: #>   (b.m1~x)*(b.m2~m1)*(b.y~m2) #> Computation: #>   (0.82244)*(0.42078)*(0.52077) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>   m1~x       0.822 #>  m2~m1       0.421 #>   y~m2       0.521"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"standardized-indirect-effect","dir":"Articles","previous_headings":"Mediation Only","what":"Standardized Indirect Effect","title":"manymome","text":"compute indirect effect predictor standardized, set standardized_x TRUE. compute indirect effect outcome variable standardized, set standardized_y TRUE. compute (completely) standardized indirect effect, set standardized_x standardized_y TRUE. call compute (completely) standardized indirect effect: indirect effect x y m1 m2 0.086, 95% confidence interval [0.022, 0.157], significantly different zero (p < .05). One SD increase x leads 0.086 increase SD y m1 m2.","code":"out_med_stdxy <- indirect_effect(x = \"x\",                                  y = \"y\",                                  m = c(\"m1\", \"m2\"),                                  fit = fit_med,                                  boot_ci = TRUE,                                  boot_out = out_med,                                  standardized_x = TRUE,                                  standardized_y = TRUE) out_med_stdxy #>  #> == Indirect Effect == #>                                         #>  Path:               x -> m1 -> m2 -> y #>  Indirect Effect     0.086              #>  95.0% Bootstrap CI: [0.022 to 0.157]   #>  #> Computation Formula: #>   (b.m1~x)*(b.m2~m1)*(b.y~m2)*sd_x/sd_y #> Computation: #>   (0.82244)*(0.42078)*(0.52077)*(0.95010)/(1.99960) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>   m1~x       0.822 #>  m2~m1       0.421 #>   y~m2       0.521 #>  #> NOTE: The effects of the component paths are from the model, not standardized."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"estimating-indirect-effects-for-any-paths","dir":"Articles","previous_headings":"Mediation Only","what":"Estimating Indirect Effects For Any Paths","title":"manymome","text":"indirect_effect() can used indirect effect path path model. example, estimate test indirect effect x m2 y, bypassing m1, simply set x \"x\", y \"y\", m \"m2\": indirect effect along path significant. Similarly, indirect effects m1 m2 y x m1 y can also tested setting three arguments accordingly. Although c1 c2 labelled control variables, appropriate, indirect effects y m1 /m2 can also computed tested.","code":"out_x_m2_y <- indirect_effect(x = \"x\",                               y = \"y\",                               m = \"m2\",                               fit = fit_med,                               boot_ci = TRUE,                               boot_out = out_med) out_x_m2_y #>  #> == Indirect Effect == #>                                        #>  Path:               x -> m2 -> y      #>  Indirect Effect     -0.060            #>  95.0% Bootstrap CI: [-0.233 to 0.066] #>  #> Computation Formula: #>   (b.m2~x)*(b.y~m2) #> Computation: #>   (-0.11610)*(0.52077) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>  Path Coefficient #>  m2~x      -0.116 #>  y~m2       0.521"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"total-indirect-effects-and-total-effects","dir":"Articles","previous_headings":"Mediation Only","what":"Total Indirect Effects and Total Effects","title":"manymome","text":"Addition (+) subtraction (-) can applied outputs indirect_effect(). example, total indirect effect x y sum indirect effects: x -> m1 -> m2 -> y x -> m1 -> y x -> m2 -> y Two computed (out_med out_x_m2_y). compute indirect effect x -> m1 -> y can “add” indirect effects get total indirect effect: total indirect effect -0.238, significant. example inconsistent mediation: indirect Effects positive negative: Similarly, total effect x y can computed adding effects, direct indirect. direct effect can computed m set: total effect: total effect 0.255, significant. illustrates total effect can misleading component paths different signs. See help(math_indirect) information addition subtraction output indirect_effect().","code":"out_x_m1_y <- indirect_effect(x = \"x\",                               y = \"y\",                               m = \"m1\",                               fit = fit_med,                               boot_ci = TRUE,                               boot_out = out_med) out_x_m1_y #>  #> == Indirect Effect == #>                                        #>  Path:               x -> m1 -> y      #>  Indirect Effect     -0.358            #>  95.0% Bootstrap CI: [-0.699 to 0.008] #>  #> Computation Formula: #>   (b.m1~x)*(b.y~m1) #> Computation: #>   (0.82244)*(-0.43534) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>  Path Coefficient #>  m1~x       0.822 #>  y~m1      -0.435 total_ind <- out_med + out_x_m1_y + out_x_m2_y total_ind #>  #> == Indirect Effect == #>                                          #>  Path:                x -> m1 -> m2 -> y #>  Path:                x -> m1 -> y       #>  Path:                x -> m2 -> y       #>  Function of Effects: -0.238             #>  95.0% Bootstrap CI:  [-0.645 to 0.098]  #>  #> Computation of the Function of Effects: #>  ((x->m1->m2->y) #> +(x->m1->y)) #> +(x->m2->y)  #>  #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. coef(out_med) #>       y~x  #> 0.1802238 coef(out_x_m1_y) #>        y~x  #> -0.3580391 coef(out_x_m2_y) #>       y~x  #> -0.060461 out_x_direct <- indirect_effect(x = \"x\",                                 y = \"y\",                                 fit = fit_med,                                 boot_ci = TRUE,                                 boot_out = out_med) out_x_direct #>  #> ==  Effect == #>                                        #>  Path:               x -> y            #>  Effect              0.493             #>  95.0% Bootstrap CI: [-0.075 to 1.014] #>  #> Computation Formula: #>   (b.y~x) #> Computation: #>   (0.49285) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. total_effect <- out_med + out_x_m1_y + out_x_m2_y + out_x_direct total_effect #>  #> == Indirect Effect == #>                                          #>  Path:                x -> m1 -> m2 -> y #>  Path:                x -> m1 -> y       #>  Path:                x -> m2 -> y       #>  Path:                x -> y             #>  Function of Effects: 0.255              #>  95.0% Bootstrap CI:  [-0.239 to 0.661]  #>  #> Computation of the Function of Effects: #>  (((x->m1->m2->y) #> +(x->m1->y)) #> +(x->m2->y)) #> +(x->y)  #>  #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples."},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"advantages","dir":"Articles","previous_headings":"Summary","what":"Advantages","title":"manymome","text":"model fitting stage easier. need label parameters define effects. Users can also use methods confidence interval use bootstrapping indirect effects conditional indirect effects. Missing data can handled missing = \"fiml\" calling lavaan::sem(). bootstrapping estimates used Stage 2, indirect effects conditional indirect effects can also computed bootstrap confidence intervals, just like defining lavaan, presence missing data. Missing data handled multiple imputation also supported since version 0.1.9.8. Models fitted semTools::sem.mi() semTools::runMI() multiple imputation datasets can used just like output lavaan::sem(). Monte Carlo confidence intervals cna formed effects computed models (see vignette(\"do_mc_lavaan_mi\")). Bootstrapping needs done . bootstrap estimates can reused computing indirect effects conditional indirect effects. particularly useful sample size large missing data. Users can explore path levels moderators without respecifying refitting model. Flexibility makes difficult test possible scenarios. Therefore, print methods also print details computation (e.g., indirect effect computed) users can () understand effect computed, (b) verify computation necessary. See section advantages.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"limitations","dir":"Articles","previous_headings":"Summary","what":"Limitations","title":"manymome","text":"package manymome supports “many” models … certainly . models yet support. example, support path starts nominal categorical variable. also supports percentile bootstrap confidence interval (although merely preference us). tools need used cases. See section limitations.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"other-uses-and-scenarios","dir":"Articles","previous_headings":"Summary","what":"Other Uses and Scenarios","title":"manymome","text":"options available manymome. example, can used categorical moderators models fitted multiple regression. Please refer help page examples functions, articles. articles added future scenarios.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"monte-carlo-confidence-intervals","dir":"Articles","previous_headings":"Summary","what":"Monte Carlo Confidence Intervals","title":"manymome","text":"Monte Carlo confidence intervals can also formed using functions illustrated . First use do_mc() instead do_boot() generate simulated sample estimates. calling main functions, use mc_ci = TRUE set mc_out output do_mc(). Please refer vignette(\"do_mc\") illustration, vignette(\"do_mc_lavaan_mi\") form Monte Carlo confidence intervals models fitted multiple imputation datasets.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"manymome","text":"Cheung, M. W.-L. (2009). Comparison methods constructing confidence intervals standardized indirect effects. Behavior Research Methods, 41(2), 425-438. https://doi.org/10.3758/BRM.41.2.425 Friedrich, R. J. (1982). defense multiplicative terms multiple regression equations. American Journal Political Science, 26(4), 797-833. https://doi.org/10.2307/2110973 Hayes, . F. (2015). index test linear moderated mediation. Multivariate Behavioral Research, 50(1), 1-22. https://doi.org/10.1080/00273171.2014.962683 Hayes, . F. (2018). Partial, conditional, moderated moderated mediation: Quantification, inference, interpretation. Communication Monographs, 85(1), 4-40. https://doi.org/10.1080/03637751.2017.1352100 Kwan, J. L. Y., & Chan, W. (2018). Variable system: alternative approach analysis mediated moderation. Psychological Methods, 23(2), 262-277. https://doi.org/10.1037/met0000160 Miles, J. N. V., Kulesza, M., Ewing, B., Shih, R. ., Tucker, J. S., & D’Amico, E. J. (2015). Moderated mediation analysis: illustration using association gender delinquency mental health. Journal Criminal Psychology, 5(2), 99-123. https://doi.org/10.1108/JCP-02-2015-0010","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_cond_indirect_and_friends_workflow.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Technical Appendix: Workflow of `cond_indirect()`","text":"technical appendix describes cond_indirect() package manymome works internally extract parameters compute conditional indirect effect.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_cond_indirect_and_friends_workflow.html","id":"cond_indirect","dir":"Articles","previous_headings":"","what":"cond_indirect()","title":"Technical Appendix: Workflow of `cond_indirect()`","text":"Workflow manymome::cond_indirect()","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_cond_indirect_and_friends_workflow.html","id":"cond_indirect_effects","dir":"Articles","previous_headings":"","what":"cond_indirect_effects()","title":"Technical Appendix: Workflow of `cond_indirect()`","text":"Workflow manymome::cond_indirect_effects()","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/manymome_cond_indirect_and_friends_workflow.html","id":"main-workflow","dir":"Articles","previous_headings":"indirect_i()","what":"Main workflow","title":"Technical Appendix: Workflow of `cond_indirect()`","text":"Workflow manymome::indirect_i() Call get_prod(), see workflow Creating prods.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_cond_indirect_and_friends_workflow.html","id":"prods-not-supplied","dir":"Articles","previous_headings":"indirect_i()","what":"prods not supplied","title":"Technical Appendix: Workflow of `cond_indirect()`","text":"Creating prods Workflow manymome::indirect_i(): Creating prods","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/manymome_cond_indirect_and_friends_workflow.html","id":"latent-variables","dir":"Articles","previous_headings":"Notes","what":"Latent variables","title":"Technical Appendix: Workflow of `cond_indirect()`","text":"variables along path latent variables, product term(s) must identified names raw scores available. Default uses \"_x_\". example, f1_x_f2 product term f1 f2.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_cond_indirect_and_friends_workflow.html","id":"extracting-point-estimates-and-variance-covariance-matrix","dir":"Articles","previous_headings":"Notes","what":"Extracting Point Estimates and Variance-Covariance Matrix","title":"Technical Appendix: Workflow of `cond_indirect()`","text":"point estimates variance-covariance matrix point estimates needed, extracted internally using functions developed fit object, can lavaan-class object, list outputs stats::lm(), lavaan.mi-class object generated fitting model several datasets using multiple imputation.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_boot_workflow.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"Technical Appendix: Workflow of `do_boot()`","text":"technical appendix describes do_boot() package manymome works generate bootstrap estimates used functions form confidence intervals.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_boot_workflow.html","id":"do_boot","dir":"Articles","previous_headings":"","what":"do_boot()","title":"Technical Appendix: Workflow of `do_boot()`","text":"Workflow manymome::do_boot()","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_boot_workflow.html","id":"fit2boot_out","dir":"Articles","previous_headings":"lavaan","what":"fit2boot_out()","title":"Technical Appendix: Workflow of `do_boot()`","text":"retrieves stored bootstrap estimates. Workflow manymome::fit2boot_out()","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_boot_workflow.html","id":"fit2boot_out_do_boot","dir":"Articles","previous_headings":"lavaan","what":"fit2boot_out_do_boot()","title":"Technical Appendix: Workflow of `do_boot()`","text":"Workflow manymome::fit2boot_out_do_boot()","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_boot_workflow.html","id":"lm2boot_out_parallel","dir":"Articles","previous_headings":"lm","what":"lm2boot_out_parallel()","title":"Technical Appendix: Workflow of `do_boot()`","text":"Workflow manymome::lm2boot_out_parallel()","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_boot_workflow.html","id":"lm2boot_out","dir":"Articles","previous_headings":"lm","what":"lm2boot_out()","title":"Technical Appendix: Workflow of `do_boot()`","text":"Workflow manymome::lm2boot_out()","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_boot_workflow.html","id":"extracting-point-estimates","dir":"Articles","previous_headings":"Notes","what":"Extracting Point Estimates","title":"Technical Appendix: Workflow of `do_boot()`","text":"point estimates needed, extracted internally using functions developed fit object, can lavaan-class object, list outputs stats::lm(), lavaan.mi-class object generated fitting model several datasets using multiple imputation.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_mc_workflow.html","id":"do_mc","dir":"Articles","previous_headings":"","what":"do_mc()","title":"Technical Appendix: Workflow of `do_mc()`","text":"Workflow manymome::do_mc()","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_mc_workflow.html","id":"fit2mc_out","dir":"Articles","previous_headings":"","what":"fit2mc_out()","title":"Technical Appendix: Workflow of `do_mc()`","text":"retrieves stored Monte Carlo estimates Workflow manymome::fit2mc_out()","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/articles/manymome_do_mc_workflow.html","id":"extracting-point-estimates-and-variance-covariance-matrix","dir":"Articles","previous_headings":"Notes","what":"Extracting Point Estimates and Variance-Covariance Matrix","title":"Technical Appendix: Workflow of `do_mc()`","text":"point estimates variance-covariance matrix point estimates needed, extracted internally using functions developed fit object, can lavaan-class object, list outputs stats::lm(), lavaan.mi-class object generated fitting model several datasets using multiple imputation.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mediation Models with Latent Variables","text":"article brief illustration indirect_effect() package manymome can used estimate indirect effects among latent variables form bootstrap confidence intervals effects.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"data-set-and-model","dir":"Articles","previous_headings":"","what":"Data Set and Model","title":"Mediation Models with Latent Variables","text":"sample dataset used illustration: dataset 14 variables, indicators four latent factors: f1, f2, f3, f4. Suppose model fitted: plot chunk mde_lav_draw_model model can fitted lavaan::sem(): estimates paths latent variables: Suppose free parameters, like use ML form confidence intervals. indirect effects, want use bootstrapping.","code":"library(manymome) dat <- data_sem print(round(head(dat), 1)) #>    x01  x02  x03  x04  x05  x06  x07  x08  x09  x10  x11  x12  x13  x14 #> 1  0.2 -1.1 -0.2  2.7 -0.1  2.2  1.7  0.2 -1.9 -2.1 -0.9 -0.5 -0.6 -1.5 #> 2  0.1  0.3  0.9 -0.5 -1.0  0.8 -0.3 -0.9  0.8 -1.5 -0.7  1.0 -0.8 -1.4 #> 3 -0.1 -0.1  2.4 -0.2 -0.1 -1.6 -1.9 -2.4 -0.3 -0.2  0.5 -0.7  0.2 -0.7 #> 4 -0.5  1.1 -0.7 -0.5  1.0 -0.6 -0.9 -1.5 -1.5 -0.5 -2.2 -1.6 -0.8 -0.2 #> 5 -0.8 -0.3 -0.9 -0.2  0.3 -2.1 -0.5 -1.8 -0.1 -2.7 -0.4 -1.2  0.3 -2.6 #> 6  0.9  0.3  0.3  1.0 -1.8 -0.4  0.8 -0.4 -1.1 -2.1  0.4  0.0 -0.3  2.2 mod <- \" f1 =~ x01 + x02 + x03 f2 =~ x04 + x05 + x06 + x07 f3 =~ x08 + x09 + x10 f4 =~ x11 + x12 + x13 + x14 f3 ~  f1 + f2 f4 ~  f1 + f3 \" fit_med <- sem(model = mod,                data = dat) est <- parameterEstimates(fit_med) est[est$op == \"~\", ] #>    lhs op rhs   est    se     z pvalue ci.lower ci.upper #> 15  f3  ~  f1 0.243 0.120 2.018  0.044    0.007    0.479 #> 16  f3  ~  f2 0.326 0.102 3.186  0.001    0.125    0.526 #> 17  f4  ~  f1 0.447 0.125 3.592  0.000    0.203    0.692 #> 18  f4  ~  f3 0.402 0.090 4.445  0.000    0.225    0.579"},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"generating-bootstrap-estimates","dir":"Articles","previous_headings":"","what":"Generating Bootstrap Estimates","title":"Mediation Models with Latent Variables","text":"Although bootstrap estimates can generated stored first time call indirect_effect(), illustrate using do_boot() generate bootstrap estimates used indirect_effect(): Please see vignette(\"do_boot\") help page do_boot() use function. real research, R, number bootstrap samples, set 2000 even 5000. argument ncores can usually omitted unless users want manually control number CPU cores used parallel processing.","code":"boot_out_med <- do_boot(fit_med,                         R = 100,                         seed = 98171,                         ncores = 1)"},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"indirect-effects","dir":"Articles","previous_headings":"","what":"Indirect Effects","title":"Mediation Models with Latent Variables","text":"Even though path coefficients labelled, can still use indirect_effect() estimate indirect effect form bootstrap confidence interval path model. reusing generated bootstrap estimates, need repeat resampling estimation. Suppose want estimate indirect effect f1 f4 f3: indirect effect 0.098, 95% confidence interval [-0.007, 0.216]. Similarly, can estimate indirect effect f2 f4 f3: indirect effect 0.131, 95% confidence interval [0.049, 0.254].","code":"out_f1f3f4 <- indirect_effect(x = \"f1\",                               y = \"f4\",                               m = \"f3\",                               fit = fit_med,                               boot_ci = TRUE,                               boot_out = boot_out_med) out_f1f3f4 #>  #> == Indirect Effect == #>                                        #>  Path:               f1 -> f3 -> f4    #>  Indirect Effect     0.098             #>  95.0% Bootstrap CI: [-0.007 to 0.216] #>  #> Computation Formula: #>   (b.f3~f1)*(b.f4~f3) #> Computation: #>   (0.24307)*(0.40186) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  f3~f1       0.243 #>  f4~f3       0.402 out_f2f3f4 <- indirect_effect(x = \"f2\",                               y = \"f4\",                               m = \"f3\",                               fit = fit_med,                               boot_ci = TRUE,                               boot_out = boot_out_med) out_f2f3f4 #>  #> == Indirect Effect == #>                                       #>  Path:               f2 -> f3 -> f4   #>  Indirect Effect     0.131            #>  95.0% Bootstrap CI: [0.049 to 0.254] #>  #> Computation Formula: #>   (b.f3~f2)*(b.f4~f3) #> Computation: #>   (0.32561)*(0.40186) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  f3~f2       0.326 #>  f4~f3       0.402"},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"standardized-indirect-effects","dir":"Articles","previous_headings":"","what":"Standardized Indirect effects","title":"Mediation Models with Latent Variables","text":"standardized indirect effect f1 f4 f3 can estimated setting standardized_x standardized_y `TRUE: standardized indirect effect 0.073, 95% confidence interval [-0.005, 0.157]. Similarly, can estimate standardized indirect effect f2 f4 f3: standardized indirect effect 0.116, 95% confidence interval [0.044, 0.204]. Note , unlike confidence intervals lavaan::standardizedSolution(), confidence intervals formed indirect_effect() bootstrap confidence intervals formed based bootstrap estimates, rather intervals based delta method.","code":"std_f1f3f4 <- indirect_effect(x = \"f1\",                               y = \"f4\",                               m = \"f3\",                               fit = fit_med,                               boot_ci = TRUE,                               boot_out = boot_out_med,                               standardized_x = TRUE,                               standardized_y = TRUE) std_f1f3f4 #>  #> == Indirect Effect == #>                                        #>  Path:               f1 -> f3 -> f4    #>  Indirect Effect     0.073             #>  95.0% Bootstrap CI: [-0.005 to 0.157] #>  #> Computation Formula: #>   (b.f3~f1)*(b.f4~f3)*sd_f1/sd_f4 #> Computation: #>   (0.24307)*(0.40186)*(0.87470)/(1.17421) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  f3~f1       0.243 #>  f4~f3       0.402 #>  #> NOTE: The effects of the component paths are from the model, not standardized. std_f2f3f4 <- indirect_effect(x = \"f2\",                               y = \"f4\",                               m = \"f3\",                               fit = fit_med,                               boot_ci = TRUE,                               boot_out = boot_out_med,                               standardized_x = TRUE,                               standardized_y = TRUE) std_f2f3f4 #>  #> == Indirect Effect == #>                                       #>  Path:               f2 -> f3 -> f4   #>  Indirect Effect     0.116            #>  95.0% Bootstrap CI: [0.044 to 0.204] #>  #> Computation Formula: #>   (b.f3~f2)*(b.f4~f3)*sd_f2/sd_f4 #> Computation: #>   (0.32561)*(0.40186)*(1.03782)/(1.17421) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  f3~f2       0.326 #>  f4~f3       0.402 #>  #> NOTE: The effects of the component paths are from the model, not standardized."},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"adding-effects","dir":"Articles","previous_headings":"","what":"Adding Effects","title":"Mediation Models with Latent Variables","text":"Note results indirect_effect() can added using +. example, find total effect f1 f4, also need compute direct effect f1 f4. Although already available lavaan output, still use indirect_effect() compute can added indirect effect computed bootstrap confidence interval: can now compute total effect: total effect f1 f4 0.545, 95% confidence interval [0.318, 0.858].","code":"out_f1f4 <- indirect_effect(x = \"f1\",                             y = \"f4\",                             fit = fit_med,                             boot_ci = TRUE,                             boot_out = boot_out_med) out_f1f4 #>  #> ==  Effect == #>                                       #>  Path:               f1 -> f4         #>  Effect              0.447            #>  95.0% Bootstrap CI: [0.203 to 0.753] #>  #> Computation Formula: #>   (b.f4~f1) #> Computation: #>   (0.44749) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. out_f1_total <- out_f1f3f4 + out_f1f4 out_f1_total #>  #> == Indirect Effect == #>                                        #>  Path:                f1 -> f3 -> f4   #>  Path:                f1 -> f4         #>  Function of Effects: 0.545            #>  95.0% Bootstrap CI:  [0.318 to 0.858] #>  #> Computation of the Function of Effects: #>  (f1->f3->f4) #> +(f1->f4)  #>  #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples."},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"differences-in-effects","dir":"Articles","previous_headings":"","what":"Differences in Effects","title":"Mediation Models with Latent Variables","text":"Subtraction can also conducted using -. example, can compute difference indirect effect f1 f4 direct effect f1 f4: difference effects 0.350, 95% confidence interval [-0.027, 0.700].","code":"out_f1_diff <- out_f1f4 - out_f1f3f4 out_f1_diff #>  #> == Indirect Effect == #>                                         #>  Path:                f1 -> f4          #>  Path:                f1 -> f3 -> f4    #>  Function of Effects: 0.350             #>  95.0% Bootstrap CI:  [-0.027 to 0.700] #>  #> Computation of the Function of Effects: #>  (f1->f4) #> -(f1->f3->f4)  #>  #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples."},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"identifying-all-indirect-paths","dir":"Articles","previous_headings":"","what":"Identifying All Indirect paths","title":"Mediation Models with Latent Variables","text":"several indirect paths model, function all_indirect_paths() can used automatically identify indirect paths (path least one mediator) model: output all_paths-class object. can used many_indirect_effects() first argument, paths, output all_indirect_paths(). arguments passed indirect_effect(). output indirect_list-class object, list outputs indirect_effects(). printed, summary indirect effects printed: output many_indirect_effects() named list, names path name appeared output. Individual indirect effects can extracted using either indices path names example using index: example using path name (though recommended name usually long): extracted element can used just like outputs indirect_effect() previous section. Users can customize search. example, model control variables, can excluded search indirect paths. Users can also limit search paths start end selected variables. See help page all_indirect_paths() many_indirect_effects() arguments available. demonstrated document, total indirect effect can computed total_indirect_effect() output many_indirect_effects(). Please refer vignette(\"med_lm\") example help page total_indirect_effect().","code":"all_paths <- all_indirect_paths(fit = fit_med) all_paths #> Call:  #> all_indirect_paths(fit = fit_med) #> Path(s):  #>   path           #> 1 f1 -> f3 -> f4 #> 2 f2 -> f3 -> f4 out_all <- many_indirect_effects(paths = all_paths,                                  fit = fit_med,                                  boot_ci = TRUE,                                  boot_out = boot_out_med) out_all #>  #> ==  Indirect Effect(s)   == #>                  ind  CI.lo CI.hi Sig #> f1 -> f3 -> f4 0.098 -0.007 0.216     #> f2 -> f3 -> f4 0.131  0.049 0.254 Sig #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - The 'ind' column shows the indirect effects. #> out1 <- out_all[[1]] out1 #>  #> == Indirect Effect == #>                                        #>  Path:               f1 -> f3 -> f4    #>  Indirect Effect     0.098             #>  95.0% Bootstrap CI: [-0.007 to 0.216] #>  #> Computation Formula: #>   (b.f3~f1)*(b.f4~f3) #> Computation: #>   (0.24307)*(0.40186) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  f3~f1       0.243 #>  f4~f3       0.402 out2 <- out_all[[\"f2 -> f3 -> f4\"]] out2 #>  #> == Indirect Effect == #>                                       #>  Path:               f2 -> f3 -> f4   #>  Indirect Effect     0.131            #>  95.0% Bootstrap CI: [0.049 to 0.254] #>  #> Computation Formula: #>   (b.f3~f2)*(b.f4~f3) #> Computation: #>   (0.32561)*(0.40186) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  f3~f2       0.326 #>  f4~f3       0.402"},{"path":"https://sfcheung.github.io/manymome/articles/med_lav.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Mediation Models with Latent Variables","text":"information do_boot() indirect_effect(), please refer help pages, vignette(\"manymome\") vignette(\"do_boot\"). Monte Carlo confidence intervals can also formed using functions illustrated . First use do_mc() instead do_boot() generate simulated sample estimates. calling main functions, use mc_ci = TRUE set mc_out output do_mc(). Please refer vignette(\"do_mc\") illustration.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Mediation Analysis by Multiple Regression","text":"article brief illustration use indirect_effect() package manymome estimate indirect effects model parameters estimated ordinary least squares (OLS) multiple regression using lm().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"data-set-and-model","dir":"Articles","previous_headings":"","what":"Data Set and Model","title":"Mediation Analysis by Multiple Regression","text":"sample dataset used illustration: dataset 9 variables: 2 predictors (x1 x2), three mediators (m11, m12, m2), two outcome variables (y1 y2), two control variables (c1 c2). Suppose model fitted: plot chunk med_lm_draw_model Despite apparent complexity, path parameters can estimated five multiple regression models: regression coefficient estimates paths (control variables omitted): Although mandatory, recommended combine five models one object (system regression models) using lm2list(): Simply use lm() outputs arguments. Order matter. ensure regression outputs can validly combined, lm2list() also check: whether sample used regression analysis (just sample size, set cases), whether models “connected”, ensure regression outputs can validly combined.","code":"library(manymome) dat <- data_med_complicated print(round(head(dat), 2)) #>      x1   x2  m11  m12   m2   y1    y2   c1    c2 #> 1 10.16 4.00 5.84 6.78 7.11 6.06 10.38 5.01  8.20 #> 2 10.89 4.79 4.95 5.81 7.92 5.15  8.52 3.92  9.90 #> 3  9.99 5.79 4.95 4.47 8.21 3.25  7.81 5.91 11.36 #> 4 12.36 4.80 5.56 6.21 8.88 6.27  9.41 6.06 10.49 #> 5 10.85 6.39 6.19 5.39 8.76 5.36  9.84 4.28  9.81 #> 6 10.28 4.58 4.88 4.28 8.50 4.57 10.42 4.71 11.38 lm_m11 <- lm(m11 ~ x1 + x2 + c1 + c2, dat) lm_m12 <- lm(m12 ~ m11 + x1 + x2 + c1 + c2, dat) lm_m2 <- lm(m2 ~ x1 + x2 + c1 + c2, dat) lm_y1 <- lm(y1 ~ m12 + m2 + m11 + x1 + x2 + c1 + c2, dat) lm_y2 <- lm(y2 ~ m12 + m2 + m11 + x1 + x2 + c1 + c2, dat) #>        m11    m12    m2     y1     y2 #> x1   0.352 -0.212 0.022 -0.078  0.115 #> x2  -0.045 -0.072 0.289  0.003  0.062 #> m11         0.454        0.147  0.024 #> m12                      0.234  0.135 #> m2                      -0.433 -0.436 fit_lm <- lm2list(lm_m11, lm_m12, lm_m2, lm_y1, lm_y2) fit_lm #>  #> The models: #> m11 ~ x1 + x2 + c1 + c2 #> m12 ~ m11 + x1 + x2 + c1 + c2 #> m2 ~ x1 + x2 + c1 + c2 #> y1 ~ m12 + m2 + m11 + x1 + x2 + c1 + c2 #> y2 ~ m12 + m2 + m11 + x1 + x2 + c1 + c2"},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"generating-bootstrap-estimates","dir":"Articles","previous_headings":"","what":"Generating Bootstrap Estimates","title":"Mediation Analysis by Multiple Regression","text":"form nonparametric bootstrap confidence interval indirect effects computed, do_boot() can used generate bootstrap estimates regression coefficients first. estimates can reused indirect effects estimated. Please see vignette(\"do_boot\") help page do_boot() use function. real research, R, number bootstrap samples, set 2000 even 5000. argument ncores can usually omitted unless users want manually control number CPU cores used parallel processing.","code":"boot_out_lm <- do_boot(fit_lm,                        R = 100,                        seed = 54532,                        ncores = 1)"},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"indirect-effects","dir":"Articles","previous_headings":"","what":"Indirect Effects","title":"Mediation Analysis by Multiple Regression","text":"can now use indirect_effect() estimate indirect effect form bootstrap confidence interval path model. reusing generated bootstrap estimates, need repeat resampling. Suppose want estimate indirect effect x1 y1 m11 m12: (Refer vignette(\"manymome\") help page indirect_effect() arguments.) indirect effect 0.037, 95% confidence interval [0.003, 0.077]. Similarly, can estimate indirect effect x2 y2 m2: indirect effect -0.126, 95% confidence interval [-0.233, -0.043]. Note indirect path model can estimated way. Suppose, regression analysis, want estimate indirect effect x2 m12 m11, just call indirect_effect(): indirect effect -0.020, 95% confidence interval [-0.139, 0.110]. limit path estimated, long required path coefficients model. indirect_effect() also check whether path valid. Therefore, estimating effect x1 m2 m11 result error path exist model defined regression outputs.","code":"out_x1m11m12y1 <- indirect_effect(x = \"x1\",                                   y = \"y1\",                                   m = c(\"m11\", \"m12\"),                                   fit = fit_lm,                                   boot_ci = TRUE,                                   boot_out = boot_out_lm) out_x1m11m12y1 #>  #> == Indirect Effect == #>                                             #>  Path:               x1 -> m11 -> m12 -> y1 #>  Indirect Effect     0.037                  #>  95.0% Bootstrap CI: [0.003 to 0.077]       #>  #> Computation Formula: #>   (b.m11~x1)*(b.m12~m11)*(b.y1~m12) #> Computation: #>   (0.35204)*(0.45408)*(0.23402) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>     Path Coefficient #>   m11~x1       0.352 #>  m12~m11       0.454 #>   y1~m12       0.234 out_x2m2y2 <- indirect_effect(x = \"x2\",                               y = \"y2\",                               m = \"m2\",                               fit = fit_lm,                               boot_ci = TRUE,                               boot_out = boot_out_lm) out_x2m2y2 #>  #> == Indirect Effect == #>                                         #>  Path:               x2 -> m2 -> y2     #>  Indirect Effect     -0.126             #>  95.0% Bootstrap CI: [-0.233 to -0.043] #>  #> Computation Formula: #>   (b.m2~x2)*(b.y2~m2) #> Computation: #>   (0.28901)*(-0.43598) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  m2~x2       0.289 #>  y2~m2      -0.436 out_x2m11m12 <- indirect_effect(x = \"x2\",                                 y = \"m12\",                                 m = \"m11\",                                 fit = fit_lm,                                 boot_ci = TRUE,                                 boot_out = boot_out_lm) out_x2m11m12 #>  #> == Indirect Effect == #>                                        #>  Path:               x2 -> m11 -> m12  #>  Indirect Effect     -0.020            #>  95.0% Bootstrap CI: [-0.139 to 0.110] #>  #> Computation Formula: #>   (b.m11~x2)*(b.m12~m11) #> Computation: #>   (-0.04471)*(0.45408) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>     Path Coefficient #>   m11~x2     -0.0447 #>  m12~m11      0.4541"},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"standardized-indirect-effects","dir":"Articles","previous_headings":"","what":"Standardized Indirect effects","title":"Mediation Analysis by Multiple Regression","text":"standardized indirect effect x1 y1 m11 m12 can estimated setting standardized_x standardized_y `TRUE: standardized indirect effect 0.039, 95% confidence interval [0.004,0.085]. Similarly, can estimate standardized indirect effect x1 y1 m2: standardized indirect effect -0.010, 95% confidence interval [-0.069, 0.067].","code":"std_x1m11m12y1 <- indirect_effect(x = \"x1\",                                   y = \"y1\",                                   m = c(\"m11\", \"m12\"),                                   fit = fit_lm,                                   boot_ci = TRUE,                                   boot_out = boot_out_lm,                                   standardized_x = TRUE,                                   standardized_y = TRUE) std_x1m11m12y1 #>  #> == Indirect Effect == #>                                             #>  Path:               x1 -> m11 -> m12 -> y1 #>  Indirect Effect     0.039                  #>  95.0% Bootstrap CI: [0.004 to 0.085]       #>  #> Computation Formula: #>   (b.m11~x1)*(b.m12~m11)*(b.y1~m12)*sd_x1/sd_y1 #> Computation: #>   (0.35204)*(0.45408)*(0.23402)*(1.11605)/(1.06579) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>     Path Coefficient #>   m11~x1       0.352 #>  m12~m11       0.454 #>   y1~m12       0.234 #>  #> NOTE: The effects of the component paths are from the model, not standardized. std_x1m2y1 <- indirect_effect(x = \"x1\",                               y = \"y1\",                               m = \"m2\",                               fit = fit_lm,                               boot_ci = TRUE,                               boot_out = boot_out_lm,                               standardized_x = TRUE,                               standardized_y = TRUE) std_x1m2y1 #>  #> == Indirect Effect == #>                                        #>  Path:               x1 -> m2 -> y1    #>  Indirect Effect     -0.010            #>  95.0% Bootstrap CI: [-0.069 to 0.067] #>  #> Computation Formula: #>   (b.m2~x1)*(b.y1~m2)*sd_x1/sd_y1 #> Computation: #>   (0.02233)*(-0.43300)*(1.11605)/(1.06579) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  m2~x1      0.0223 #>  y1~m2     -0.4330 #>  #> NOTE: The effects of the component paths are from the model, not standardized."},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"adding-effects","dir":"Articles","previous_headings":"","what":"Adding Effects","title":"Mediation Analysis by Multiple Regression","text":"Note results indirect_effect() can added using +. example, find total indirect effect x1 y1, need compute indirect effects along following paths: x1 m11 m12 y1 x1 m11 y1 x1 m12 y1 x1 m2 y1 indirect effects along Path already computed. compute indirect effects along Paths b, c, d : can now compute total indirect effect: total effect f1 f4 0.030, 95% confidence interval [-0.088, 0.132]. See help(\"math_indirect\") details addition indirect_effect() outputs.","code":"out_x1m11y1 <- indirect_effect(x = \"x1\",                                y = \"y1\",                                m = \"m11\",                                fit = fit_lm,                                boot_ci = TRUE,                                boot_out = boot_out_lm) out_x1m11y1 #>  #> == Indirect Effect == #>                                        #>  Path:               x1 -> m11 -> y1   #>  Indirect Effect     0.052             #>  95.0% Bootstrap CI: [-0.036 to 0.103] #>  #> Computation Formula: #>   (b.m11~x1)*(b.y1~m11) #> Computation: #>   (0.35204)*(0.14694) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>    Path Coefficient #>  m11~x1       0.352 #>  y1~m11       0.147 out_x1m12y1 <- indirect_effect(x = \"x1\",                                y = \"y1\",                                m = \"m12\",                                fit = fit_lm,                                boot_ci = TRUE,                                boot_out = boot_out_lm) out_x1m12y1 #>  #> == Indirect Effect == #>                                         #>  Path:               x1 -> m12 -> y1    #>  Indirect Effect     -0.050             #>  95.0% Bootstrap CI: [-0.125 to -0.000] #>  #> Computation Formula: #>   (b.m12~x1)*(b.y1~m12) #> Computation: #>   (-0.21182)*(0.23402) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>    Path Coefficient #>  m12~x1      -0.212 #>  y1~m12       0.234 out_x1m2y1 <- indirect_effect(x = \"x1\",                                y = \"y1\",                                m = \"m2\",                                fit = fit_lm,                                boot_ci = TRUE,                                boot_out = boot_out_lm) out_x1m2y1 #>  #> == Indirect Effect == #>                                        #>  Path:               x1 -> m2 -> y1    #>  Indirect Effect     -0.010            #>  95.0% Bootstrap CI: [-0.077 to 0.064] #>  #> Computation Formula: #>   (b.m2~x1)*(b.y1~m2) #> Computation: #>   (0.02233)*(-0.43300) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  m2~x1      0.0223 #>  y1~m2     -0.4330 out_x1y1_total <- out_x1m11m12y1 + out_x1m11y1 + out_x1m12y1 + out_x1m2y1 out_x1y1_total #>  #> == Indirect Effect == #>                                              #>  Path:                x1 -> m11 -> m12 -> y1 #>  Path:                x1 -> m11 -> y1        #>  Path:                x1 -> m12 -> y1        #>  Path:                x1 -> m2 -> y1         #>  Function of Effects: 0.030                  #>  95.0% Bootstrap CI:  [-0.088 to 0.132]      #>  #> Computation of the Function of Effects: #>  (((x1->m11->m12->y1) #> +(x1->m11->y1)) #> +(x1->m12->y1)) #> +(x1->m2->y1)  #>  #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples."},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"differences-in-effects","dir":"Articles","previous_headings":"","what":"Differences in Effects","title":"Mediation Analysis by Multiple Regression","text":"Subtraction can also conducted using -. example, can compute difference indirect effect x1 y1 m11 m12 indirect effect x1 y1 m2: difference effects 0.047, 95% confidence interval [-0.038, 0.118]. See help(\"math_indirect\") details subtraction indirect_effect() outputs.","code":"out_x1_diff <- out_x1m11m12y1 - out_x1m2y1 out_x1_diff #>  #> == Indirect Effect == #>                                              #>  Path:                x1 -> m11 -> m12 -> y1 #>  Path:                x1 -> m2 -> y1         #>  Function of Effects: 0.047                  #>  95.0% Bootstrap CI:  [-0.038 to 0.118]      #>  #> Computation of the Function of Effects: #>  (x1->m11->m12->y1) #> -(x1->m2->y1)  #>  #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples."},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"identifying-all-indirect-paths","dir":"Articles","previous_headings":"","what":"Identifying All Indirect paths","title":"Mediation Analysis by Multiple Regression","text":"several indirect paths model, function all_indirect_paths() can used automatically identify indirect paths (path least one mediator) model: initial list long control variables (c1 c2) included search. Moreover, paths start mediator end mediator also included. Users can customize search: x vector names. paths start variables included. y vector names. paths end variables included. exclude vector names. Paths involve variables excluded. output all_paths-class object. can used many_indirect_effects() first argument, paths, output all_indirect_paths(). arguments passed indirect_effect(). output indirect_list-class object, list outputs indirect_effects(). printed, summary indirect effects printed: output many_indirect_effects() named list, names path name appeared output. Individual indirect effects can extracted using either indices path names example using index: example using path name (though recommended name usually long): extracted element can used just like outputs indirect_effect() previous section. See help page all_indirect_paths() many_indirect_effects() arguments available.","code":"all_paths <- all_indirect_paths(fit = fit_lm) all_paths #> Call:  #> all_indirect_paths(fit = fit_lm) #> Path(s):  #>    path                   #> 1  m11 -> m12 -> y1       #> 2  m11 -> m12 -> y2       #> 3  x1 -> m11 -> m12       #> 4  x1 -> m11 -> m12 -> y1 #> 5  x1 -> m11 -> y1        #> 6  x1 -> m12 -> y1        #> 7  x1 -> m2 -> y1         #> 8  x1 -> m11 -> m12 -> y2 #> 9  x1 -> m11 -> y2        #> 10 x1 -> m12 -> y2        #> 11 x1 -> m2 -> y2         #> 12 x2 -> m11 -> m12       #> 13 x2 -> m11 -> m12 -> y1 #> 14 x2 -> m11 -> y1        #> 15 x2 -> m12 -> y1        #> 16 x2 -> m2 -> y1         #> 17 x2 -> m11 -> m12 -> y2 #> 18 x2 -> m11 -> y2        #> 19 x2 -> m12 -> y2        #> 20 x2 -> m2 -> y2         #> 21 c1 -> m11 -> m12       #> 22 c1 -> m11 -> m12 -> y1 #> 23 c1 -> m11 -> y1        #> 24 c1 -> m12 -> y1        #> 25 c1 -> m2 -> y1         #> 26 c1 -> m11 -> m12 -> y2 #> 27 c1 -> m11 -> y2        #> 28 c1 -> m12 -> y2        #> 29 c1 -> m2 -> y2         #> 30 c2 -> m11 -> m12       #> 31 c2 -> m11 -> m12 -> y1 #> 32 c2 -> m11 -> y1        #> 33 c2 -> m12 -> y1        #> 34 c2 -> m2 -> y1         #> 35 c2 -> m11 -> m12 -> y2 #> 36 c2 -> m11 -> y2        #> 37 c2 -> m12 -> y2        #> 38 c2 -> m2 -> y2 all_paths <- all_indirect_paths(fit = fit_lm,                                 x = c(\"x1\", \"x2\"),                                 y = c(\"y1\", \"y2\"),                                 exclude = c(\"c1\", \"c2\")) all_paths #> Call:  #> all_indirect_paths(fit = fit_lm, exclude = c(\"c1\", \"c2\"), x = c(\"x1\",  #>     \"x2\"), y = c(\"y1\", \"y2\")) #> Path(s):  #>    path                   #> 1  x1 -> m11 -> m12 -> y1 #> 2  x1 -> m11 -> y1        #> 3  x1 -> m12 -> y1        #> 4  x1 -> m2 -> y1         #> 5  x1 -> m11 -> m12 -> y2 #> 6  x1 -> m11 -> y2        #> 7  x1 -> m12 -> y2        #> 8  x1 -> m2 -> y2         #> 9  x2 -> m11 -> m12 -> y1 #> 10 x2 -> m11 -> y1        #> 11 x2 -> m12 -> y1        #> 12 x2 -> m2 -> y1         #> 13 x2 -> m11 -> m12 -> y2 #> 14 x2 -> m11 -> y2        #> 15 x2 -> m12 -> y2        #> 16 x2 -> m2 -> y2 out_all <- many_indirect_effects(paths = all_paths,                                  fit = fit_lm,                                  boot_ci = TRUE,                                  boot_out = boot_out_lm) out_all #>  #> ==  Indirect Effect(s)   == #>                           ind  CI.lo  CI.hi Sig #> x1 -> m11 -> m12 -> y1  0.037  0.003  0.077 Sig #> x1 -> m11 -> y1         0.052 -0.036  0.103     #> x1 -> m12 -> y1        -0.050 -0.125 -0.000 Sig #> x1 -> m2 -> y1         -0.010 -0.077  0.064     #> x1 -> m11 -> m12 -> y2  0.022 -0.015  0.065     #> x1 -> m11 -> y2         0.009 -0.086  0.093     #> x1 -> m12 -> y2        -0.029 -0.089  0.014     #> x1 -> m2 -> y2         -0.010 -0.074  0.068     #> x2 -> m11 -> m12 -> y1 -0.005 -0.044  0.017     #> x2 -> m11 -> y1        -0.007 -0.055  0.034     #> x2 -> m12 -> y1        -0.017 -0.054  0.049     #> x2 -> m2 -> y1         -0.125 -0.258 -0.031 Sig #> x2 -> m11 -> m12 -> y2 -0.003 -0.021  0.022     #> x2 -> m11 -> y2        -0.001 -0.021  0.052     #> x2 -> m12 -> y2        -0.010 -0.056  0.045     #> x2 -> m2 -> y2         -0.126 -0.233 -0.043 Sig #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - The 'ind' column shows the indirect effects. #> out1 <- out_all[[1]] out1 #>  #> == Indirect Effect == #>                                             #>  Path:               x1 -> m11 -> m12 -> y1 #>  Indirect Effect     0.037                  #>  95.0% Bootstrap CI: [0.003 to 0.077]       #>  #> Computation Formula: #>   (b.m11~x1)*(b.m12~m11)*(b.y1~m12) #> Computation: #>   (0.35204)*(0.45408)*(0.23402) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>     Path Coefficient #>   m11~x1       0.352 #>  m12~m11       0.454 #>   y1~m12       0.234 out2 <- out_all[[\"x2 -> m2 -> y2\"]] out2 #>  #> == Indirect Effect == #>                                         #>  Path:               x2 -> m2 -> y2     #>  Indirect Effect     -0.126             #>  95.0% Bootstrap CI: [-0.233 to -0.043] #>  #> Computation Formula: #>   (b.m2~x2)*(b.y2~m2) #> Computation: #>   (0.28901)*(-0.43598) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>  m2~x2       0.289 #>  y2~m2      -0.436"},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"total-indirect-effect","dir":"Articles","previous_headings":"Identifying All Indirect paths","what":"Total Indirect Effect","title":"Mediation Analysis by Multiple Regression","text":"total indirect effect two variables list paths can computed total_indirect_effect(). first argument output many_indirect_effects() list indirect-class object. x name variable starts paths. y name variable ends paths.","code":"total_x1_y1 <- total_indirect_effect(out_all,                                      x = \"x1\",                                      y = \"y1\") total_x1_y1 #>  #> == Indirect Effect == #>                                              #>  Path:                x1 -> m11 -> m12 -> y1 #>  Path:                x1 -> m11 -> y1        #>  Path:                x1 -> m12 -> y1        #>  Path:                x1 -> m2 -> y1         #>  Function of Effects: 0.030                  #>  95.0% Bootstrap CI:  [-0.088 to 0.132]      #>  #> Computation of the Function of Effects: #>  (((x1->m11->m12->y1) #> +(x1->m11->y1)) #> +(x1->m12->y1)) #> +(x1->m2->y1)  #>  #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples."},{"path":"https://sfcheung.github.io/manymome/articles/med_lm.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Mediation Analysis by Multiple Regression","text":"information do_boot() indirect_effect(), please refer help pages.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Set Moderator Levels","text":"article brief illustration use mod_levels(), mod_levels_list(), merge_mod_levels() package manymome generate table moderator levels use cond_indirect_effects(). need use functions default levels generated cond_indirect_effects() appropriated, illustrated vignette(\"manymome\"). Use functions users want use levels moderators default levels.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"numeric-moderators","dir":"Articles","previous_headings":"","what":"Numeric Moderators","title":"Set Moderator Levels","text":"first use sample data set data_med_mod_ab: Suppose model fitted:","code":"library(manymome) dat <- data_med_mod_ab print(head(dat), digits = 3) #>       x   w1   w2    m    y    c1   c2 #> 1  9.27 4.97 2.66 3.46 8.80  9.26 3.14 #> 2 10.79 4.13 3.33 4.05 7.37 10.71 5.80 #> 3 11.10 5.91 3.32 4.04 8.24 10.60 5.45 #> 4  9.53 4.78 2.32 3.54 8.37  9.22 3.83 #> 5 10.00 4.38 2.95 4.65 8.39  9.58 4.26 #> 6 12.25 5.81 4.04 4.73 9.65  9.51 4.01 library(lavaan) #> This is lavaan 0.6-16 #> lavaan is FREE software! Please report any bugs. dat$w1x <- dat$w1 * dat$x dat$w2m <- dat$w2 * dat$m mod <- \" m ~ x + w1 + w1x y ~ m + w2 + w2m m ~~ w2 + w2m w2  ~~ w2m + x + w1 + w1x w2m ~~ x + w1 + w1x x   ~~ w1 + w1x w1  ~~ w1x \" fit <- sem(model = mod, data = dat)"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"sd-and-mean","dir":"Articles","previous_headings":"Numeric Moderators","what":"SD and Mean","title":"Set Moderator Levels","text":"two numeric moderators, w1 w2. generate three levels w1, one standard deviation (SD) mean, mean, one SD mean, just call mod_levels(): necessary calling cond_indirect_effects() automatically generate default levels. Suppose want use two levels, one SD one SD mean, can set argument sd_from_mean vector distances means, -1 1 example:","code":"w1levels <- mod_levels(w = \"w1\", fit = fit) w1levels #>               w1 #> M+1.0SD 6.173157 #> Mean    5.105602 #> M-1.0SD 4.038047 w1levels <- mod_levels(w = \"w1\", fit = fit,                        sd_from_mean = c(-1, 1)) w1levels #>               w1 #> M+1.0SD 6.173157 #> M-1.0SD 4.038047"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"percentiles","dir":"Articles","previous_headings":"Numeric Moderators","what":"Percentiles","title":"Set Moderator Levels","text":"generate levels based percentiles, set argument w_method \"percentile\": default percentiles 16th, 50th, 84th, corresponding one SD mean, mean, one SD mean normal distribution. Suppose want change percentiles used, example, 25th 75th, set argument percentiles shown :","code":"w1levels <- mod_levels(w = \"w1\", fit = fit,                        w_method = \"percentile\") w1levels #>           w1 #> 84% 6.207972 #> 50% 5.215974 #> 16% 3.932444 w1levels <- mod_levels(w = \"w1\", fit = fit,                        w_method = \"percentile\",                        percentiles = c(.25, .75)) w1levels #>           w1 #> 75% 5.808579 #> 25% 4.196759"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"specific-values","dir":"Articles","previous_headings":"Numeric Moderators","what":"Specific Values","title":"Set Moderator Levels","text":"values meaningful moderator, can used setting values vector values: output mod_levels can used calling cond_indirect_effects(): cond_indirect_effects() determine moderators automatically object assigned wlevels.","code":"w1levels <- mod_levels(w = \"w1\", fit = fit,                        values = c(2, 4, 8)) w1levels #>   w1 #> 8  8 #> 4  4 #> 2  2 out <- cond_indirect_effects(wlevels = w1levels,                              x = \"x\", y = \"m\",                              fit = fit) out #>  #> == Conditional effects == #>  #>  Path: x -> m #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>   [w1] (w1)    ind    m~x #> 1    8    8  0.964  0.964 #> 2    4    4  0.165  0.165 #> 3    2    2 -0.235 -0.235 #>  #>  - The 'ind' column shows the  effects. #>  - 'm~x' is/are the path coefficient(s) along the path conditional on #>    the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"merging-the-levels-of-two-or-more-moderators","dir":"Articles","previous_headings":"Numeric Moderators","what":"Merging the Levels of Two Or More Moderators","title":"Set Moderator Levels","text":"previous example, two moderators. can call mod_levels() , call mod_levels_list(): output list output mod_levels(). two moderators, default levels two: one SD mean one SD mean. function mod_levels_list() can merge output one table setting merge TRUE: Calling mod_levels_list() useful settings used moderators. arguments mod_levels() can used mod_levels_list(). example, want use 25th 75th percentiles w1 w2, use w_method percentiles :","code":"wlevels_list <- mod_levels_list(\"w1\", \"w2\", fit = fit) wlevels_list #> [[1]] #>               w1 #> M+1.0SD 6.173157 #> M-1.0SD 4.038047 #>  #> [[2]] #>               w2 #> M+1.0SD 4.040487 #> M-1.0SD 2.055091 wlevels_list <- mod_levels_list(\"w1\", \"w2\", fit = fit,                                 merge = TRUE) wlevels_list #>                                w1       w2 #> w1: M+1.0SD; w2: M+1.0SD 6.173157 4.040487 #> w1: M+1.0SD; w2: M-1.0SD 6.173157 2.055091 #> w1: M-1.0SD; w2: M+1.0SD 4.038047 4.040487 #> w1: M-1.0SD; w2: M-1.0SD 4.038047 2.055091 wlevels_list <- mod_levels_list(\"w1\", \"w2\", fit = fit,                                 w_method = \"percentile\",                                 percentiles = c(.25, .75),                                 merge = TRUE) wlevels_list #>                        w1       w2 #> w1: 75%; w2: 75% 5.808579 3.692675 #> w1: 75%; w2: 25% 5.808579 2.430643 #> w1: 25%; w2: 75% 4.196759 3.692675 #> w1: 25%; w2: 25% 4.196759 2.430643"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"different-settings-for-moderators","dir":"Articles","previous_headings":"Numeric Moderators","what":"Different Settings For Moderators","title":"Set Moderator Levels","text":"need use different settings two moderators, need call mod_levels() , merge results merge_mod_levels():","code":"w1levels <- mod_levels(w = \"w1\", fit = fit) w1levels #>               w1 #> M+1.0SD 6.173157 #> Mean    5.105602 #> M-1.0SD 4.038047 w2levels <- mod_levels(w = \"w2\", fit = fit, values = c(2, 5)) w2levels #>   w2 #> 5  5 #> 2  2 wlevels_all <- merge_mod_levels(w1levels, w2levels) wlevels_all #>                          w1 w2 #> w1: M+1.0SD; w2: 5 6.173157  5 #> w1: M+1.0SD; w2: 2 6.173157  2 #> w1: Mean; w2: 5    5.105602  5 #> w1: Mean; w2: 2    5.105602  2 #> w1: M-1.0SD; w2: 5 4.038047  5 #> w1: M-1.0SD; w2: 2 4.038047  2"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"categorical-moderators","dir":"Articles","previous_headings":"","what":"Categorical Moderators","title":"Set Moderator Levels","text":"use dataset data_med_mod_serial_cat illustration: two categorical moderators, w1 three categories w2 two categories. use w1 illustration.","code":"dat <- data_med_mod_serial_cat print(head(dat), digits = 3) #>      x     w1    w2   m1   m2    y   c1   c2 #> 1 8.09 group2 team1 7.70 5.26 3.17 4.31 5.03 #> 2 6.16 group2 team2 5.71 4.36 3.12 4.69 3.19 #> 3 6.03 group2 team2 5.40 5.22 4.23 4.07 4.25 #> 4 6.92 group1 team1 7.26 5.98 3.65 5.87 5.35 #> 5 7.76 group3 team1 4.49 4.83 4.01 4.35 4.16 #> 6 6.84 group2 team2 5.72 6.31 3.38 4.32 4.48"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"create-dummy-variables-and-fit-the-model","dir":"Articles","previous_headings":"Categorical Moderators","what":"Create Dummy Variables and Fit the Model","title":"Set Moderator Levels","text":"fit model using path analysis, two dummy variables need created w1. can done factor2var() similar functions packages. model:","code":"w1dummies <- factor2var(dat$w1, prefix = \"w1\") head(w1dummies) #>        w1group2 w1group3 #> group2        1        0 #> group2        1        0 #> group2        1        0 #> group1        0        0 #> group3        0        1 #> group2        1        0 # Add them to the dataset dat[, c(\"w1group2\", \"w1group3\")] <- w1dummies print(head(dat), digits = 3) #>      x     w1    w2   m1   m2    y   c1   c2 w1group2 w1group3 #> 1 8.09 group2 team1 7.70 5.26 3.17 4.31 5.03        1        0 #> 2 6.16 group2 team2 5.71 4.36 3.12 4.69 3.19        1        0 #> 3 6.03 group2 team2 5.40 5.22 4.23 4.07 4.25        1        0 #> 4 6.92 group1 team1 7.26 5.98 3.65 5.87 5.35        0        0 #> 5 7.76 group3 team1 4.49 4.83 4.01 4.35 4.16        0        1 #> 6 6.84 group2 team2 5.72 6.31 3.38 4.32 4.48        1        0 dat$w1group2x <- dat$w1group2 * dat$x dat$w1group3x <- dat$w1group3 * dat$x mod <- \" m1 ~ x + w1group2 + w1group3 + w1group2x + w1group3x y ~ m1 + x \" fit <- sem(model = mod, data = dat)"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"default-levels","dir":"Articles","previous_headings":"Categorical Moderators","what":"Default Levels","title":"Set Moderator Levels","text":"levels categorical moderator just categories (unique combinations coding). can generated mod_levels(). w vector dummy variables: names group2 group3 2 3 inferred names dummy variables. common part, \"w1group\", removed. tell mod_levels part removed, set prefix part removed: default, group 0s dummy variables labelled Reference name determined names dummy variables. label can changed setting reference_group_label: output can used cond_indirect_effects():","code":"w1levels <- mod_levels(w = c(\"w1group2\", \"w1group3\"), fit = fit) w1levels #>           w1group2 w1group3 #> Reference        0        0 #> 2                1        0 #> 3                0        1 w1levels <- mod_levels(w = c(\"w1group2\", \"w1group3\"), fit = fit,                        prefix = \"w1\") w1levels #>           w1group2 w1group3 #> Reference        0        0 #> group2           1        0 #> group3           0        1 w1levels <- mod_levels(w = c(\"w1group2\", \"w1group3\"), fit = fit,                        prefix = \"w1\",                        reference_group_label = \"group1\") w1levels #>        w1group2 w1group3 #> group1        0        0 #> group2        1        0 #> group3        0        1 out <- cond_indirect_effects(wlevels = w1levels,                              x = \"x\", y = \"y\", m = \"m1\",                              fit = fit) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1group2, w1group3 #>  #>     [w1] (w1group2) (w1group3)   ind  m1~x  y~m1 #> 1 group1          0          0 0.263 1.002 0.262 #> 2 group2          1          0 0.249 0.950 0.262 #> 3 group3          0          1 0.122 0.467 0.262 #>  #>  - The 'ind' column shows the indirect effects. #>  - 'm1~x','y~m1' is/are the path coefficient(s) along the path #>    conditional on the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"user-supplied-levels","dir":"Articles","previous_headings":"Categorical Moderators","what":"User-Supplied Levels","title":"Set Moderator Levels","text":"full control labels coding, use values supply named list numeric vectors: name group label vector coding:","code":"w1levels <- mod_levels(w = c(\"w1group2\", \"w1group3\"), fit = fit,                        values = list(group1 = c(0, 0),                                      group2 = c(1, 0),                                      group3 = c(0, 1))) w1levels #>        w1group2 w1group3 #> group1        0        0 #> group2        1        0 #> group3        0        1"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"mixing-numeric-and-categorical-moderators","dir":"Articles","previous_headings":"","what":"Mixing Numeric and Categorical Moderators","title":"Set Moderator Levels","text":"Numeric categorical moderators can mixed need generated separately merged merge_mod_levels(). Using example previous section, pretending x numeric moderator:","code":"xlevels <- mod_levels(w = \"x\", fit = fit,                       sd_from_mean = c(-1, 1)) xlevels #>                x #> M+1.0SD 7.149362 #> M-1.0SD 5.087437 w1levels <- mod_levels(w = c(\"w1group2\", \"w1group3\"), fit = fit,                        prefix = \"w1\",                        reference_group_label = \"group1\") w1levels #>        w1group2 w1group3 #> group1        0        0 #> group2        1        0 #> group3        0        1 wlevels_all <- merge_mod_levels(xlevels, w1levels) wlevels_all #>                               x w1group2 w1group3 #> x: M+1.0SD; w1: group1 7.149362        0        0 #> x: M+1.0SD; w1: group2 7.149362        1        0 #> x: M+1.0SD; w1: group3 7.149362        0        1 #> x: M-1.0SD; w1: group1 5.087437        0        0 #> x: M-1.0SD; w1: group2 5.087437        1        0 #> x: M-1.0SD; w1: group3 5.087437        0        1"},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"determining-the-type-of-a-moderator","dir":"Articles","previous_headings":"","what":"Determining The Type of a Moderator","title":"Set Moderator Levels","text":"function mod_levels() mod_levels_list() usually can determine type correctly. However, detected type wrong users want specify explicitly type, set argument w_type either \"numeric\" \"categorical\".","code":""},{"path":"https://sfcheung.github.io/manymome/articles/mod_levels.html","id":"further-information","dir":"Articles","previous_headings":"","what":"Further Information","title":"Set Moderator Levels","text":"information mod_levels(), mod_levels_list(), merge_mod_levels(), please refer help pages.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/mome_lm.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Moderated Mediation Analysis by Multiple Regression","text":"article brief illustration use cond_indirect_effects() package manymome estimate conditional indirect effects model parameters estimate ordinary least squares (OLS) multiple regression using lm().","code":""},{"path":"https://sfcheung.github.io/manymome/articles/mome_lm.html","id":"data-set-and-model","dir":"Articles","previous_headings":"","what":"Data Set and Model","title":"Moderated Mediation Analysis by Multiple Regression","text":"sample data set used illustration: dataset 6 variables: one predictor (x), one mediators (m), one outcome variable (y), one moderator (w) two control variables (c1 c2). Suppose model fitted: plot chunk mome_lm_draw_model path parameters can estimated two multiple regression models: estimates regression coefficient paths: Although mandatory, recommended combine models one object (system regression models) using lm2list(): Simply use lm() outputs arguments. Order matter. ensure regression outputs can validly combined, lm2list() also check: whether sample used regression analysis (just sample size, set cases), whether models “connected”, ensure regression outputs can validly combined.","code":"library(manymome) dat <- data_med_mod_a print(head(dat), digits = 3) #>       x    w    m    y   c1   c2 #> 1  8.58 1.57 28.9 36.9 6.03 4.82 #> 2 10.36 1.10 24.8 24.5 5.19 5.34 #> 3 10.38 2.88 37.3 38.1 4.63 5.02 #> 4  9.53 3.16 32.6 37.9 2.94 6.01 #> 5 11.34 3.84 49.2 59.0 6.12 5.05 #> 6  9.66 2.22 26.4 35.4 4.02 5.03 lm_m <- lm(m ~ x*w + c1 + c2, dat) lm_y <- lm(y ~ m + x + c1 + c2, dat) # ###### Predict m ###### # summary(lm_m) #>  #> Call: #> lm(formula = m ~ x * w + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -8.5621 -2.0065 -0.2142  1.7618 10.4270  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  16.4910    12.1039   1.362   0.1763   #> x             0.0959     1.1958   0.080   0.9362   #> w            -3.4871     4.7907  -0.728   0.4685   #> c1            0.5372     0.4162   1.291   0.2000   #> c2           -0.1533     0.4211  -0.364   0.7165   #> x:w           0.9785     0.4794   2.041   0.0441 * #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 3.998 on 94 degrees of freedom #> Multiple R-squared:  0.7479, Adjusted R-squared:  0.7345  #> F-statistic: 55.79 on 5 and 94 DF,  p-value: < 2.2e-16 # # ###### Predict y ###### # summary(lm_y) #>  #> Call: #> lm(formula = y ~ m + x + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.4396 -2.8156 -0.3145  2.3231 11.2849  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  4.50635    5.40625   0.834    0.407     #> m            0.95867    0.05806  16.512   <2e-16 *** #> x           -0.01980    0.50578  -0.039    0.969     #> c1           0.68241    0.44110   1.547    0.125     #> c2          -0.49573    0.44565  -1.112    0.269     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 4.229 on 95 degrees of freedom #> Multiple R-squared:  0.7669, Adjusted R-squared:  0.7571  #> F-statistic: 78.15 on 4 and 95 DF,  p-value: < 2.2e-16 fit_lm <- lm2list(lm_m, lm_y) fit_lm #>  #> The models: #> m ~ x * w + c1 + c2 #> y ~ m + x + c1 + c2"},{"path":"https://sfcheung.github.io/manymome/articles/mome_lm.html","id":"generating-bootstrap-estimates","dir":"Articles","previous_headings":"","what":"Generating Bootstrap Estimates","title":"Moderated Mediation Analysis by Multiple Regression","text":"form nonparametric bootstrap confidence interval effects computed, do_boot() can used generate bootstrap estimates regression coefficients first. estimates can reused effects estimated. Please see vignette(\"do_boot\") help page do_boot() use function. real research, R, number bootstrap samples, set 2000 even 5000. argument ncores can usually omitted unless users want manually control number CPU cores used parallel processing.","code":"boot_out_lm <- do_boot(fit_lm,                        R = 100,                        seed = 54532,                        ncores = 1)"},{"path":"https://sfcheung.github.io/manymome/articles/mome_lm.html","id":"conditional-indirect-effects","dir":"Articles","previous_headings":"","what":"Conditional Indirect Effects","title":"Moderated Mediation Analysis by Multiple Regression","text":"can now use cond_indirect_effects() estimate indirect effects different levels moderator (w) form bootstrap confidence interval. reusing generated bootstrap estimates, need repeat resampling. Suppose want estimate indirect effect x y m, conditional w: (Refer vignette(\"manymome\") help page cond_indirect_effects() arguments.) w one standard deviation mean, indirect effect 1.212, 95% confidence interval [-0.288, 2.564]. w one standard deviation mean, indirect effect 3.060, 95% confidence interval [2.168, 4.039]. Note conditional indirect path model can estimated way. limit path estimated, long required path coefficients model. cond_indirect_effects() also check whether path valid. However, complicated models, structural equation modelling may flexible approach multiple regression. covered , index moderated moderated mediation can also estimated models two moderators path, estimated regression. See vignette(\"manymome\") example.","code":"out_xmy_on_w <- cond_indirect_effects(wlevels = \"w\",                                       x = \"x\",                                       y = \"y\",                                       m = \"m\",                                       fit = fit_lm,                                       boot_ci = TRUE,                                       boot_out = boot_out_lm) out_xmy_on_w #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)   ind  CI.lo CI.hi Sig   m~x   y~m #> 1 M+1.0SD 3.164 3.060  2.168 4.039 Sig 3.192 0.959 #> 2 Mean    2.179 2.136  1.407 2.925 Sig 2.228 0.959 #> 3 M-1.0SD 1.194 1.212 -0.288 2.564     1.265 0.959 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - The 'ind' column shows the indirect effects. #>  - 'm~x','y~m' is/are the path coefficient(s) along the path conditional #>    on the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/mome_lm.html","id":"index-of-moderated-mediation","dir":"Articles","previous_headings":"","what":"Index of Moderated Mediation","title":"Moderated Mediation Analysis by Multiple Regression","text":"function index_of_mome() can used compute index moderated mediation w path x -> m -> y: (Refer vignette(\"manymome\") help page index_of_mome() arguments.) model, index moderated mediation 0.938, 95% bootstrap confidence interval [0.178, 1.732]. indirect effect x y m significantly changes w increases one unit.","code":"out_mome <- index_of_mome(x = \"x\",                           y = \"y\",                           m = \"m\",                           w = \"w\",                           fit = fit_lm,                           boot_ci = TRUE,                           boot_out = boot_out_lm) out_mome #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>   [w] (w)   ind  CI.lo CI.hi Sig   m~x   y~m #> 1   1   1 1.030 -0.622 2.543     1.074 0.959 #> 2   0   0 0.092 -2.389 2.434     0.096 0.959 #>  #> == Index of Moderated Mediation == #>  #> Levels compared: Row 1 - Row 2 #>  #>       x y Index CI.lo CI.hi #> Index x y 0.938 0.178 1.732 #>  #>  - [CI.lo, CI.hi]: 95% percentile confidence interval."},{"path":"https://sfcheung.github.io/manymome/articles/mome_lm.html","id":"standardized-conditional-indirect-effects","dir":"Articles","previous_headings":"","what":"Standardized Conditional Indirect effects","title":"Moderated Mediation Analysis by Multiple Regression","text":"standardized conditional indirect effect x y m conditional w can estimated setting standardized_x standardized_y TRUE: standardized indirect effect 0.126, 95% confidence interval [-0.031, 0.260].","code":"std_xmy_on_w <- cond_indirect_effects(wlevels = \"w\",                                       x = \"x\",                                       y = \"y\",                                       m = \"m\",                                       fit = fit_lm,                                       boot_ci = TRUE,                                       boot_out = boot_out_lm,                                       standardized_x = TRUE,                                       standardized_y = TRUE) std_xmy_on_w #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)   std  CI.lo CI.hi Sig   m~x   y~m   ind #> 1 M+1.0SD 3.164 0.318  0.220 0.437 Sig 3.192 0.959 3.060 #> 2 Mean    2.179 0.222  0.134 0.309 Sig 2.228 0.959 2.136 #> 3 M-1.0SD 1.194 0.126 -0.031 0.260     1.265 0.959 1.212 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - std: The standardized indirect effects.  #>  - ind: The unstandardized indirect effects. #>  - 'm~x','y~m' is/are the path coefficient(s) along the path conditional #>    on the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/mome_lm.html","id":"more-complicated-models","dir":"Articles","previous_headings":"","what":"More Complicated Models","title":"Moderated Mediation Analysis by Multiple Regression","text":"regression coefficients estimated, cond_indirect_effects(), indirect_effect(), related functions used way models fitted lavaan::sem(). levels moderators controlled mod_levels() related functions way whether model fitted lavaan::sem() lm(). Pplease refer articles (e.g., vignette(\"manymome\") vignette(\"mod_levels\")) estimate effects model analyzed multiple regression.","code":""},{"path":"https://sfcheung.github.io/manymome/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer. Sing-Hang Cheung. Author.","code":""},{"path":"https://sfcheung.github.io/manymome/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung, S. F., & Cheung, S.-H. (2023). manymome: R package computing indirect effects, conditional effects, conditional indirect effects. R package version 0.1.12 https://github.com/sfcheung/manymome/","code":"@Manual{,   title = {manymome: An R package for computing the indirect effects, conditional effects, and conditional indirect effects},   url = {https://github.com/sfcheung/manymome},   author = {S. F. Cheung and S.-H. Cheung},   year = {2023}, }"},{"path":"https://sfcheung.github.io/manymome/index.html","id":"manymome-","dir":"","previous_headings":"","what":"Mediation, Moderation and Moderated-Mediation After Model Fitting","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"Functions estimating indirect effects, conditional indirect effects, conditional effects model moderation, mediation, /moderated mediation fitted structural equation modelling (SEM) estimated multiple regression.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"what-can-it-do","dir":"","previous_headings":"","what":"What Can It Do?","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"Compute unstandardized standardized indirect effect conditional indirect effect path model. Form confidence interval effect. Nonparametric bootstrapping fully supported, Monte Carlo supported models fitted lavaan::sem().","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"advantages","dir":"","previous_headings":"","what":"Advantages","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"Simpler Workflow need define parameters similar code fitting model lavaan::sem(). Just focus fitting model first. model selected, users can compute effect nearly path, nearly variable, nearly variables, conditional nearly moderators, levels moderators. (See vignette(\"manymome\") details.) Supports SEM-Based Regression-Based Analysis Supports structural equation models fitted lavaan::sem() path models fitted regression using lm(), although focus package structural equation models. interface main functions nearly approaches. Flexible Form Models limit number predictors, mediators, outcome variables, lavaan::sem() lm(). Supports Standardized Effects Can estimate standardized indirect effects standardized conditional indirect effects without need standardize variables. bootstrap Monte Carlo confidence intervals standardized effects correctly take account sampling variation standardizers (standard deviations predictor outcome variable) recomputing bootstrap sample replication. Supports Missing Data Supports datasets missing data lavaan::sem() full information maximum likelihood (fiml). Since version 0.1.9.8, also supports missing data handled multiple imputation models fitted semTools::sem.mi() semTools::runMI() (see vignette(\"do_mc_lavaan_mi\")). Supports Numeric Categorical Moderators Supports numeric categorical moderators. function (factor2var()) easy creation dummy variables lavaan::sem(), can also capitalize native support categorical moderators lm(). Less Time Bootstrapping Bootstrapping, can time consuming, can conducted just . main functions computing indirect effects conditional indirect effects can called many times needed without redoing bootstrapping can reuse pregenerated bootstrap estimates (see vignette(\"manymome\") vignette(\"do_boot\")). Supports Latent Variables Mediation Supports indirect effects among latent variables models fitted lavaan::sem() (see vignette(\"med_lav\")).","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"limitations","dir":"","previous_headings":"","what":"Limitations","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"Despite aforementioned advantages, current version manymome following limitations: (officially) support categorical predictors. support multisample models (although lavaan ). support multilevel models (although lavaan ). bootstrapping, supports nonparametric bootstrapping percentile confidence interval. support bootstrapping methods parametric bootstrapping. supports OLS estimation lm() used. add list (suggestions welcomed adding GitHub issues) users () know tools used instead manymome, whether can address limitations manymome future.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"how-to-use-it","dir":"","previous_headings":"","what":"How To Use It?","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"good starting point Get-Started article (vignette(\"manymome\")). also articles (vignettes) special topics, use mod_levels() set levels moderators. added.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"homepage","dir":"","previous_headings":"","what":"Homepage","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"information package, please visit GitHub page: https://sfcheung.github.io/manymome/","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"stable version CRAN can installed install.packages(): latest developmental--stable version GitHub can installed remotes::install_github():","code":"install.packages(\"manymome\") remotes::install_github(\"sfcheung/manymome\")"},{"path":"https://sfcheung.github.io/manymome/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"developed package stdmod 2021 moderated regression. included function (stdmod::stdmod_lavaan()) standardized moderation effect path models fitted lavaan::sem(). However, practice, path models nearly always included indirect effects moderated mediation common path models. Moreover, stdmod intended moderated regression, structural equation modeling. thought perhaps develop general tool models fitted structural equation modelling based interface used stdmod::stdmod_lavaan(). projects, also need estimate indirect effects models frequently. Large sample sizes missing data also common us, bootstrapping slow even parallel processing. Therefore, developed manymome address needs.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Mediation, Moderation and Moderated-Mediation After Model Fitting","text":"suggestions found bugs limitations, please feel feel open GitHub issue. Thanks. https://github.com/sfcheung/manymome/issues","code":""},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate All Indirect Effects in a Model — all_indirect_paths","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"Check indirect paths model return list arguments x, y, m, used indirect_effect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"","code":"all_indirect_paths(fit = NULL, exclude = NULL, x = NULL, y = NULL)  all_paths_to_df(all_paths)"},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"fit fit object. Either output lavaan::lavaan() wrapper lavaan::sem(), list output lm() output lm2list(). exclude character vector variables excluded search, control variables. x character vector variables included x variables. supplied, paths start variables included search. NULL, default, variables one predictors least one regression equation included search. y character vector variables included y variables. supplied, paths start variables included search. NULL, default, variables outcome variables least one regression equation included search. all_paths all_paths-class object. example, output all_indirect_paths().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"all_indirect_paths() returns list class all_paths. argument list three character vectors, x, name predictor starts path, y, name outcome ends path, m, character vector one names mediators, x y. class print method. all_paths_to_df() returns data frame three columns, x, y, m, can used functions indirect_effect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"makes use igraph::all_simple_paths() identify paths model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"all_indirect_paths(): Enumerate indirect paths. all_paths_to_df(): Convert output all_indirect_paths() data frame three columns: x, y, m.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/all_indirect_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enumerate All Indirect Effects in a Model — all_indirect_paths","text":"","code":"library(lavaan) #> This is lavaan 0.6-16 #> lavaan is FREE software! Please report any bugs. data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE) # All indirect paths out1 <- all_indirect_paths(fit) out1 #> Call:  #> all_indirect_paths(fit = fit) #> Path(s):  #>    path                  #> 1  m11 -> m12 -> y       #> 2  x -> m11 -> m12       #> 3  x -> m11 -> m12 -> y  #> 4  x -> m11 -> y         #> 5  x -> m12 -> y         #> 6  x -> m2 -> y          #> 7  c1 -> m11 -> m12      #> 8  c1 -> m11 -> m12 -> y #> 9  c1 -> m11 -> y        #> 10 c1 -> m12 -> y        #> 11 c1 -> m2 -> y         #> 12 c2 -> m11 -> m12      #> 13 c2 -> m11 -> m12 -> y #> 14 c2 -> m11 -> y        #> 15 c2 -> m12 -> y        #> 16 c2 -> m2 -> y         names(out1) #>  [1] \"m11 -> m12 -> y\"       \"x -> m11 -> m12\"       \"x -> m11 -> m12 -> y\"  #>  [4] \"x -> m11 -> y\"         \"x -> m12 -> y\"         \"x -> m2 -> y\"          #>  [7] \"c1 -> m11 -> m12\"      \"c1 -> m11 -> m12 -> y\" \"c1 -> m11 -> y\"        #> [10] \"c1 -> m12 -> y\"        \"c1 -> m2 -> y\"         \"c2 -> m11 -> m12\"      #> [13] \"c2 -> m11 -> m12 -> y\" \"c2 -> m11 -> y\"        \"c2 -> m12 -> y\"        #> [16] \"c2 -> m2 -> y\"          # Exclude c1 and c2 in the search out2 <- all_indirect_paths(fit, exclude = c(\"c1\", \"c2\")) out2 #> Call:  #> all_indirect_paths(fit = fit, exclude = c(\"c1\", \"c2\")) #> Path(s):  #>   path                 #> 1 m11 -> m12 -> y      #> 2 x -> m11 -> m12      #> 3 x -> m11 -> m12 -> y #> 4 x -> m11 -> y        #> 5 x -> m12 -> y        #> 6 x -> m2 -> y         names(out2) #> [1] \"m11 -> m12 -> y\"      \"x -> m11 -> m12\"      \"x -> m11 -> m12 -> y\" #> [4] \"x -> m11 -> y\"        \"x -> m12 -> y\"        \"x -> m2 -> y\"          # Exclude c1 and c2, and only consider paths start # from x and end at y out3 <- all_indirect_paths(fit, exclude = c(\"c1\", \"c2\"),                            x = \"x\",                            y = \"y\") out3 #> Call:  #> all_indirect_paths(fit = fit, exclude = c(\"c1\", \"c2\"), x = \"x\",  #>     y = \"y\") #> Path(s):  #>   path                 #> 1 x -> m11 -> m12 -> y #> 2 x -> m11 -> y        #> 3 x -> m12 -> y        #> 4 x -> m2 -> y         names(out3) #> [1] \"x -> m11 -> m12 -> y\" \"x -> m11 -> y\"        \"x -> m12 -> y\"        #> [4] \"x -> m2 -> y\""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a Path Exists in a Model — check_path","title":"Check a Path Exists in a Model — check_path","text":"checks whether path, usually indirect path, exists model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a Path Exists in a Model — check_path","text":"","code":"check_path(x, y, m = NULL, fit = NULL, est = NULL)"},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a Path Exists in a Model — check_path","text":"x Character. name predictor start path. y Character. name outcome variable end path. m vector variable names mediators. path goes first mediator successively last mediator. NULL, default, path goes x y. fit fit object. Currently supports lavaan::lavaan object list outputs lm(). can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). est output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ge ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a Path Exists in a Model — check_path","text":"logical vector length one. TRUE path valid, FALSE path invalid.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check a Path Exists in a Model — check_path","text":"checks whether path defined predictor (x), outcome (y), optionally sequence mediators (m), exists model. can check models lavaan::lavaan object list outputs lm(). also support lavaan.mi objects returned semTools::runMI() wrapper, semTools::sem.mi(). example, ql lavaan syntax   path valid: x = \"x\", y = \"y\", m = c(\"m1\", \"m2\") path invalid: x = \"x\", y = \"y\", m = c(\"m2\") path also invalid: x = \"x\", y = \"y\", m = c(\"m1\", \"m2\")","code":"m1 ~ x m2 ~ m1 m3 ~ x y ~ m2 + m3"},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check a Path Exists in a Model — check_path","text":"","code":"library(lavaan) data(data_serial_parallel) dat <- data_serial_parallel mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE)  # The following paths are valid check_path(x = \"x\", y = \"y\", m = c(\"m11\", \"m12\"), fit = fit) #> [1] TRUE check_path(x = \"x\", y = \"y\", m = \"m2\", fit = fit) #> [1] TRUE # The following paths are invalid check_path(x = \"x\", y = \"y\", m = c(\"m11\", \"m2\"), fit = fit) #> [1] FALSE check_path(x = \"x\", y = \"y\", m = c(\"m12\", \"m11\"), fit = fit) #> [1] FALSE"},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Output of\n'cond_indirect_diff()' — coef.cond_indirect_diff","title":"Print the Output of\n'cond_indirect_diff()' — coef.cond_indirect_diff","text":"Extract change conditional indirect effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Output of\n'cond_indirect_diff()' — coef.cond_indirect_diff","text":"","code":"# S3 method for cond_indirect_diff coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Output of\n'cond_indirect_diff()' — coef.cond_indirect_diff","text":"object output cond_indirect_diff(). ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Output of\n'cond_indirect_diff()' — coef.cond_indirect_diff","text":"Scalar: change conditional indirect effect object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print the Output of\n'cond_indirect_diff()' — coef.cond_indirect_diff","text":"coef method cond_indirect_diff-class object.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates of Conditional\nIndirect Effects or Conditional\nEffects — coef.cond_indirect_effects","title":"Estimates of Conditional\nIndirect Effects or Conditional\nEffects — coef.cond_indirect_effects","text":"Return estimates conditional indirect effects conditional effects levels output cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates of Conditional\nIndirect Effects or Conditional\nEffects — coef.cond_indirect_effects","text":"","code":"# S3 method for cond_indirect_effects coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates of Conditional\nIndirect Effects or Conditional\nEffects — coef.cond_indirect_effects","text":"object output cond_indirect_effects(). ... Optional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates of Conditional\nIndirect Effects or Conditional\nEffects — coef.cond_indirect_effects","text":"numeric vector: estimates conditional effects conditional indirect effects.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimates of Conditional\nIndirect Effects or Conditional\nEffects — coef.cond_indirect_effects","text":"extracts returns column ind std output cond_indirect_effects().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.cond_indirect_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates of Conditional\nIndirect Effects or Conditional\nEffects — coef.cond_indirect_effects","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ x  + w1 + x:w1 m2 ~ m1 y  ~ m2 + x + w4 + m2:w4 \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # Conditional effects from x to m1 when w1 is equal to each of the levels out1 <- cond_indirect_effects(x = \"x\", y = \"m1\",                       wlevels = c(\"w1\"), fit = fit) out1 #>  #> == Conditional effects == #>  #>  Path: x -> m1 #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  m1~x #> 1 M+1.0SD  1.228 0.750 0.750 #> 2 Mean     0.259 0.523 0.523 #> 3 M-1.0SD -0.710 0.297 0.297 #>  #>  - The 'ind' column shows the  effects. #>  - ‘m1~x’ is/are the path coefficient(s) along the path conditional on #>    the moderators. #>  coef(out1) #> w1: M+1.0SD    w1: Mean w1: M-1.0SD  #>   0.7498826   0.5233201   0.2967576   # Conditional indirect effects from x1 through m1 and m2 to y, out2 <- cond_indirect_effects(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\"),                       wlevels = c(\"w1\", \"w4\"), fit = fit) out2 #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> m2 -> y #>  Conditional on moderator(s): w1, w4 #>  Moderator(s) represented by: w1, w4 #>  #>      [w1]    [w4]   (w1)   (w4)   ind  m1~x m2~m1  y~m2 #> 1 M+1.0SD M+1.0SD  1.228  1.209 0.137 0.750 0.399 0.458 #> 2 M+1.0SD M-1.0SD  1.228 -0.902 0.121 0.750 0.399 0.404 #> 3 M-1.0SD M+1.0SD -0.710  1.209 0.054 0.297 0.399 0.458 #> 4 M-1.0SD M-1.0SD -0.710 -0.902 0.048 0.297 0.399 0.404 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘m2~m1’,‘y~m2’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>  coef(out2) #> w1: M+1.0SD; w4: M+1.0SD w1: M+1.0SD; w4: M-1.0SD w1: M-1.0SD; w4: M+1.0SD  #>               0.13702461               0.12079753               0.05422595  #> w1: M-1.0SD; w4: M-1.0SD  #>               0.04780426   # Standardized conditional indirect effects from x1 through m1 and m2 to y, out2std <- cond_indirect_effects(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\"),                       wlevels = c(\"w1\", \"w4\"), fit = fit,                       standardized_x = TRUE, standardized_y = TRUE) out2std #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> m2 -> y #>  Conditional on moderator(s): w1, w4 #>  Moderator(s) represented by: w1, w4 #>  #>      [w1]    [w4]   (w1)   (w4)   std  m1~x m2~m1  y~m2   ind #> 1 M+1.0SD M+1.0SD  1.228  1.209 0.031 0.750 0.399 0.458 0.137 #> 2 M+1.0SD M-1.0SD  1.228 -0.902 0.028 0.750 0.399 0.404 0.121 #> 3 M-1.0SD M+1.0SD -0.710  1.209 0.012 0.297 0.399 0.458 0.054 #> 4 M-1.0SD M-1.0SD -0.710 -0.902 0.011 0.297 0.399 0.404 0.048 #>  #>  - std: The standardized indirect effects.  #>  - ind: The unstandardized indirect effects. #>  - ‘m1~x’,‘m2~m1’,‘y~m2’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>  coef(out2std) #> w1: M+1.0SD; w4: M+1.0SD w1: M+1.0SD; w4: M-1.0SD w1: M-1.0SD; w4: M+1.0SD  #>               0.03124942               0.02754872               0.01236660  #> w1: M-1.0SD; w4: M-1.0SD  #>               0.01090210"},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Indirect Effect or\nConditional Indirect Effect — coef.indirect","title":"Extract the Indirect Effect or\nConditional Indirect Effect — coef.indirect","text":"Return estimate indirect effect output indirect_effect() conditional indirect output cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Indirect Effect or\nConditional Indirect Effect — coef.indirect","text":"","code":"# S3 method for indirect coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Indirect Effect or\nConditional Indirect Effect — coef.indirect","text":"object output indirect_effect() cond_indirect(). ... Optional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Indirect Effect or\nConditional Indirect Effect — coef.indirect","text":"scalar: estimate indirect effect conditional indirect effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the Indirect Effect or\nConditional Indirect Effect — coef.indirect","text":"extracts returns element indirect. object. standardized effect requested calling indirect_effect() cond_indirect(), effect returned also standardized.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Indirect Effect or\nConditional Indirect Effect — coef.indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ x + w1 + x:w1 m2 ~ x y  ~ m1 + m2 + x \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # Examples for indirect_effect():  # Inidrect effect from x through m2 to y out1 <- indirect_effect(x = \"x\", y = \"y\", m = \"m2\", fit = fit) out1 #>  #> == Indirect Effect == #>                               #>  Path:           x -> m2 -> y #>  Indirect Effect 0.052        #>  #> Computation Formula: #>   (b.m2~x)*(b.y~m2) #> Computation: #>   (0.16554)*(0.31451) #> Coefficients of Component Paths: #>  Path Coefficient #>  m2~x       0.166 #>  y~m2       0.315 #>  coef(out1) #>        y~x  #> 0.05206422   # Conditional Indirect effect from x1 through m1 to y, # when w1 is 1 SD above mean hi_w1 <- mean(dat$w1) + sd(dat$w1) out2 <- cond_indirect(x = \"x\", y = \"y\", m = \"m1\",                       wvalues = c(w1 = hi_w1), fit = fit) out2 #>  #> == Conditional Indirect Effect   == #>                                            #>  Path:                        x -> m1 -> y #>  Moderators:                  w1           #>  Conditional Indirect Effect: -0.031       #>  When:                        w1 = 1.228   #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1))*(b.y~m1) #> Computation: #>   ((0.46277) + (0.23380)*(1.22806))*(-0.04197) #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>  m1~x              0.750                0.463 #>  y~m1             -0.042               -0.042 #>  coef(out2) #>         y~x  #> -0.03147387"},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Indirect Effects\nfrom a 'indirect_list' Object — coef.indirect_list","title":"Extract the Indirect Effects\nfrom a 'indirect_list' Object — coef.indirect_list","text":"Return estimates indirect effects output many_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Indirect Effects\nfrom a 'indirect_list' Object — coef.indirect_list","text":"","code":"# S3 method for indirect_list coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Indirect Effects\nfrom a 'indirect_list' Object — coef.indirect_list","text":"object output many_indirect_effects(). ... Optional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Indirect Effects\nfrom a 'indirect_list' Object — coef.indirect_list","text":"numeric vector indirect effects.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the Indirect Effects\nfrom a 'indirect_list' Object — coef.indirect_list","text":"extracts estimates 'indirect'-class object list. standardized effect requested calling many_indirect_effects(), effects returned also standardized.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Indirect Effects\nfrom a 'indirect_list' Object — coef.indirect_list","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE) # All indirect paths from x to y paths <- all_indirect_paths(fit,                            x = \"x\",                            y = \"y\") paths #> Call:  #> all_indirect_paths(fit = fit, x = \"x\", y = \"y\") #> Path(s):  #>   path                 #> 1 x -> m11 -> m12 -> y #> 2 x -> m11 -> y        #> 3 x -> m12 -> y        #> 4 x -> m2 -> y         # Indirect effect estimates out <- many_indirect_effects(paths,                              fit = fit) out #>  #> ==  Indirect Effect(s)   == #>                        ind #> x -> m11 -> m12 -> y 0.193 #> x -> m11 -> y        0.163 #> x -> m12 -> y        0.059 #> x -> m2 -> y         0.364 #>  #>  - The 'ind' column shows the indirect effects. #>   coef(out) #> x -> m11 -> m12 -> y        x -> m11 -> y        x -> m12 -> y  #>           0.19321379           0.16261213           0.05946653  #>         x -> m2 -> y  #>           0.36440188"},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Proportion of\nEffect Mediated — coef.indirect_proportion","title":"Extract the Proportion of\nEffect Mediated — coef.indirect_proportion","text":"Return proportion effect mediated output indirect_proportion().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Proportion of\nEffect Mediated — coef.indirect_proportion","text":"","code":"# S3 method for indirect_proportion coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Proportion of\nEffect Mediated — coef.indirect_proportion","text":"object output indirect_proportion() ... used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Proportion of\nEffect Mediated — coef.indirect_proportion","text":"scalar: proportion effect mediated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_proportion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the Proportion of\nEffect Mediated — coef.indirect_proportion","text":"extracts returns element proportion input object.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Proportion of\nEffect Mediated — coef.indirect_proportion","text":"","code":"library(lavaan) dat <- data_med head(dat) #>           x        m        y       c1       c2 #> 1  9.931992 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150 22.91594 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678 5.770532 #> 4 11.196969 20.01750 25.05038 3.120056 4.654931 #> 5 11.887811 22.08645 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712 mod <- \" m ~ x + c1 + c2 y ~ m + x + c1 + c2 \" fit <- sem(mod, dat, fixed.x = FALSE) out <- indirect_proportion(x = \"x\",                            y = \"y\",                            m = \"m\",                            fit = fit) out #> ==== Proportion of Effect Mediated ==== #>  #> Path: \t\t x -> m -> y  #> Proportion: \t 0.591  #> Indirect Effect: 0.733  #> Total Effect: \t 1.241  #>  #> Note: #> Use coef() to extract the proportion. #>  #> All indirect path(s): #> x -> m -> y coef(out) #> x -> m -> y  #>   0.5909523"},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficients of an\n'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","title":"Coefficients of an\n'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"Returns path coefficients terms lm_from_lavaan-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficients of an\n'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"","code":"# S3 method for lm_from_lavaan coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficients of an\n'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"object 'lm_from_lavaan'-class object. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficients of an\n'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"numeric vector path coefficients.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coefficients of an\n'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"lm_from_lavaan-class object converts regression model variable lavaan-class object formula-class object. function simply extracts path coefficients estimates. Intercept always included, set zero mean structure source lavaan-class object. advanced helper used plot.cond_indirect_effects(). Exported advanced users developers.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coefficients of an\n'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) coef(fit_list$m) #> (Intercept)           x          c1          c2  #>   0.0000000   0.9346863   0.1977842  -0.1684097  coef(fit_list$y) #> (Intercept)           m           x          c1          c2  #>   0.0000000   0.7846871   0.5076728   0.1404921  -0.1543881"},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","title":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","text":"Compute conditional effects, indirect effects, conditional indirect effects structural model fitted lm(), lavaan::sem(), semTools::sem.mi().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","text":"","code":"cond_indirect(   x,   y,   m = NULL,   fit = NULL,   est = NULL,   implied_stats = NULL,   wvalues = NULL,   standardized_x = FALSE,   standardized_y = FALSE,   boot_ci = FALSE,   level = 0.95,   boot_out = NULL,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE,   save_boot_full = FALSE,   prods = NULL,   get_prods_only = FALSE,   save_boot_out = TRUE,   mc_ci = FALSE,   mc_out = NULL,   save_mc_full = FALSE,   save_mc_out = TRUE,   ci_out = NULL,   save_ci_full = FALSE,   save_ci_out = TRUE,   ci_type = NULL )  cond_indirect_effects(   wlevels,   x,   y,   m = NULL,   fit = NULL,   w_type = \"auto\",   w_method = \"sd\",   sd_from_mean = NULL,   percentiles = NULL,   est = NULL,   implied_stats = NULL,   boot_ci = FALSE,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE,   boot_out = NULL,   output_type = \"data.frame\",   mod_levels_list_args = list(),   mc_ci = FALSE,   mc_out = NULL,   ci_out = NULL,   ci_type = NULL,   ... )  indirect_effect(   x,   y,   m = NULL,   fit = NULL,   est = NULL,   implied_stats = NULL,   standardized_x = FALSE,   standardized_y = FALSE,   boot_ci = FALSE,   level = 0.95,   boot_out = NULL,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE,   save_boot_full = FALSE,   mc_ci = FALSE,   mc_out = NULL,   save_mc_full = FALSE,   save_mc_out = TRUE,   ci_out = NULL,   save_ci_full = FALSE,   save_ci_out = TRUE,   ci_type = NULL )  many_indirect_effects(paths, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","text":"x Character. name predictor start path. y Character. name outcome variable end path. m vector variable names mediator(s). path goes first mediator successively last mediator. NULL, default, path goes x y. fit fit object. Can lavaan::lavaan object list lm() outputs. can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). est output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ignored. implied_stats Implied means, variances, covariances observed variables, form output lavaan::lavInspect() set \"implied\". standard deviations extracted object standardization. Default NULL, implied statistics computed fit required. wvalues numeric vector named elements. names variable names moderators, values values moderators set . Default NULL. standardized_x Logical. Whether x standardized. Default FALSE. standardized_y Logical. Whether y standardized. Default FALSE. boot_ci Logical. Whether bootstrap confidence interval formed. Default FALSE. level level confidence bootstrap confidence interval. Default .95. boot_out boot_ci TRUE, users can supply pregenerated bootstrap estimates. can output do_boot(). indirect_effect() cond_indirect_effects(), can output previous call cond_indirect_effects(), indirect_effect(), cond_indirect() bootstrap confidence intervals requested. stored estimates reused need bootstrapping . supplied, function try generate fit. R Integer. boot_ci TRUE, boot_out NULL, bootstrap standard errors requested fit lavaan object, function bootstrapping fit. R number bootstrap samples. Default 100. Monte Carlo simulation, number replications. seed bootstrapping Monte Carlo simulation conducted, seed bootstrapping simulation. Default NULL seed set. parallel Logical. bootstrapping conducted, whether parallel processing used. Default TRUE. fit list lm() outputs, parallel processing used. ncores Integer. number CPU cores use parallel TRUE. Default number non-logical cores minus one (one minimum). raise error greater number cores detected parallel::detectCores(). ncores set, override make_cluster_args do_boot(). make_cluster_args named list additional arguments passed parallel::makeCluster(). advanced users. See parallel::makeCluster() details. Default list(). progress Logical. Display bootstrapping progress . Default TRUE. save_boot_full TRUE, full bootstrapping results stored. Default FALSE. prods product terms found. internal use. get_prods_only TRUE, quit early return product terms found. results can passed prod argument calling function. Default FALSE. function internal use. save_boot_out boot_out supplied, whether saved output. Default TRUE. mc_ci Logical. Whether Monte Carlo confidence interval formed. Default FALSE. mc_out mc_ci TRUE, users can supply pregenerated Monte Carlo estimates. can output do_mc(). indirect_effect() cond_indirect_effects(), can output previous call cond_indirect_effects(), indirect_effect(), cond_indirect() Monte Carlo confidence intervals requested. stored estimates reused need Monte Carlo simulation . supplied, function try generate fit. save_mc_full TRUE, full Monte Carlo results stored. Default FALSE. save_mc_out mc_out supplied, whether saved output. Default TRUE. ci_out ci_type supplied, corresponding argument. ci_type \"boot\", argument used boot_out. ci_type \"mc\", argument used mc_out. save_ci_full TRUE, full bootstrapping Monte Carlo results stored. Default FALSE. save_ci_out either mc_out boot_out supplied, whether saved output. Default TRUE. ci_type type confidence intervals formed. Can either \"boot\" (bootstrapping) \"mc\" (Monte Carlo). supplied NULL, check arguments (e.g, boot_ci mc_ci). supplied, override boot_ci mc_ci. wlevels output merge_mod_levels(), moderator(s) passed mod_levels_list(). moderators can represented one variable, , moderator () numeric variable, (b) dichotomous categorical variable, (c) factor string variable used lm() fit, vector names moderators appeared data frame. least one moderators categorical variable represented one variable, user-created dummy variables used lavaan::sem(), must list names moderators, moderators represented vector names. example: list(\"w1\", c(\"gpgp2\", \"gpgp3\"), first moderator w1 second moderator three-categorical variable represented gpgp2 gpgp3. w_type Character. Whether moderator \"numeric\" variable \"categorical\" variable. \"auto\", function try determine type automatically. See mod_levels_list() information. w_method Character, either \"sd\" \"percentile\". \"sd\", levels defined distance mean terms standard deviation. \"percentile\", levels defined percentiles.  See mod_levels_list() information. sd_from_mean numeric vector. Specify distance standard deviation mean level. Default c(-1, 0, 1) one moderator, c(-1, 1) one moderator. Ignored w_method equal \"sd\". See mod_levels_list() information. percentiles numeric vector. Specify percentile (proportion) level. Default c(.16, .50, .84) one moderator, c(.16, .84) one moderator. Ignored w_method equal \"percentile\". See mod_levels_list() information. output_type type output cond_indirect_effects(). \"data.frame\", default, output converted data frame. values, output list outputs cond_indirect(). mod_levels_list_args Additional arguments passed mod_levels_list() called creating levels moderators. Default list(). ... many_indirect_effects(), arguments passed indirect_effect(). paths output all_indirect_paths()","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","text":"indirect_effect() cond_indirect() return indirect-class object. cond_indirect_effects() returns cond_indirect_effects-class object. two classes objects print methods printing results (see print.indirect() print.cond_indirect_effects()). also coef method extracting estimates (coef.indirect() coef.cond_indirect_effects()) confint method extracting confidence intervals (confint.indirect() confint.cond_indirect_effects()). Addition subtraction can also conducted indirect-class object estimate test function effects (see math_indirect)","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","text":"model mediation path moderated one moderators, cond_indirect_effects() can used compute conditional indirect effect one variable another variable, one set selected value(s) moderator(s). effect one set value(s) moderator(s) needed, cond_indirect() can used. mediator(s) /specified (m) values moderator(s) specified, indirect effect one variable (x) another variable (y) computed. convenient wrapper indirect_effect() can used compute indirect effect. value(s) moderator(s) /specified (wvalues wlevels) mediators (m) specified calling cond_indirect_effects() cond_indirect(), conditional direct effects one variable another computed. three functions support using nonparametric bootstrapping (lavaan lm outputs) Monte Carlo simulation (lavaan outputs ) form confidence intervals. Bootstrapping Monte Carlo simulation needs done . possible ways form bootstrapping: bootstrapping Monte Carlo simulation first call one functions, setting boot_ci mc_ci TRUE R number bootstrap samples replications, level level confidence (default .95 95%), seed reproduce results (parallel ncores optional bootstrapping). take time run bootstrapping. output bootstrap Monte Carlo estimates stored. output, whether indirect_effect(), cond_indirect_effects(), cond_indirect(), can reused three functions setting boot_out (bootstrapping) mc_out (Monte Carlo simulation) output. form confidence intervals using stored bootstrap Monte Carlo estimates. bootstrapping using do_boot() Monte Carlo simulation us8ing do_mc(). output can used boot_out (bootstrapping) mc_out (Monte Carlo simulation) argument indirect_effect(), cond_indirect_effects() cond_indirect(). bootstrapping, lavaan::sem() used fit model se = \"boot\" used, do_boot() can extract generate boot_out-class object can used boot_out argument. boot_out mc_out set, arguments R, seed, parallel ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","text":"cond_indirect(): Compute conditional, indirect, conditional indirect effects one set levels. cond_indirect_effects(): Compute conditional effects conditional indirect effects several sets levels moderator(s). indirect_effect(): Compute indirect effect. wrapper cond_indirect(). Can used moderator. many_indirect_effects(): Compute indirect effects along one paths. call indirect_effect() path.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional, Indirect, and\nConditional Indirect Effects — cond_indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x  + d1 * w1 + e1 * x:w1 m2 ~ a2 * x y  ~ b1 * m1 + b2 * m2 + cp * x \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit) hi_w1 <- mean(dat$w1) + sd(dat$w1)  # Examples for cond_indirect():  # Conditional effect from x to m1 when w1 is 1 SD above mean cond_indirect(x = \"x\", y = \"m1\",               wvalues = c(w1 = hi_w1), fit = fit) #>  #> == Conditional  Effect   == #>                                 #>  Path:               x -> m1    #>  Moderators:         w1         #>  Conditional Effect: 0.750      #>  When:               w1 = 1.228 #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1)) #> Computation: #>   ((0.46277) + (0.23380)*(1.22806))  # Indirect effect from x1 through m2 to y indirect_effect(x = \"x\", y = \"y\", fit = fit) #>  #> ==  Effect == #>                #>  Path:  x -> y #>  Effect 0.312  #>  #> Computation Formula: #>   (b.y~x) #> Computation: #>   (0.31176)  # Conditional Indirect effect from x1 through m1 to y, when w1 is 1 SD above mean cond_indirect(x = \"x\", y = \"y\", m = \"m1\",               wvalues = c(w1 = hi_w1), fit = fit) #>  #> == Conditional Indirect Effect   == #>                                            #>  Path:                        x -> m1 -> y #>  Moderators:                  w1           #>  Conditional Indirect Effect: -0.031       #>  When:                        w1 = 1.228   #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1))*(b.y~m1) #> Computation: #>   ((0.46277) + (0.23380)*(1.22806))*(-0.04197) #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>  m1~x              0.750                0.463 #>  y~m1             -0.042               -0.042 #>     # Examples for cond_indirect_effects():  # Create levels of w1, the moderators w1levels <- mod_levels(\"w1\", fit = fit) w1levels #>                 w1 #> M+1.0SD  1.2280576 #> Mean     0.2589999 #> M-1.0SD -0.7100578  # Conditional effects from x to m1 when w1 is equal to each of the levels cond_indirect_effects(x = \"x\", y = \"m1\",                       wlevels = w1levels, fit = fit) #>  #> == Conditional effects == #>  #>  Path: x -> m1 #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  m1~x #> 1 M+1.0SD  1.228 0.750 0.750 #> 2 Mean     0.259 0.523 0.523 #> 3 M-1.0SD -0.710 0.297 0.297 #>  #>  - The 'ind' column shows the  effects. #>  - ‘m1~x’ is/are the path coefficient(s) along the path conditional on #>    the moderators. #>   # Conditional Indirect effect from x1 through m1 to y, # when w1 is equal to each of the levels cond_indirect_effects(x = \"x\", y = \"y\", m = \"m1\",                       wlevels = w1levels, fit = fit) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)    ind  m1~x   y~m1 #> 1 M+1.0SD  1.228 -0.031 0.750 -0.042 #> 2 Mean     0.259 -0.022 0.523 -0.042 #> 3 M-1.0SD -0.710 -0.012 0.297 -0.042 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>    # Examples for many_indirect_effects():  library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE)  # All indirect paths from x to y paths <- all_indirect_paths(fit,                            x = \"x\",                            y = \"y\") paths #> Call:  #> all_indirect_paths(fit = fit, x = \"x\", y = \"y\") #> Path(s):  #>   path                 #> 1 x -> m11 -> m12 -> y #> 2 x -> m11 -> y        #> 3 x -> m12 -> y        #> 4 x -> m2 -> y          # Indirect effect estimates out <- many_indirect_effects(paths,                              fit = fit) out #>  #> ==  Indirect Effect(s)   == #>                        ind #> x -> m11 -> m12 -> y 0.193 #> x -> m11 -> y        0.163 #> x -> m12 -> y        0.059 #> x -> m2 -> y         0.364 #>  #>  - The 'ind' column shows the indirect effects. #>"},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"Compute difference conditional indirect effects two sets levels moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"","code":"cond_indirect_diff(output, from = NULL, to = NULL, level = 0.95)"},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"output cond_indirect_effects-class object: output cond_indirect_effects(). row number output. row number output. change indirect effects computed change level(s) moderator(s) Row Row . level level confidence confidence interval. Default .95.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"cond_indirect_diff-class object. class print method (print.cond_indirect_diff()), coef method (coef.cond_indirect_diff()), confint method (confint.cond_indirect_diff()).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"Ths function takes output cond_indirect_effects() computes difference conditional indirect effects two rows, , levels moderator, two sets levels moderators path one moderator. difference meaningful difference two levels sets levels meaningful. example, two levels mean moderator one standard deviation mean moderator, difference change indirect effect moderator increases one standard deviation. two levels 0 1, difference index moderated mediation proposed Hayes (2015). (index can also computed directly index_of_mome(), designed specifically purpose.) function can also compute change standardized indirect effect two levels moderator two sets levels moderators. function intended general purpose function allows users compute difference two levels sets levels meaningful context. function set levels comparison. levels compared need set calling cond_indirect_effects(). function extracts required information output cond_indirect_effects(). bootstrap Monte Carlo estimates available input bootstrap Monte Carlo confidence intervals requested calling cond_indirect_effects(), cond_indirect_diff() also form percentile confidence interval difference conditional indirect effects using stored estimates.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"cond_indirect_diff(): Compute difference conditional indirect effect two rows output cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"Hayes, . F. (2015). index test linear moderated mediation. Multivariate Behavioral Research, 50(1), 1-22. doi:10.1080/00273171.2014.962683","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differences In Conditional\nIndirect Effects — cond_indirect_diff","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 dat$xw1 <- dat$x * dat$w1 mod <- \" m1 ~ a * x  + f * w1 + d * xw1 y  ~ b * m1 + cp * x \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # Create levels of w1, the moderators w1levels <- mod_levels(\"w1\", fit = fit) w1levels #>                 w1 #> M+1.0SD  1.2280576 #> Mean     0.2589999 #> M-1.0SD -0.7100578  # Conditional effects from x to y when w1 is equal to each of the levels boot_out <- fit2boot_out_do_boot(fit, R = 40, seed = 4314, progress = FALSE) out <- cond_indirect_effects(x = \"x\", y = \"y\", m = \"m1\",                              wlevels = w1levels, fit = fit,                              boot_ci = TRUE, boot_out = boot_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  CI.lo CI.hi Sig  m1~x  y~m1 #> 1 M+1.0SD  1.228 0.068 -0.776 0.534     0.750 0.091 #> 2 Mean     0.259 0.048 -0.522 0.377     0.523 0.091 #> 3 M-1.0SD -0.710 0.027 -0.267 0.221     0.297 0.091 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 40 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>  out_ind <- cond_indirect_diff(out, from = 2, to = 1) out_ind #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]  (w1)   ind  CI.lo CI.hi Sig  m1~x  y~m1 #> 1 M+1.0SD 1.228 0.068 -0.776 0.534     0.750 0.091 #> 2 Mean    0.259 0.048 -0.522 0.377     0.523 0.091 #>  #> == Difference in Conditional Indirect Effect == #>  #> Levels:  #>               w1    #> To:   M+1.0SD 1.228 #> From: Mean    0.259 #>  #> Change in Indirect Effect: #>  #>        x y Change  CI.lo CI.hi #> Change x y  0.021 -0.255 0.166 #>  #>  - [CI.lo, CI.hi]: 95% percentile confidence interval. #>  coef(out_ind) #>    y~m1~x  #> 0.0206078  confint(out_ind) #>             2.50%    97.50% #> y~m1~x -0.2547857 0.1662861"},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval of the\nOutput of 'cond_indirect_diff()' — confint.cond_indirect_diff","title":"Confidence Interval of the\nOutput of 'cond_indirect_diff()' — confint.cond_indirect_diff","text":"Extract confidence interval output cond_indirect_diff().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval of the\nOutput of 'cond_indirect_diff()' — confint.cond_indirect_diff","text":"","code":"# S3 method for cond_indirect_diff confint(object, parm, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval of the\nOutput of 'cond_indirect_diff()' — confint.cond_indirect_diff","text":"object output cond_indirect_diff(). parm Ignored. level level confidence confidence interval. Default .95. Must match level stored confidence interval. ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval of the\nOutput of 'cond_indirect_diff()' — confint.cond_indirect_diff","text":"one-row-two-column data frame confidence limits. confidence interval available, limits NAs.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval of the\nOutput of 'cond_indirect_diff()' — confint.cond_indirect_diff","text":"confint method cond_indirect_diff-class object. type confidence intervals depends call used create object. function merely extracts stored confidence intervals.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals of\nIndirect Effects or Conditional\nIndirect Effects — confint.cond_indirect_effects","title":"Confidence Intervals of\nIndirect Effects or Conditional\nIndirect Effects — confint.cond_indirect_effects","text":"Return confidence intervals conditional indirect effects conditional effects output cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals of\nIndirect Effects or Conditional\nIndirect Effects — confint.cond_indirect_effects","text":"","code":"# S3 method for cond_indirect_effects confint(object, parm, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals of\nIndirect Effects or Conditional\nIndirect Effects — confint.cond_indirect_effects","text":"object output cond_indirect_effects(). parm Ignored. Always returns confidence intervals effects levels stored. level level confidence, default .95, returning 95% confidence interval. Ignored now use level stored intervals. ... Additional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals of\nIndirect Effects or Conditional\nIndirect Effects — confint.cond_indirect_effects","text":"data frame two columns, one confidence limit confidence intervals. number rows equal number rows object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals of\nIndirect Effects or Conditional\nIndirect Effects — confint.cond_indirect_effects","text":"extracts returns columns confidence intervals, available. type confidence intervals depends call used compute effects. function merely retrieves confidence intervals stored, , formed nonparametric bootstrapping, Monte Carlo simulation, methods supported future.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/confint.cond_indirect_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals of\nIndirect Effects or Conditional\nIndirect Effects — confint.cond_indirect_effects","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ x  + w1 + x:w1 m2 ~ m1 y  ~ m2 + x + w4 + m2:w4 \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # Examples for cond_indirect():  # Create levels of w1 and w4 w1levels <- mod_levels(\"w1\", fit = fit) w1levels #>                 w1 #> M+1.0SD  1.2280576 #> Mean     0.2589999 #> M-1.0SD -0.7100578 w4levels <- mod_levels(\"w4\", fit = fit) w4levels #>                 w4 #> M+1.0SD  1.2087784 #> Mean     0.1532493 #> M-1.0SD -0.9022798 w1w4levels <- merge_mod_levels(w1levels, w4levels)  # Conditional effects from x to m1 when w1 is equal to each of the levels # R should be at least 2000 or 5000 in real research. out1 <- suppressWarnings(cond_indirect_effects(x = \"x\", y = \"m1\",                       wlevels = w1levels, fit = fit,                       boot_ci = TRUE, R = 20, seed = 54151,                       parallel = FALSE,                       progress = FALSE)) confint(out1) #>             2.5 %    97.5 % #> M+1.0SD 0.5470997 0.9277340 #> Mean    0.4277303 0.5787752 #> M-1.0SD 0.1590855 0.4261894"},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval of\nIndirect Effect or Conditional\nIndirect Effect — confint.indirect","title":"Confidence Interval of\nIndirect Effect or Conditional\nIndirect Effect — confint.indirect","text":"Return confidence interval indirect effect conditional indirect effect stored output indirect_effect() cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval of\nIndirect Effect or Conditional\nIndirect Effect — confint.indirect","text":"","code":"# S3 method for indirect confint(object, parm, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval of\nIndirect Effect or Conditional\nIndirect Effect — confint.indirect","text":"object output indirect_effect() cond_indirect(). parm Ignored stored object always one parameter. level level confidence, default .95, returning 95% confidence interval. ... Additional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval of\nIndirect Effect or Conditional\nIndirect Effect — confint.indirect","text":"numeric vector two elements, limits confidence interval.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval of\nIndirect Effect or Conditional\nIndirect Effect — confint.indirect","text":"extracts returns stored confidence interval available. type confidence interval depends call used compute effect. function merely retrieves stored estimates, generated nonparametric bootstrapping, Monte Carlo simulation, methods supported future, uses form percentile confidence interval.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval of\nIndirect Effect or Conditional\nIndirect Effect — confint.indirect","text":"","code":"dat <- modmed_x1m3w4y1  # Indirect Effect  library(lavaan) mod1 <- \" m1 ~ x m2 ~ m1 y  ~ m2 + x \" fit <- sem(mod1, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) # R should be at least 2000 or 5000 in real research. out1 <- indirect_effect(x = \"x\", y = \"y\",                         m = c(\"m1\", \"m2\"),                         fit = fit,                         boot_ci = TRUE, R = 45, seed = 54151,                         parallel = FALSE,                         progress = FALSE) out1 #>  #> == Indirect Effect == #>                                         #>  Path:               x -> m1 -> m2 -> y #>  Indirect Effect     0.064              #>  95.0% Bootstrap CI: [-0.052 to 0.156]  #>  #> Computation Formula: #>   (b.m1~x)*(b.m2~m1)*(b.y~m2) #> Computation: #>   (0.52252)*(0.39883)*(0.30941) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 45 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>   m1~x       0.523 #>  m2~m1       0.399 #>   y~m2       0.309 #>  confint(out1) #>           2.5 %    97.5 % #> y~x -0.05232493 0.1562506"},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals of\nIndirect Effects in an 'indirect_list'\nObject — confint.indirect_list","title":"Confidence Intervals of\nIndirect Effects in an 'indirect_list'\nObject — confint.indirect_list","text":"Return confidence intervals indirect effects stored output many_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals of\nIndirect Effects in an 'indirect_list'\nObject — confint.indirect_list","text":"","code":"# S3 method for indirect_list confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals of\nIndirect Effects in an 'indirect_list'\nObject — confint.indirect_list","text":"object output many_indirect_effects(). parm Ignored now. level level confidence, default .95, returning 95% confidence interval. ... Additional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals of\nIndirect Effects in an 'indirect_list'\nObject — confint.indirect_list","text":"two-column data frame. columns limits confidence intervals.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals of\nIndirect Effects in an 'indirect_list'\nObject — confint.indirect_list","text":"extracts returns stored confidence interval available. type confidence intervals depends call used compute effects. function merely retrieves stored estimates, generated nonparametric bootstrapping, Monte Carlo simulation, methods supported future, uses form percentile confidence interval.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals of\nIndirect Effects in an 'indirect_list'\nObject — confint.indirect_list","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE) # All indirect paths from x to y paths <- all_indirect_paths(fit,                            x = \"x\",                            y = \"y\") paths #> Call:  #> all_indirect_paths(fit = fit, x = \"x\", y = \"y\") #> Path(s):  #>   path                 #> 1 x -> m11 -> m12 -> y #> 2 x -> m11 -> y        #> 3 x -> m12 -> y        #> 4 x -> m2 -> y         # Indirect effect estimates # R should be 2000 or even 5000 in real research # parallel should be used in real research. fit_boot <- do_boot(fit, R = 45, seed = 8974,                     parallel = FALSE) out <- many_indirect_effects(paths,                              fit = fit,                              boot_ci = TRUE,                              boot_out = fit_boot) out #>  #> ==  Indirect Effect(s)   == #>                        ind  CI.lo CI.hi Sig #> x -> m11 -> m12 -> y 0.193  0.029 0.550 Sig #> x -> m11 -> y        0.163 -0.346 0.570     #> x -> m12 -> y        0.059 -0.156 0.208     #> x -> m2 -> y         0.364  0.130 0.889 Sig #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 45 samples. #>  - The 'ind' column shows the indirect effects. #>   confint(out) #>                            2.5 %    97.5 % #> x -> m11 -> m12 -> y  0.02866626 0.5501760 #> x -> m11 -> y        -0.34617725 0.5702562 #> x -> m12 -> y        -0.15615492 0.2081817 #> x -> m2 -> y          0.12961514 0.8892807"},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Simple\nMediation — data_med","title":"Sample Dataset: Simple\nMediation — data_med","text":"simple mediation model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Simple\nMediation — data_med","text":"","code":"data_med"},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Simple\nMediation — data_med","text":"data frame 100 rows 5 variables: x Predictor. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Simple\nMediation — data_med","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 ab := a * b \" fit <- sem(mod, data_med, fixed.x = FALSE) parameterEstimates(fit) #>    lhs op rhs label    est    se      z pvalue ci.lower ci.upper #> 1    m  ~   x     a  0.935 0.079 11.802  0.000    0.779    1.090 #> 2    m  ~  c1        0.198 0.075  2.629  0.009    0.050    0.345 #> 3    m  ~  c2       -0.168 0.101 -1.668  0.095   -0.366    0.029 #> 4    y  ~   m     b  0.785 0.243  3.227  0.001    0.308    1.261 #> 5    y  ~   x        0.508 0.298  1.704  0.088   -0.076    1.092 #> 6    y  ~  c1        0.140 0.189  0.743  0.458   -0.230    0.511 #> 7    y  ~  c2       -0.154 0.249 -0.620  0.535   -0.642    0.334 #> 8    m ~~   m        0.681 0.096  7.071  0.000    0.493    0.870 #> 9    y ~~   y        4.030 0.570  7.071  0.000    2.913    5.147 #> 10   x ~~   x        1.102 0.156  7.071  0.000    0.797    1.408 #> 11   x ~~  c1        0.026 0.116  0.221  0.825   -0.202    0.253 #> 12   x ~~  c2        0.100 0.087  1.143  0.253   -0.071    0.271 #> 13  c1 ~~  c1        1.218 0.172  7.071  0.000    0.880    1.555 #> 14  c1 ~~  c2       -0.092 0.092 -1.002  0.316   -0.272    0.088 #> 15  c2 ~~  c2        0.685 0.097  7.071  0.000    0.495    0.875 #> 16  ab := a*b    ab  0.733 0.236  3.112  0.002    0.272    1.195"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Complicated\nMediation Model — data_med_complicated","title":"Sample Dataset: A Complicated\nMediation Model — data_med_complicated","text":"mediation model two predictors, two pathways,","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Complicated\nMediation Model — data_med_complicated","text":"","code":"data_med_complicated"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Complicated\nMediation Model — data_med_complicated","text":"data frame 300 rows 5 variables: x1 Predictor 1. Numeric. x2 Predictor 2. Numeric. m11 Mediator 1 Path 1. Numeric. m12 Mediator 2 Path 1. Numeric. m2 Mediator Path 2. Numeric. y1 Outcome variable 1. Numeric. y2 Outcome variable 2. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: A Complicated\nMediation Model — data_med_complicated","text":"","code":"data(data_med_complicated) dat <- data_med_complicated summary(lm_m11 <- lm(m11 ~ x1 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m11 ~ x1 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.64294 -0.55585  0.08916  0.67243  1.70807  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.13910    1.32319   1.617 0.109276     #> x1           0.35204    0.08946   3.935 0.000158 *** #> x2          -0.04471    0.09540  -0.469 0.640340     #> c1           0.07961    0.10081   0.790 0.431666     #> c2          -0.09890    0.08790  -1.125 0.263356     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9613 on 95 degrees of freedom #> Multiple R-squared:  0.1679,\tAdjusted R-squared:  0.1328  #> F-statistic: 4.791 on 4 and 95 DF,  p-value: 0.001453 #>  summary(lm_m12 <- lm(m12 ~ m11 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m12 ~ m11 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.4487 -0.6344  0.1066  0.5949  2.4585  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  8.23329    1.38073   5.963 4.32e-08 *** #> m11          0.45408    0.10562   4.299 4.18e-05 *** #> x1          -0.21182    0.09931  -2.133   0.0355 *   #> x2          -0.07206    0.09832  -0.733   0.4654     #> c1           0.20391    0.10412   1.959   0.0531 .   #> c2          -0.42456    0.09109  -4.661 1.04e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9896 on 94 degrees of freedom #> Multiple R-squared:  0.3525,\tAdjusted R-squared:  0.318  #> F-statistic: 10.23 on 5 and 94 DF,  p-value: 7.515e-08 #>  summary(lm_m2 <- lm(m2 ~ x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.25156 -0.62962 -0.02606  0.64273  1.67002  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  7.19926    1.21769   5.912 5.28e-08 *** #> x1           0.02233    0.08232   0.271   0.7868     #> x2           0.28901    0.08779   3.292   0.0014 **  #> c1          -0.13437    0.09277  -1.448   0.1508     #> c2          -0.01723    0.08089  -0.213   0.8318     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.8847 on 95 degrees of freedom #> Multiple R-squared:  0.1167,\tAdjusted R-squared:  0.07948  #> F-statistic: 3.137 on 4 and 95 DF,  p-value: 0.01805 #>  summary(lm_y1 <- lm(y1 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y1 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.52098 -0.63677 -0.04699  0.60540  2.05599  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  7.44629    1.72403   4.319 3.95e-05 *** #> m11          0.14694    0.10966   1.340  0.18354     #> m12          0.23402    0.09787   2.391  0.01884 *   #> m2          -0.43300    0.10894  -3.975  0.00014 *** #> x1          -0.07840    0.09651  -0.812  0.41865     #> x2           0.00322    0.09875   0.033  0.97406     #> c1           0.04238    0.10188   0.416  0.67842     #> c2          -0.04145    0.09592  -0.432  0.66666     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9391 on 92 degrees of freedom #> Multiple R-squared:  0.2786,\tAdjusted R-squared:  0.2237  #> F-statistic: 5.075 on 7 and 92 DF,  p-value: 6.688e-05 #>  summary(lm_y2 <- lm(y2 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y2 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.4153 -0.5711  0.1328  0.6137  2.2840  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 10.98160    1.95311   5.623    2e-07 *** #> m11          0.02417    0.12423   0.195 0.846185     #> m12          0.13525    0.11088   1.220 0.225649     #> m2          -0.43598    0.12341  -3.533 0.000645 *** #> x1           0.11534    0.10933   1.055 0.294202     #> x2           0.06204    0.11187   0.555 0.580515     #> c1          -0.04905    0.11542  -0.425 0.671820     #> c2           0.04581    0.10867   0.422 0.674297     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.064 on 92 degrees of freedom #> Multiple R-squared:  0.1526,\tAdjusted R-squared:  0.08818  #> F-statistic: 2.368 on 7 and 92 DF,  p-value: 0.02857 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Simple\nMediation with a-Path Moderated — data_med_mod_a","title":"Sample Dataset: Simple\nMediation with a-Path Moderated — data_med_mod_a","text":"simple mediation model -path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Simple\nMediation with a-Path Moderated — data_med_mod_a","text":"","code":"data_med_mod_a"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Simple\nMediation with a-Path Moderated — data_med_mod_a","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w Moderator. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Simple\nMediation with a-Path Moderated — data_med_mod_a","text":"","code":"library(lavaan) data(data_med_mod_a) data_med_mod_a$xw <-  data_med_mod_a$x *  data_med_mod_a$w mod <- \" m ~ a * x + w + d * xw + c1 + c2 y ~ b * m + x + w + c1 + c2 w ~~ v_w * w w ~ m_w * 1 ab := a * b ab_lo := (a + d * (m_w - sqrt(v_w))) * b ab_hi := (a + d * (m_w + sqrt(v_w))) * b \" fit <- sem(mod, data_med_mod_a,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 11, 12, 31:33), ] #>      lhs op                     rhs label   est    se      z pvalue ci.lower #> 1      m  ~                       x     a 0.096 0.455  0.211  0.833   -0.796 #> 3      m  ~                      xw     d 0.978 0.040 24.656  0.000    0.901 #> 6      y  ~                       m     b 0.923 0.040 23.114  0.000    0.845 #> 11     w ~~                       w   v_w 0.960 0.136  7.071  0.000    0.694 #> 12     w ~1                           m_w 2.179 0.098 22.239  0.000    1.987 #> 31    ab :=                     a*b    ab 0.089 0.420  0.211  0.833   -0.735 #> 32 ab_lo := (a+d*(m_w-sqrt(v_w)))*b ab_lo 1.172 0.427  2.742  0.006    0.334 #> 33 ab_hi := (a+d*(m_w+sqrt(v_w)))*b ab_hi 2.942 0.438  6.723  0.000    2.085 #>    ci.upper #> 1     0.988 #> 3     1.056 #> 6     1.001 #> 11    1.226 #> 12    2.371 #> 31    0.912 #> 32    2.010 #> 33    3.800"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Simple\nMediation with Both Paths Moderated\n(Two Moderators) — data_med_mod_ab","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\n(Two Moderators) — data_med_mod_ab","text":"simple mediation model -path b-path moderated moderator.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\n(Two Moderators) — data_med_mod_ab","text":"","code":"data_med_mod_ab"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\n(Two Moderators) — data_med_mod_ab","text":"data frame 100 rows 7 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\n(Two Moderators) — data_med_mod_ab","text":"","code":"library(lavaan) data(data_med_mod_ab) data_med_mod_ab$xw1 <-  data_med_mod_ab$x *  data_med_mod_ab$w1 data_med_mod_ab$mw2 <-  data_med_mod_ab$m *  data_med_mod_ab$w2 mod <- \" m ~ a * x + w1 + d1 * xw1 + c1 + c2 y ~ b * m + x + w1 + w2 + d2 * mw2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 ab := a * b ab_lolo := (a + d1 * (m_w1 - sqrt(v_w1))) * (b + d2 * (m_w2 - sqrt(v_w2))) ab_lohi := (a + d1 * (m_w1 - sqrt(v_w1))) * (b + d2 * (m_w2 + sqrt(v_w2))) ab_hilo := (a + d1 * (m_w1 + sqrt(v_w1))) * (b + d2 * (m_w2 - sqrt(v_w2))) ab_hihi := (a + d1 * (m_w1 + sqrt(v_w1))) * (b + d2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_ab,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 10, 41:45), ] #>        lhs op                                               rhs   label    est #> 1        m  ~                                                 x       a -0.663 #> 3        m  ~                                               xw1      d1  0.204 #> 6        y  ~                                                 m       b -0.150 #> 10       y  ~                                               mw2      d2  0.203 #> 41      ab :=                                               a*b      ab  0.099 #> 42 ab_lolo := (a+d1*(m_w1-sqrt(v_w1)))*(b+d2*(m_w2-sqrt(v_w2))) ab_lolo  0.043 #> 43 ab_lohi := (a+d1*(m_w1-sqrt(v_w1)))*(b+d2*(m_w2+sqrt(v_w2))) ab_lohi  0.108 #> 44 ab_hilo := (a+d1*(m_w1+sqrt(v_w1)))*(b+d2*(m_w2-sqrt(v_w2))) ab_hilo  0.159 #> 45 ab_hihi := (a+d1*(m_w1+sqrt(v_w1)))*(b+d2*(m_w2+sqrt(v_w2))) ab_hihi  0.397 #>       se      z pvalue ci.lower ci.upper #> 1  0.179 -3.700  0.000   -1.014   -0.312 #> 3  0.012 16.774  0.000    0.180    0.228 #> 6  0.048 -3.115  0.002   -0.244   -0.056 #> 10 0.012 16.258  0.000    0.178    0.227 #> 41 0.042  2.383  0.017    0.018    0.181 #> 42 0.039  1.100  0.271   -0.034    0.120 #> 43 0.095  1.129  0.259   -0.079    0.295 #> 44 0.050  3.173  0.002    0.061    0.257 #> 45 0.095  4.175  0.000    0.211    0.584"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Simple\nMediation with Both Paths Moderated\nBy a Moderator — data_med_mod_ab1","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\nBy a Moderator — data_med_mod_ab1","text":"simple mediation model -path b-path moderated one moderator.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\nBy a Moderator — data_med_mod_ab1","text":"","code":"data_med_mod_ab1"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\nBy a Moderator — data_med_mod_ab1","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w Moderator. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Simple\nMediation with Both Paths Moderated\nBy a Moderator — data_med_mod_ab1","text":"","code":"library(lavaan) data(data_med_mod_ab1) data_med_mod_ab1$xw <-  data_med_mod_ab1$x *  data_med_mod_ab1$w data_med_mod_ab1$mw <-  data_med_mod_ab1$m *  data_med_mod_ab1$w mod <- \" m ~ a * x + w + da * xw + c1 + c2 y ~ b * m + x + w + db * mw + c1 + c2 w ~~ v_w * w w ~ m_w * 1 ab := a * b ab_lo := (a + da * (m_w - sqrt(v_w))) * (b + db * (m_w - sqrt(v_w))) ab_hi := (a + da * (m_w + sqrt(v_w))) * (b + db * (m_w + sqrt(v_w))) \" fit <- sem(mod, data_med_mod_ab1,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 9, 38:40), ] #>      lhs op                                           rhs label    est    se #> 1      m  ~                                             x     a -1.255 0.164 #> 3      m  ~                                            xw    da  0.264 0.011 #> 6      y  ~                                             m     b -1.276 0.036 #> 9      y  ~                                            mw    db  0.331 0.014 #> 38    ab :=                                           a*b    ab  1.602 0.214 #> 39 ab_lo := (a+da*(m_w-sqrt(v_w)))*(b+db*(m_w-sqrt(v_w))) ab_lo -0.006 0.014 #> 40 ab_hi := (a+da*(m_w+sqrt(v_w)))*(b+db*(m_w+sqrt(v_w))) ab_hi  0.246 0.096 #>          z pvalue ci.lower ci.upper #> 1   -7.659  0.000   -1.576   -0.934 #> 3   23.531  0.000    0.242    0.286 #> 6  -35.730  0.000   -1.346   -1.206 #> 9   23.119  0.000    0.303    0.359 #> 38   7.489  0.000    1.182    2.021 #> 39  -0.437  0.662   -0.033    0.021 #> 40   2.555  0.011    0.057    0.435"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Simple\nMediation with b-Path Moderated — data_med_mod_b","title":"Sample Dataset: Simple\nMediation with b-Path Moderated — data_med_mod_b","text":"simple mediation model b-path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Simple\nMediation with b-Path Moderated — data_med_mod_b","text":"","code":"data_med_mod_b"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Simple\nMediation with b-Path Moderated — data_med_mod_b","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w Moderator. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Simple\nMediation with b-Path Moderated — data_med_mod_b","text":"","code":"library(lavaan) data(data_med_mod_b) data_med_mod_b$mw <-  data_med_mod_b$m *  data_med_mod_b$w mod <- \" m ~ a * x + w + c1 + c2 y ~ b * m + x + d * mw + c1 + c2 w ~~ v_w * w w ~ m_w * 1 ab := a * b ab_lo := a * (b + d * (m_w - sqrt(v_w))) ab_hi := a * (b + d * (m_w + sqrt(v_w))) \" fit <- sem(mod, data_med_mod_b,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 5, 7, 10, 11, 30:32), ] #>      lhs op                     rhs label   est    se      z pvalue ci.lower #> 1      m  ~                       x     a 0.300 0.073  4.127  0.000    0.158 #> 5      y  ~                       m     b 0.841 0.475  1.770  0.077   -0.091 #> 7      y  ~                      mw     d 0.629 0.039 16.123  0.000    0.553 #> 10     w ~~                       w   v_w 0.960 0.136  7.071  0.000    0.694 #> 11     w ~1                           m_w 2.179 0.098 22.240  0.000    1.987 #> 30    ab :=                     a*b    ab 0.253 0.155  1.626  0.104   -0.052 #> 31 ab_lo := a*(b+d*(m_w-sqrt(v_w))) ab_lo 0.480 0.186  2.578  0.010    0.115 #> 32 ab_hi := a*(b+d*(m_w+sqrt(v_w))) ab_hi 0.850 0.254  3.342  0.001    0.352 #>    ci.upper #> 1     0.443 #> 5     1.773 #> 7     0.706 #> 10    1.226 #> 11    2.371 #> 30    0.557 #> 31    0.844 #> 32    1.349"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Simple\nMediation Model with b-Path\nModerated-Moderation — data_med_mod_b_mod","title":"Sample Dataset: A Simple\nMediation Model with b-Path\nModerated-Moderation — data_med_mod_b_mod","text":"simple mediation model moderated-mediation b-path.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Simple\nMediation Model with b-Path\nModerated-Moderation — data_med_mod_b_mod","text":"","code":"data_med_mod_b_mod"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Simple\nMediation Model with b-Path\nModerated-Moderation — data_med_mod_b_mod","text":"data frame 100 rows 5 variables: x Predictor. Numeric. w1 Moderator b-path. Numeric. w2 Moderator moderating effect w1. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: A Simple\nMediation Model with b-Path\nModerated-Moderation — data_med_mod_b_mod","text":"","code":"data(data_med_mod_b_mod) dat <- data_med_mod_b_mod summary(lm_m <- lm(m ~ x + c1 + c2, dat)) #>  #> Call: #> lm(formula = m ~ x + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.20492 -0.61466 -0.00616  0.66926  2.99114  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.28350    1.41914  -0.904    0.368     #> x            0.48501    0.09547   5.080 1.85e-06 *** #> c1           0.03757    0.08769   0.428    0.669     #> c2           0.02441    0.08581   0.285    0.777     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9498 on 96 degrees of freedom #> Multiple R-squared:  0.2123,\tAdjusted R-squared:  0.1877  #> F-statistic: 8.625 on 3 and 96 DF,  p-value: 3.987e-05 #>  summary(lm_y <- lm(y ~ m*w1*w2 + x + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m * w1 * w2 + x + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.18204 -0.47099 -0.02998  0.53605  2.77463  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -17.40513    6.18440  -2.814  0.00602 **  #> m             6.47229    1.54231   4.196 6.40e-05 *** #> w1            5.06717    1.20737   4.197 6.39e-05 *** #> w2            8.08655    1.97632   4.092 9.39e-05 *** #> x             0.08443    0.10955   0.771  0.44293     #> c1           -0.09960    0.08419  -1.183  0.23995     #> c2           -0.14547    0.08432  -1.725  0.08798 .   #> m:w1         -1.23202    0.30195  -4.080 9.79e-05 *** #> m:w2         -1.98779    0.47670  -4.170 7.06e-05 *** #> w1:w2        -1.63594    0.39291  -4.164 7.22e-05 *** #> m:w1:w2       0.39674    0.09034   4.391 3.09e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9022 on 89 degrees of freedom #> Multiple R-squared:  0.4306,\tAdjusted R-squared:  0.3667  #> F-statistic: 6.732 on 10 and 89 DF,  p-value: 1.025e-07 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Parallel\nMediation with Two Moderators — data_med_mod_parallel","title":"Sample Dataset: Parallel\nMediation with Two Moderators — data_med_mod_parallel","text":"parallel mediation model a1-path b2-path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Parallel\nMediation with Two Moderators — data_med_mod_parallel","text":"","code":"data_med_mod_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Parallel\nMediation with Two Moderators — data_med_mod_parallel","text":"data frame 100 rows 8 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Parallel\nMediation with Two Moderators — data_med_mod_parallel","text":"","code":"library(lavaan) data(data_med_mod_parallel) data_med_mod_parallel$xw1 <-  data_med_mod_parallel$x *  data_med_mod_parallel$w1 data_med_mod_parallel$m2w2 <-  data_med_mod_parallel$m2 *  data_med_mod_parallel$w2 mod <- \" m1 ~ a1 * x + w1 + da1 * xw1 + c1 + c2 m2 ~ a2 * x + w1 + c1 + c2 y ~ b1 * m1 + b2 * m2 + x + w1 + w2 + db2 * m2w2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 a1b1 := a1 * b1 a2b2 := a2 * b2 a1b1_w1lo := (a1 + da1 * (m_w1 - sqrt(v_w1))) * b1 a1b1_w1hi := (a1 + da1 * (m_w1 + sqrt(v_w1))) * b2 a2b2_w2lo := a2 * (b2 + db2 * (m_w2 - sqrt(v_w2))) a2b2_w2hi := a2 * (b2 + db2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 10, 11, 15, 48:53), ] #>          lhs op                           rhs     label    est    se      z #> 1         m1  ~                             x        a1 -1.328 0.136 -9.741 #> 3         m1  ~                           xw1       da1  0.289 0.010 28.738 #> 6         m2  ~                             x        a2  0.184 0.068  2.704 #> 10         y  ~                            m1        b1  0.368 0.030 12.437 #> 11         y  ~                            m2        b2 -0.363 0.091 -3.966 #> 15         y  ~                          m2w2       db2  0.296 0.007 39.907 #> 48      a1b1 :=                         a1*b1      a1b1 -0.489 0.064 -7.669 #> 49      a2b2 :=                         a2*b2      a2b2 -0.067 0.030 -2.234 #> 50 a1b1_w1lo := (a1+da1*(m_w1-sqrt(v_w1)))*b1 a1b1_w1lo -0.075 0.042 -1.816 #> 51 a1b1_w1hi := (a1+da1*(m_w1+sqrt(v_w1)))*b2 a1b1_w1hi -0.155 0.053 -2.943 #> 52 a2b2_w2lo := a2*(b2+db2*(m_w2-sqrt(v_w2))) a2b2_w2lo  0.046 0.025  1.831 #> 53 a2b2_w2hi := a2*(b2+db2*(m_w2+sqrt(v_w2))) a2b2_w2hi  0.158 0.061  2.571 #>    pvalue ci.lower ci.upper #> 1   0.000   -1.595   -1.061 #> 3   0.000    0.270    0.309 #> 6   0.007    0.051    0.318 #> 10  0.000    0.310    0.426 #> 11  0.000   -0.542   -0.183 #> 15  0.000    0.282    0.311 #> 48  0.000   -0.614   -0.364 #> 49  0.025   -0.126   -0.008 #> 50  0.069   -0.157    0.006 #> 51  0.003   -0.258   -0.052 #> 52  0.067   -0.003    0.095 #> 53  0.010    0.038    0.278"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Parallel\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_parallel_cat","title":"Sample Dataset: Parallel\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_parallel_cat","text":"parallel mediation model two categorical moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Parallel\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_parallel_cat","text":"","code":"data_med_mod_parallel_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Parallel\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_parallel_cat","text":"data frame 300 rows 8 variables: x Predictor. Numeric. w1 Moderator. String. Values: \"group1\", \"group2\", \"group3\" w2 Moderator. String. Values: \"team1\", \"team2\" m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Parallel\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_parallel_cat","text":"","code":"data(data_med_mod_parallel_cat) dat <- data_med_mod_parallel_cat summary(lm_m1 <- lm(m1 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m1 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.7472 -0.6656  0.0500  0.6887  3.4973  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.143612   0.692888   1.651   0.0999 .   #> x            0.902275   0.087667  10.292   <2e-16 *** #> w1group2     1.150056   0.800215   1.437   0.1517     #> w1group3     0.708515   0.846560   0.837   0.4033     #> c1          -0.002886   0.062350  -0.046   0.9631     #> c2          -0.127222   0.059342  -2.144   0.0329 *   #> x:w1group2  -0.233639   0.117285  -1.992   0.0473 *   #> x:w1group3  -0.238876   0.123572  -1.933   0.0542 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.025 on 292 degrees of freedom #> Multiple R-squared:   0.49,\tAdjusted R-squared:  0.4777  #> F-statistic: 40.07 on 7 and 292 DF,  p-value: < 2.2e-16 #>  summary(lm_m2 <- lm(m2 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.7490 -0.5931 -0.0192  0.6492  3.2015  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  3.224453   0.648430   4.973 1.13e-06 *** #> x            0.438166   0.082042   5.341 1.86e-07 *** #> w1group2     0.190078   0.748870   0.254   0.7998     #> w1group3    -0.150416   0.792242  -0.190   0.8496     #> c1          -0.129800   0.058349  -2.225   0.0269 *   #> c2           0.007616   0.055535   0.137   0.8910     #> x:w1group2  -0.053156   0.109759  -0.484   0.6285     #> x:w1group3   0.025153   0.115643   0.218   0.8280     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9597 on 292 degrees of freedom #> Multiple R-squared:  0.2529,\tAdjusted R-squared:  0.235  #> F-statistic: 14.12 on 7 and 292 DF,  p-value: 8.862e-16 #>  summary(lm_y <- lm(y ~ m1*w2 + m2*w2 + m1 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m1 * w2 + m2 * w2 + m1 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.9753 -0.9732 -0.0471  0.9780  4.0917  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.335755   0.823638  -0.408 0.683833     #> m1           0.897601   0.094224   9.526  < 2e-16 *** #> w2team2      0.683583   0.919420   0.743 0.457787     #> m2           0.426387   0.115277   3.699 0.000259 *** #> x            0.044777   0.088262   0.507 0.612315     #> w1group2    -0.194036   0.189154  -1.026 0.305839     #> w1group3    -0.031134   0.204115  -0.153 0.878874     #> c1          -0.125317   0.083119  -1.508 0.132728     #> c2           0.083940   0.078548   1.069 0.286119     #> m1:w2team2   0.006921   0.120168   0.058 0.954113     #> w2team2:m2  -0.080865   0.159015  -0.509 0.611463     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.338 on 289 degrees of freedom #> Multiple R-squared:  0.5841,\tAdjusted R-squared:  0.5697  #> F-statistic: 40.59 on 10 and 289 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Serial\nMediation with Two Moderators — data_med_mod_serial","title":"Sample Dataset: Serial\nMediation with Two Moderators — data_med_mod_serial","text":"simple mediation model -path b2-path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Serial\nMediation with Two Moderators — data_med_mod_serial","text":"","code":"data_med_mod_serial"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Serial\nMediation with Two Moderators — data_med_mod_serial","text":"data frame 100 rows 8 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Serial\nMediation with Two Moderators — data_med_mod_serial","text":"","code":"library(lavaan) data(data_med_mod_serial) data_med_mod_serial$xw1 <-  data_med_mod_serial$x *  data_med_mod_serial$w1 data_med_mod_serial$m2w2 <-  data_med_mod_serial$m2 *  data_med_mod_serial$w2 mod <- \" m1 ~ a * x + w1 + da1 * xw1 + c1 + c2 m2 ~ b1 * m1 + x + w1 + c1 + c2 y ~ b2 * m2 + m1 + x + w1 + w2 + db2 * m2w2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 ab1b2 := a * b1 * b2 ab1b2_lolo := (a + da1 * (m_w1 - sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 - sqrt(v_w2))) ab1b2_lohi := (a + da1 * (m_w1 - sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 + sqrt(v_w2))) ab1b2_hilo := (a + da1 * (m_w1 + sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 - sqrt(v_w2))) ab1b2_hihi := (a + da1 * (m_w1 + sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_serial,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 11, 16, 49:53), ] #>           lhs op                                                     rhs #> 1          m1  ~                                                       x #> 3          m1  ~                                                     xw1 #> 6          m2  ~                                                      m1 #> 11          y  ~                                                      m2 #> 16          y  ~                                                    m2w2 #> 49      ab1b2 :=                                                 a*b1*b2 #> 50 ab1b2_lolo := (a+da1*(m_w1-sqrt(v_w1)))*b1*(b2+db2*(m_w2-sqrt(v_w2))) #> 51 ab1b2_lohi := (a+da1*(m_w1-sqrt(v_w1)))*b1*(b2+db2*(m_w2+sqrt(v_w2))) #> 52 ab1b2_hilo := (a+da1*(m_w1+sqrt(v_w1)))*b1*(b2+db2*(m_w2-sqrt(v_w2))) #> 53 ab1b2_hihi := (a+da1*(m_w1+sqrt(v_w1)))*b1*(b2+db2*(m_w2+sqrt(v_w2))) #>         label    est    se      z pvalue ci.lower ci.upper #> 1           a -1.328 0.136 -9.741  0.000   -1.595   -1.061 #> 3         da1  0.289 0.010 28.738  0.000    0.270    0.309 #> 6          b1  0.183 0.032  5.712  0.000    0.120    0.246 #> 11         b2 -0.469 0.092 -5.075  0.000   -0.651   -0.288 #> 16        db2  0.333 0.007 45.421  0.000    0.319    0.348 #> 49      ab1b2  0.114 0.032  3.535  0.000    0.051    0.177 #> 50 ab1b2_lolo -0.009 0.006 -1.381  0.167   -0.021    0.004 #> 51 ab1b2_lohi -0.033 0.019 -1.711  0.087   -0.071    0.005 #> 52 ab1b2_hilo  0.018 0.010  1.892  0.058   -0.001    0.037 #> 53 ab1b2_hihi  0.070 0.022  3.219  0.001    0.027    0.112"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Serial\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_serial_cat","title":"Sample Dataset: Serial\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_serial_cat","text":"serial mediation model two categorical moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Serial\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_serial_cat","text":"","code":"data_med_mod_serial_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Serial\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_serial_cat","text":"data frame 300 rows 8 variables: x Predictor. Numeric. w1 Moderator. String. Values: \"group1\", \"group2\", \"group3\" w2 Moderator. String. Values: \"team1\", \"team2\" m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Serial\nModerated Mediation with Two\nCategorical Moderators — data_med_mod_serial_cat","text":"","code":"data(data_med_mod_serial_cat) dat <- data_med_mod_serial_cat summary(lm_m1 <- lm(m1 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m1 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.48162 -0.63917  0.03616  0.62807  2.88106  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.13552    0.66475  -0.204 0.838596     #> x            0.97270    0.10335   9.411  < 2e-16 *** #> w1group2    -0.23379    0.90635  -0.258 0.796628     #> w1group3     2.53055    0.90458   2.797 0.005493 **  #> c1           0.06033    0.06185   0.975 0.330139     #> c2           0.04888    0.05965   0.819 0.413195     #> x:w1group2  -0.03211    0.14433  -0.222 0.824096     #> x:w1group3  -0.51225    0.14585  -3.512 0.000515 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.047 on 292 degrees of freedom #> Multiple R-squared:  0.4478,\tAdjusted R-squared:  0.4346  #> F-statistic: 33.83 on 7 and 292 DF,  p-value: < 2.2e-16 #>  summary(lm_m2 <- lm(m2 ~ m1 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ m1 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -3.03503 -0.65833  0.02794  0.64110  2.99045  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  3.314339   0.443355   7.476 8.95e-13 *** #> m1           0.363210   0.055052   6.598 1.95e-10 *** #> x            0.005616   0.072660   0.077  0.93844     #> w1group2    -0.415468   0.148938  -2.790  0.00562 **  #> w1group3    -0.075908   0.145738  -0.521  0.60286     #> c1          -0.034240   0.059456  -0.576  0.56513     #> c2           0.010818   0.057533   0.188  0.85098     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.01 on 293 degrees of freedom #> Multiple R-squared:  0.2334,\tAdjusted R-squared:  0.2177  #> F-statistic: 14.87 on 6 and 293 DF,  p-value: 7.661e-15 #>  summary(lm_y <- lm(y ~ m2*w2 + m1 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m2 * w2 + m1 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.30328 -0.69259  0.03058  0.67952  2.89379  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.81161    0.56116   3.228  0.00139 **  #> m2           0.39472    0.07703   5.124 5.46e-07 *** #> w2team2      0.48363    0.56320   0.859  0.39120     #> m1           0.11568    0.05984   1.933  0.05418 .   #> x           -0.06053    0.07369  -0.821  0.41210     #> w1group2    -0.02577    0.15383  -0.168  0.86706     #> w1group3    -0.14960    0.14819  -1.010  0.31358     #> c1          -0.08765    0.06035  -1.452  0.14750     #> c2           0.08223    0.05853   1.405  0.16112     #> m2:w2team2  -0.07549    0.10503  -0.719  0.47288     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.024 on 290 degrees of freedom #> Multiple R-squared:  0.2074,\tAdjusted R-squared:  0.1828  #> F-statistic:  8.43 on 9 and 290 DF,  p-value: 3.442e-11 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset:\nSerial-Parallel Mediation with Two\nModerators — data_med_mod_serial_parallel","title":"Sample Dataset:\nSerial-Parallel Mediation with Two\nModerators — data_med_mod_serial_parallel","text":"serial-parallel mediation model paths moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset:\nSerial-Parallel Mediation with Two\nModerators — data_med_mod_serial_parallel","text":"","code":"data_med_mod_serial_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset:\nSerial-Parallel Mediation with Two\nModerators — data_med_mod_serial_parallel","text":"data frame 100 rows 9 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m11 Mediator 1 Path 1. Numeric. m12 Mediator 2 Path 2. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset:\nSerial-Parallel Mediation with Two\nModerators — data_med_mod_serial_parallel","text":"","code":"library(lavaan) data(data_med_mod_serial_parallel) data_med_mod_serial_parallel$xw1 <-  data_med_mod_serial_parallel$x *  data_med_mod_serial_parallel$w1 data_med_mod_serial_parallel$m2w2 <-  data_med_mod_serial_parallel$m2 *  data_med_mod_serial_parallel$w2 mod <- \" m11 ~ a1 * x + w1 + da11 * xw1 + c1 + c2 m12 ~ b11 * m11 + x + w1 + c1 + c2 m2 ~ a2 * x + c1 + c2 y ~ b12 * m12 + b2 * m2 + m11 + x + w1 + w2 + db2 * m2w2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 a1b11b22 := a1 * b11 * b12 a2b2 := a2 * b2 ab := a1b11b22 + a2b2 a1b11b12_w1lo := (a1 + da11 * (m_w1 - sqrt(v_w1))) * b11 * b12 a1b11b12_w1hi := (a1 + da11 * (m_w1 + sqrt(v_w1))) * b11 * b12 a2b2_w2lo := a2 * (b2 + db2 * (m_w2 - sqrt(v_w2))) a2b2_w2hi := a2 * (b2 + db2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_serial_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[parameterEstimates(fit)$label != \"\", ] #>              lhs op                                 rhs         label    est #> 1            m11  ~                                   x            a1 -1.328 #> 3            m11  ~                                 xw1          da11  2.894 #> 6            m12  ~                                 m11           b11  0.248 #> 11            m2  ~                                   x            a2  0.349 #> 14             y  ~                                 m12           b12  0.320 #> 15             y  ~                                  m2            b2 -0.711 #> 20             y  ~                                m2w2           db2  4.057 #> 23            w1 ~~                                  w1          v_w1  0.012 #> 24            w1 ~1                                              m_w1  0.497 #> 25            w2 ~~                                  w2          v_w2  0.010 #> 26            w2 ~1                                              m_w2  0.304 #> 55      a1b11b22 :=                          a1*b11*b12      a1b11b22 -0.105 #> 56          a2b2 :=                               a2*b2          a2b2 -0.249 #> 57            ab :=                       a1b11b22+a2b2            ab -0.354 #> 58 a1b11b12_w1lo := (a1+da11*(m_w1-sqrt(v_w1)))*b11*b12 a1b11b12_w1lo -0.016 #> 59 a1b11b12_w1hi := (a1+da11*(m_w1+sqrt(v_w1)))*b11*b12 a1b11b12_w1hi  0.034 #> 60     a2b2_w2lo :=       a2*(b2+db2*(m_w2-sqrt(v_w2)))     a2b2_w2lo  0.044 #> 61     a2b2_w2hi :=       a2*(b2+db2*(m_w2+sqrt(v_w2)))     a2b2_w2hi  0.322 #>       se      z pvalue ci.lower ci.upper #> 1  0.136 -9.741  0.000   -1.595   -1.061 #> 3  0.101 28.738  0.000    2.697    3.091 #> 6  0.014 17.421  0.000    0.220    0.276 #> 11 0.034 10.154  0.000    0.282    0.417 #> 14 0.216  1.478  0.139   -0.104    0.744 #> 15 0.189 -3.768  0.000   -1.081   -0.341 #> 20 0.156 25.993  0.000    3.751    4.363 #> 23 0.002  7.071  0.000    0.009    0.015 #> 24 0.011 45.550  0.000    0.476    0.519 #> 25 0.001  7.071  0.000    0.007    0.012 #> 26 0.010 31.028  0.000    0.285    0.323 #> 55 0.072 -1.456  0.145   -0.247    0.036 #> 56 0.070 -3.533  0.000   -0.386   -0.111 #> 57 0.101 -3.507  0.000   -0.552   -0.156 #> 58 0.014 -1.149  0.251   -0.044    0.011 #> 59 0.024  1.396  0.163   -0.014    0.081 #> 60 0.069  0.633  0.527   -0.092    0.179 #> 61 0.078  4.111  0.000    0.168    0.475"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset:\nSerial-Parallel Moderated Mediation\nwith Two Categorical Moderators — data_med_mod_serial_parallel_cat","title":"Sample Dataset:\nSerial-Parallel Moderated Mediation\nwith Two Categorical Moderators — data_med_mod_serial_parallel_cat","text":"serial-parallel mediation model two categorical moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset:\nSerial-Parallel Moderated Mediation\nwith Two Categorical Moderators — data_med_mod_serial_parallel_cat","text":"","code":"data_med_mod_serial_parallel_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset:\nSerial-Parallel Moderated Mediation\nwith Two Categorical Moderators — data_med_mod_serial_parallel_cat","text":"data frame 300 rows 8 variables: x Predictor. Numeric. w1 Moderator. String. Values: \"group1\", \"group2\", \"group3\" w2 Moderator. String. Values: \"team1\", \"team2\" m11 Mediator 1 Path 1. Numeric. m12 Mediator 2 Path 1. Numeric. m2 Mediator Path 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset:\nSerial-Parallel Moderated Mediation\nwith Two Categorical Moderators — data_med_mod_serial_parallel_cat","text":"","code":"data(data_med_mod_serial_parallel_cat) dat <- data_med_mod_serial_parallel_cat summary(lm_m11 <- lm(m11 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m11 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.0619 -0.6060 -0.0216  0.6404  3.4200  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.3209962  0.6435180   0.499  0.61829     #> x            0.9510556  0.0940888  10.108  < 2e-16 *** #> w1group2     0.9280457  0.8350532   1.111  0.26733     #> w1group3     1.9216220  0.8739049   2.199  0.02867 *   #> c1          -0.0009806  0.0545802  -0.018  0.98568     #> c2          -0.0064057  0.0580329  -0.110  0.91218     #> x:w1group2  -0.1964450  0.1338652  -1.467  0.14332     #> x:w1group3  -0.4204409  0.1276517  -3.294  0.00111 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.955 on 292 degrees of freedom #> Multiple R-squared:  0.4167,\tAdjusted R-squared:  0.4027  #> F-statistic:  29.8 on 7 and 292 DF,  p-value: < 2.2e-16 #>  summary(lm_m12 <- lm(m12 ~ m11 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m12 ~ m11 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.83583 -0.56576  0.02488  0.59982  2.07412  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.239944   0.480360   4.663 4.74e-06 *** #> m11          0.042372   0.058007   0.730    0.466     #> x            0.430485   0.068153   6.316 9.91e-10 *** #> w1group2     0.112602   0.140247   0.803    0.423     #> w1group3     0.051596   0.166553   0.310    0.757     #> c1           0.054272   0.054916   0.988    0.324     #> c2          -0.006007   0.058548  -0.103    0.918     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9642 on 293 degrees of freedom #> Multiple R-squared:  0.2655,\tAdjusted R-squared:  0.2505  #> F-statistic: 17.66 on 6 and 293 DF,  p-value: < 2.2e-16 #>  summary(lm_m2 <- lm(m2 ~ x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.50745 -0.72556  0.01446  0.74006  2.64019  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.87424    0.50746   5.664 3.52e-08 *** #> x            0.44820    0.05732   7.820 9.54e-14 *** #> w1group2    -0.12412    0.15005  -0.827    0.409     #> w1group3    -0.05783    0.16970  -0.341    0.733     #> c1          -0.02093    0.05907  -0.354    0.723     #> c2          -0.01997    0.06298  -0.317    0.751     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.037 on 294 degrees of freedom #> Multiple R-squared:  0.2303,\tAdjusted R-squared:  0.2172  #> F-statistic: 17.59 on 5 and 294 DF,  p-value: 3.033e-15 #>  summary(lm_y <- lm(y ~ m12 + m2*w2 + m12 + x + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m12 + m2 * w2 + m12 + x + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.0979 -0.7856 -0.0818  0.7568  3.6255  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.462047   0.754233   0.613   0.5406     #> m12          0.815192   0.074408  10.956  < 2e-16 *** #> m2           0.448334   0.099012   4.528 8.68e-06 *** #> w2team2      1.308023   0.704869   1.856   0.0645 .   #> x            0.002084   0.073283   0.028   0.9773     #> c1          -0.020047   0.069981  -0.286   0.7747     #> c2          -0.022310   0.075188  -0.297   0.7669     #> m2:w2team2  -0.228928   0.122836  -1.864   0.0634 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.226 on 292 degrees of freedom #> Multiple R-squared:  0.4392,\tAdjusted R-squared:  0.4258  #> F-statistic: 32.67 on 7 and 292 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: One Moderator — data_mod","title":"Sample Dataset: One Moderator — data_mod","text":"one-moderator model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: One Moderator — data_mod","text":"","code":"data_mod"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: One Moderator — data_mod","text":"data frame 100 rows 5 variables: x Predictor. Numeric. w Moderator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: One Moderator — data_mod","text":"","code":"library(lavaan) data(data_mod) data_mod$xw <- data_mod$x * data_mod$w mod <- \" y ~ a * x + w + d * xw + c1 + c2 w ~~ v_w * w w ~ m_w * 1 a_lo := a + d * (m_w - sqrt(v_w)) a_hi := a + d * (m_w + sqrt(v_w)) \" fit <- sem(mod, data_mod, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 7, 24, 25), ] #>     lhs op                 rhs label   est    se      z pvalue ci.lower #> 1     y  ~                   x     a 0.453 0.235  1.924  0.054   -0.008 #> 3     y  ~                  xw     d 0.596 0.020 29.951  0.000    0.557 #> 6     w ~~                   w   v_w 1.137 0.161  7.071  0.000    0.822 #> 7     w ~1                       m_w 3.213 0.107 30.142  0.000    3.005 #> 24 a_lo := a+d*(m_w-sqrt(v_w))  a_lo 1.733 0.244  7.113  0.000    1.256 #> 25 a_hi := a+d*(m_w+sqrt(v_w))  a_hi 3.004 0.247 12.178  0.000    2.521 #>    ci.upper #> 1     0.915 #> 3     0.635 #> 6     1.452 #> 7     3.422 #> 24    2.211 #> 25    3.487"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Two Moderators — data_mod2","title":"Sample Dataset: Two Moderators — data_mod2","text":"two-moderator model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Two Moderators — data_mod2","text":"","code":"data_mod2"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Two Moderators — data_mod2","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Two Moderators — data_mod2","text":"","code":"library(lavaan) data(data_mod2) data_mod2$xw1 <- data_mod2$x * data_mod2$w1 data_mod2$xw2 <- data_mod2$x * data_mod2$w2 mod <- \" y ~ a * x + w1 + w2 + d1 * xw1 + d2 * xw2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 a_lolo := a + d1 * (m_w1 - sqrt(v_w1)) + d2 * (m_w2 - sqrt(v_w2)) a_lohi := a + d1 * (m_w1 - sqrt(v_w1)) + d2 * (m_w2 + sqrt(v_w2)) a_hilo := a + d1 * (m_w1 + sqrt(v_w1)) + d2 * (m_w2 - sqrt(v_w2)) a_hihi := a + d1 * (m_w1 + sqrt(v_w1)) + d2 * (m_w2 + sqrt(v_w2)) \" fit <- sem(mod, data_mod2, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 5, 8:11, 34:37), ] #>       lhs op                                         rhs  label    est    se #> 1       y  ~                                           x      a  0.716 0.098 #> 4       y  ~                                         xw1     d1  0.107 0.009 #> 5       y  ~                                         xw2     d2 -0.191 0.009 #> 8      w1 ~~                                          w1   v_w1  0.987 0.140 #> 9      w1 ~1                                               m_w1  4.027 0.099 #> 10     w2 ~~                                          w2   v_w2  1.052 0.149 #> 11     w2 ~1                                               m_w2  2.959 0.103 #> 34 a_lolo := a+d1*(m_w1-sqrt(v_w1))+d2*(m_w2-sqrt(v_w2)) a_lolo  0.671 0.091 #> 35 a_lohi := a+d1*(m_w1-sqrt(v_w1))+d2*(m_w2+sqrt(v_w2)) a_lohi  0.279 0.089 #> 36 a_hilo := a+d1*(m_w1+sqrt(v_w1))+d2*(m_w2-sqrt(v_w2)) a_hilo  0.884 0.091 #> 37 a_hihi := a+d1*(m_w1+sqrt(v_w1))+d2*(m_w2+sqrt(v_w2)) a_hihi  0.492 0.090 #>          z pvalue ci.lower ci.upper #> 1    7.286  0.000    0.523    0.908 #> 4   12.461  0.000    0.090    0.124 #> 5  -22.359  0.000   -0.208   -0.174 #> 8    7.071  0.000    0.713    1.260 #> 9   40.545  0.000    3.833    4.222 #> 10   7.071  0.000    0.761    1.344 #> 11  28.845  0.000    2.758    3.160 #> 34   7.360  0.000    0.492    0.850 #> 35   3.134  0.002    0.105    0.454 #> 36   9.663  0.000    0.705    1.063 #> 37   5.481  0.000    0.316    0.668"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Moderation\nwith One Categorical Moderator — data_mod_cat","title":"Sample Dataset: Moderation\nwith One Categorical Moderator — data_mod_cat","text":"moderation model categorical moderator.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Moderation\nwith One Categorical Moderator — data_mod_cat","text":"","code":"data_mod_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Moderation\nwith One Categorical Moderator — data_mod_cat","text":"data frame 300 rows 5 variables: x Predictor. Numeric. w Moderator. String. Values: \"group1\", \"group2\", \"group3\" y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Moderation\nwith One Categorical Moderator — data_mod_cat","text":"","code":"data(data_mod_cat) dat <- data_mod_cat summary(lm_y <- lm(y ~ x*w + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ x * w + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.51583 -0.64354 -0.00324  0.62382  3.08839  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  3.740541   0.521689   7.170 6.17e-12 *** #> x            0.811466   0.087904   9.231  < 2e-16 *** #> wgroup2     -0.127138   0.458910  -0.277  0.78194     #> wgroup3      0.325005   0.415632   0.782  0.43487     #> c1          -0.003431   0.056895  -0.060  0.95196     #> c2          -0.059157   0.056892  -1.040  0.29929     #> x:wgroup2   -0.126358   0.140534  -0.899  0.36933     #> x:wgroup3   -0.376700   0.128669  -2.928  0.00368 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9806 on 292 degrees of freedom #> Multiple R-squared:  0.3699,\tAdjusted R-squared:  0.3548  #> F-statistic: 24.49 on 7 and 292 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Complicated\nModerated-Mediation Model — data_mome_demo","title":"Sample Dataset: A Complicated\nModerated-Mediation Model — data_mome_demo","text":"Generated complicated moderated-mediation model demonstration.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Complicated\nModerated-Mediation Model — data_mome_demo","text":"","code":"data_mome_demo"},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Complicated\nModerated-Mediation Model — data_mome_demo","text":"data frame 200 rows 11 variables: x1 Predictor 1. Numeric. x2 Predictor 2. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. m3 Mediator 3. Numeric. y1 Outcome Variable 1. Numeric. y2 Outcome Variable 2. Numeric. w1 Moderator 1. Numeric. w2 Moderator 21. Numeric. c1 Control Variable 1. Numeric. c2 Control Variable 2. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Dataset: A Complicated\nModerated-Mediation Model — data_mome_demo","text":"model:","code":"# w1x1 <- x1 * w1 # w2m2 <- w2 * m2 m1 ~ x1 + w1 + w1x1 + x2 + c1 + c2 m2 ~ m1 + c1 + c2 m3 ~ x2 + x1 + c1 + c2 y1 ~ m2 + w2 + w2m2 + x1 + x2 + m3 + c1 + c2 y2 ~ m3 + x2 + x1 + m2 + c1 + c2 # Covariances excluded for brevity"},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Complicated\nModerated-Mediation Model With\nMissing Data — data_mome_demo_missing","title":"Sample Dataset: A Complicated\nModerated-Mediation Model With\nMissing Data — data_mome_demo_missing","text":"Generated complicated moderated-mediation model demonstration, missing data","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Complicated\nModerated-Mediation Model With\nMissing Data — data_mome_demo_missing","text":"","code":"data_mome_demo_missing"},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo_missing.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Complicated\nModerated-Mediation Model With\nMissing Data — data_mome_demo_missing","text":"data frame 200 rows 11 variables: x1 Predictor 1. Numeric. x2 Predictor 2. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. m3 Mediator 3. Numeric. y1 Outcome Variable 1. Numeric. y2 Outcome Variable 2. Numeric. w1 Moderator 1. Numeric. w2 Moderator 21. Numeric. c1 Control Variable 1. Numeric. c2 Control Variable 2. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mome_demo_missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Dataset: A Complicated\nModerated-Mediation Model With\nMissing Data — data_mome_demo_missing","text":"copy data_mome_demo randomly selected cells changed NA. number cases missing data 169. model:","code":"# w1x1 <- x1 * w1 # w2m2 <- w2 * m2 m1 ~ x1 + w1 + w1x1 + x2 + c1 + c2 m2 ~ m1 + c1 + c2 m3 ~ x2 + x1 + c1 + c2 y1 ~ m2 + w2 + w2m2 + x1 + x2 + m3 + c1 + c2 y2 ~ m3 + x2 + x1 + m2 + c1 + c2 # Covariances excluded for brevity"},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Parallel Mediation — data_parallel","title":"Sample Dataset: Parallel Mediation — data_parallel","text":"parallel mediation model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Parallel Mediation — data_parallel","text":"","code":"data_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Parallel Mediation — data_parallel","text":"data frame 100 rows 6 variables: x Predictor. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Parallel Mediation — data_parallel","text":"","code":"library(lavaan) data(data_parallel) mod <- \" m1 ~ a1 * x + c1 + c2 m2 ~ a2 * x + c1 + c2 y ~ b2 * m2 + b1 * m1 + x + c1 + c2 indirect1 := a1 * b1 indirect2 := a2 * b2 indirect := a1 * b1 + a2 * b2 \" fit <- sem(mod, data_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 7, 8, 27:29), ] #>          lhs op         rhs     label   est    se     z pvalue ci.lower #> 1         m1  ~           x        a1 0.877 0.112 7.823  0.000    0.657 #> 4         m2  ~           x        a2 0.297 0.108 2.753  0.006    0.086 #> 7          y  ~          m2        b2 0.471 0.190 2.484  0.013    0.099 #> 8          y  ~          m1        b1 0.486 0.182 2.667  0.008    0.129 #> 27 indirect1 :=       a1*b1 indirect1 0.427 0.169 2.524  0.012    0.095 #> 28 indirect2 :=       a2*b2 indirect2 0.140 0.076 1.845  0.065   -0.009 #> 29  indirect := a1*b1+a2*b2  indirect 0.566 0.185 3.058  0.002    0.203 #>    ci.upper #> 1     1.097 #> 4     0.508 #> 7     0.843 #> 8     0.844 #> 27    0.758 #> 28    0.288 #> 29    0.929"},{"path":"https://sfcheung.github.io/manymome/reference/data_sem.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Latent\nVariable Mediation Model With 4\nFactors — data_sem","title":"Sample Dataset: A Latent\nVariable Mediation Model With 4\nFactors — data_sem","text":"data set testing functions four-factor structural model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_sem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Latent\nVariable Mediation Model With 4\nFactors — data_sem","text":"","code":"data_sem"},{"path":"https://sfcheung.github.io/manymome/reference/data_sem.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Latent\nVariable Mediation Model With 4\nFactors — data_sem","text":"data frame 200 rows 14 variables: x01 Indicator. Numeric. x02 Indicator. Numeric. x03 Indicator. Numeric. x04 Indicator. Numeric. x05 Indicator. Numeric. x06 Indicator. Numeric. x07 Indicator. Numeric. x08 Indicator. Numeric. x09 Indicator. Numeric. x10 Indicator. Numeric. x11 Indicator. Numeric. x12 Indicator. Numeric. x13 Indicator. Numeric. x14 Indicator. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_sem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: A Latent\nVariable Mediation Model With 4\nFactors — data_sem","text":"","code":"data(data_sem) dat <- data_med_mod_b_mod mod <-   'f1 =~ x01 + x02 + x03    f2 =~ x04 + x05 + x06 + x07    f3 =~ x08 + x09 + x10    f4 =~ x11 + x12 + x13 + x14    f3 ~  a1*f1 + a2*f2    f4 ~  b1*f1 + b3*f3    a1b3 := a1 * b3    a2b3 := a2 * b3   ' fit <- lavaan::sem(model = mod, data = data_sem) summary(fit) #> lavaan 0.6.16 ended normally after 42 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        33 #>  #>   Number of observations                           200 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                72.210 #>   Degrees of freedom                                72 #>   P-value (Chi-square)                           0.471 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 =~                                                #>     x01               1.000                            #>     x02               0.812    0.134    6.081    0.000 #>     x03               1.381    0.220    6.291    0.000 #>   f2 =~                                                #>     x04               1.000                            #>     x05               0.058    0.076    0.755    0.450 #>     x06               1.153    0.162    7.126    0.000 #>     x07               0.738    0.108    6.831    0.000 #>   f3 =~                                                #>     x08               1.000                            #>     x09               0.752    0.090    8.339    0.000 #>     x10               1.078    0.120    8.969    0.000 #>   f4 =~                                                #>     x11               1.000                            #>     x12               0.776    0.091    8.507    0.000 #>     x13               0.123    0.070    1.745    0.081 #>     x14               1.125    0.121    9.311    0.000 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f3 ~                                                 #>     f1        (a1)    0.243    0.120    2.018    0.044 #>     f2        (a2)    0.326    0.102    3.186    0.001 #>   f4 ~                                                 #>     f1        (b1)    0.447    0.125    3.592    0.000 #>     f3        (b3)    0.402    0.090    4.445    0.000 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   f1 ~~                                                #>     f2               -0.039    0.085   -0.457    0.648 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x01               1.064    0.151    7.025    0.000 #>    .x02               1.075    0.131    8.223    0.000 #>    .x03               0.860    0.217    3.958    0.000 #>    .x04               1.014    0.166    6.111    0.000 #>    .x05               0.966    0.097    9.989    0.000 #>    .x06               0.837    0.193    4.348    0.000 #>    .x07               1.065    0.130    8.222    0.000 #>    .x08               0.735    0.138    5.310    0.000 #>    .x09               0.941    0.118    7.984    0.000 #>    .x10               1.134    0.179    6.346    0.000 #>    .x11               1.016    0.155    6.571    0.000 #>    .x12               0.985    0.123    7.981    0.000 #>    .x13               1.095    0.110    9.957    0.000 #>    .x14               0.911    0.171    5.329    0.000 #>     f1                0.765    0.184    4.164    0.000 #>     f2                1.077    0.225    4.784    0.000 #>    .f3                1.175    0.207    5.675    0.000 #>    .f4                0.949    0.185    5.125    0.000 #>  #> Defined Parameters: #>                    Estimate  Std.Err  z-value  P(>|z|) #>     a1b3              0.098    0.051    1.918    0.055 #>     a2b3              0.131    0.049    2.676    0.007 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Serial\nMediation — data_serial","title":"Sample Dataset: Serial\nMediation — data_serial","text":"serial mediation model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Serial\nMediation — data_serial","text":"","code":"data_serial"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Serial\nMediation — data_serial","text":"data frame 100 rows 6 variables: x Predictor. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset: Serial\nMediation — data_serial","text":"","code":"library(lavaan) data(data_serial) mod <- \" m1 ~ a * x + c1 + c2 m2 ~ b1 * m1 + x + c1 + c2 y ~ b2 * m2 + m1 + x + c1 + c2 indirect := a * b1 * b2 \" fit <- sem(mod, data_serial,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 8, 28), ] #>         lhs op     rhs    label   est    se     z pvalue ci.lower ci.upper #> 1        m1  ~       x        a 0.822 0.092 8.907  0.000    0.641    1.003 #> 4        m2  ~      m1       b1 0.421 0.099 4.237  0.000    0.226    0.615 #> 8         y  ~      m2       b2 0.521 0.221 2.361  0.018    0.088    0.953 #> 28 indirect := a*b1*b2 indirect 0.180 0.090 2.009  0.045    0.004    0.356"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset:\nSerial-Parallel Mediation — data_serial_parallel","title":"Sample Dataset:\nSerial-Parallel Mediation — data_serial_parallel","text":"mediation model serial parallel components.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset:\nSerial-Parallel Mediation — data_serial_parallel","text":"","code":"data_serial_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset:\nSerial-Parallel Mediation — data_serial_parallel","text":"data frame 100 rows 7 variables: x Predictor. Numeric. m11 Mediator 1 Path 1. Numeric. m12 Mediator 2 Path 1. Numeric. m2 Mediator Path 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Dataset:\nSerial-Parallel Mediation — data_serial_parallel","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ a11 * x + c1 + c2 m12 ~ b11 * m11 + x + c1 + c2 m2 ~ a2 * x + c1 + c2 y ~ b12 * m12 + b2 * m2 + m11 + x + c1 + c2 indirect1 := a11 * b11 * b12 indirect2 := a2 * b2 indirect := a11 * b11 * b12 + a2 * b2 \" fit <- sem(mod, data_serial_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 8, 11, 12, 34:36), ] #>          lhs op               rhs     label   est    se     z pvalue ci.lower #> 1        m11  ~                 x       a11 0.800 0.093 8.566  0.000    0.617 #> 4        m12  ~               m11       b11 0.465 0.092 5.044  0.000    0.284 #> 8         m2  ~                 x        a2 0.435 0.103 4.239  0.000    0.234 #> 11         y  ~               m12       b12 0.519 0.246 2.108  0.035    0.036 #> 12         y  ~                m2        b2 0.839 0.207 4.052  0.000    0.433 #> 34 indirect1 :=       a11*b11*b12 indirect1 0.193 0.102 1.897  0.058   -0.006 #> 35 indirect2 :=             a2*b2 indirect2 0.364 0.124 2.929  0.003    0.121 #> 36  indirect := a11*b11*b12+a2*b2  indirect 0.558 0.161 3.468  0.001    0.242 #>    ci.upper #> 1     0.983 #> 4     0.646 #> 8     0.635 #> 11    1.002 #> 12    1.244 #> 34    0.393 #> 35    0.608 #> 36    0.873"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A\nLatent Mediation Model With Three\nMediators — data_serial_parallel_latent","title":"Sample Dataset: A\nLatent Mediation Model With Three\nMediators — data_serial_parallel_latent","text":"Generated 3-mediator mediation model among eight latent factors, fx1, fx2, fm11, fm12, fy1, fy2, three indicators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A\nLatent Mediation Model With Three\nMediators — data_serial_parallel_latent","text":"","code":"data_serial_parallel_latent"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel_latent.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A\nLatent Mediation Model With Three\nMediators — data_serial_parallel_latent","text":"data frame 500 rows 21 variables: x1 Indicator fx1. Numeric. x2 Indicator fx1. Numeric. x3 Indicator fx1. Numeric. x4 Indicator fx2. Numeric. x5 Indicator fx2. Numeric. x6 Indicator fx2. Numeric. m11a Indicator fm11. Numeric. m11b Indicator fm11. Numeric. m11c Indicator fm11. Numeric. m12a Indicator fm12. Numeric. m12b Indicator fm12. Numeric. m12c Indicator fm12. Numeric. m2a Indicator fm2. Numeric. m2b Indicator fm2. Numeric. m2c Indicator fm2. Numeric. y1 Indicator fy1. Numeric. y2 Indicator fy1. Numeric. y3 Indicator fy1. Numeric. y4 Indicator fy2. Numeric. y5 Indicator fy2. Numeric. y6 Indicator fy2. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel_latent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Dataset: A\nLatent Mediation Model With Three\nMediators — data_serial_parallel_latent","text":"model:","code":"fx1 =~ x1 + x2 + x3 fx2 =~ x4 + x5 + x6 fm11 =~ m11a + m11b + m11c fm12 =~ m12a + m12b + m12c fm2  =~ m2a + m2b + m2c fy1 =~ y1 + y2 + y3 fy2 =~ y3 + y4 + y5 fm11 ~ a1 * fx1 fm12 ~ b11 * fm11 + a2m * fx2 fm2 ~ a2 * fx2 fy1 ~ b12 * fm12 + b11y1 * fm11 + cp1 * fx1 fy2 ~ b2 * fm2 + cp2 * fx2 a1b11b12 := a1 * b11 * b12 a1b11y1 := a1 * b11y1 a2b2 := a2 * b2 a2mb12 := a2m * b12"},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_boot","title":"Bootstrap Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_boot","text":"Generate bootstrap estimates used cond_indirect_effects(), indirect_effect(), cond_indirect(),","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_boot","text":"","code":"do_boot(   fit,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_boot","text":"fit Either () list lm class objects, output lm2list() (.e., lm_list-class object), (b) output lavaan::sem(). R number bootstrap samples. Default 100. seed seed bootstrapping. Default NULL seed set. parallel Logical. Whether parallel processing used. Default TRUE. ncores Integer. number CPU cores use parallel TRUE. Default number non-logical cores minus one (one minimum). raise error greater number cores detected parallel::detectCores(). ncores set, override make_cluster_args. make_cluster_args named list additional arguments passed parallel::makeCluster(). advanced users. See parallel::makeCluster() details. Default list(), additional arguments. progress Logical. Display progress . Default TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_boot","text":"boot_out-class object can used boot_out argument cond_indirect_effects(), indirect_effect(), cond_indirect() forming bootstrap confidence intervals. object list number elements equal number bootstrap samples. element list parameter estimates sample variances covariances variables bootstrap sample.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_boot","text":"nonparametric bootstrapping generate bootstrap estimates parameter estimates model fitted either lavaan::sem() sequence calls lm(). stored estimates can used cond_indirect_effects(), indirect_effect(), cond_indirect() form bootstrapping confidence intervals. approach removes need repeat bootstrapping call cond_indirect_effects(), indirect_effect(), cond_indirect(). also ensures set bootstrap samples used subsequent analysis. determines type fit object automatically calls lm2boot_out(), fit2boot_out(), fit2boot_out_do_boot().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_boot","text":"","code":"data(data_med_mod_ab1) dat <- data_med_mod_ab1 lm_m <- lm(m ~ x*w + c1 + c2, dat) lm_y <- lm(y ~ m*w + x + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) # In real research, R should be 2000 or even 5000 # In real research, no need to set parallel and progress to FALSE # Parallel processing is enabled by default and # progress is displayed by default. lm_boot_out <- do_boot(lm_out, R = 50, seed = 1234,                        parallel = FALSE,                        progress = FALSE) wlevels <- mod_levels(w = \"w\", fit = lm_out) wlevels #>                w #> M+1.0SD 6.046455 #> Mean    4.990179 #> M-1.0SD 3.933902 out <- cond_indirect_effects(wlevels = wlevels,                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = lm_out,                              boot_ci = TRUE,                              boot_out = lm_boot_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.029 0.452 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.084 0.219      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.066 0.108     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 50 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/do_mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","title":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","text":"Generate Monte Carlo estimates used cond_indirect_effects(), indirect_effect(), cond_indirect(),","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","text":"","code":"do_mc(   fit,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE )  gen_mc_est(fit, R = 100, seed = NULL)"},{"path":"https://sfcheung.github.io/manymome/reference/do_mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","text":"fit output lavaan::sem(). can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). output stats::lm() supported. R number replications. Default 100. seed seed generating Monte Carlo estimates. Default NULL seed set. parallel used. Kept compatibility do_boot(). ncores used. Kept compatibility do_boot(). make_cluster_args used. Kept compatibility do_boot(). progress Logical. Display progress . Default TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","text":"mc_out-class object can used mc_out argument cond_indirect_effects(), indirect_effect(), cond_indirect() forming Monte Carlo confidence intervals. object list number elements equal number Monte Carlo replications. element list parameter estimates sample variances covariances variables Monte Carlo replication.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_mc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","text":"uses parameter estimates variance-covariance matrix generate Monte Carlo estimates parameter estimates model fitted lavaan::sem(). stored estimates can used cond_indirect_effects(), indirect_effect(), cond_indirect() form Monte Carlo confidence intervals. also supports model estimated multiple imputation using semTools::runMI() wrapper, semTools::sem.mi(). pooled estimates variance-covariance matrix used generate Monte Carlo estimates. approach removes need repeat Monte Carlo simulation call cond_indirect_effects(), indirect_effect(), cond_indirect(). also ensures set Monte Carlo estimates used subsequent analysis.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_mc.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","text":"do_mc(): general purpose function creating Monte Carlo estimates reused functions. returns mc_out-class object. gen_mc_est(): Generate Monte Carlo estimates store external slot: external$manymome$mc. advanced users.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/do_mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Estimates for\n'indirect_effects' and\n'cond_indirect_effects' — do_mc","text":"","code":"library(lavaan) data(data_med_mod_ab1) dat <- data_med_mod_ab1 mod <- \" m ~ x + w + x:w + c1 + c2 y ~ m + w + m:w + x + c1 + c2 \" fit <- sem(mod, dat) # In real research, R should be 5000 or even 10000 mc_out <- do_mc(fit, R = 100, seed = 1234) #> Stage 1: Simulate estimates #> Stage 2: Compute implied statistics wlevels <- mod_levels(w = \"w\", fit = fit) wlevels #>                w #> M+1.0SD 6.046455 #> Mean    4.990179 #> M-1.0SD 3.933902 out <- cond_indirect_effects(wlevels = wlevels,                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = fit,                              mc_ci = TRUE,                              mc_out = mc_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.037 0.550 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.067 0.157      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.062 0.038     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% Monte Carlo confidence intervals with 100 #>    replications. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Dummy Variables — factor2var","title":"Create Dummy Variables — factor2var","text":"Create dummy variables categorical variable.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Dummy Variables — factor2var","text":"","code":"factor2var(   x_value,   x_contrasts = \"contr.treatment\",   prefix = \"\",   add_rownames = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Dummy Variables — factor2var","text":"x_value vector categorical variable. x_contrasts contrast used. Default \"constr.treatment\". prefix prefix added variables created. Default \"\". add_rownames Whether row names added output. Default TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Dummy Variables — factor2var","text":"always returns matrix number rows equal length vector (x_value). categorical two categories one dummy variable needed, output still one-column \"matrix\" R.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Dummy Variables — factor2var","text":"main use creating dummy variables (indicator variables) categorical variable, used lavaan::sem(). Optionally, contrasts can used argument x_contrasts.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Dummy Variables — factor2var","text":"","code":"dat <- data_mod_cat dat <- data.frame(dat,                   factor2var(dat$w, prefix = \"gp\", add_rownames = FALSE)) head(dat[, c(\"w\", \"gpgroup2\", \"gpgroup3\")], 15) #>         w gpgroup2 gpgroup3 #> 1  group3        0        1 #> 2  group3        0        1 #> 3  group2        1        0 #> 4  group2        1        0 #> 5  group1        0        0 #> 6  group2        1        0 #> 7  group3        0        1 #> 8  group2        1        0 #> 9  group1        0        0 #> 10 group2        1        0 #> 11 group1        0        0 #> 12 group3        0        1 #> 13 group3        0        1 #> 14 group2        1        0 #> 15 group3        0        1"},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","title":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","text":"Generate bootstrap estimates output lavaan::sem().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","text":"","code":"fit2boot_out(fit)  fit2boot_out_do_boot(   fit,   R = 100,   seed = NULL,   parallel = FALSE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE,   internal = list() )"},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","text":"fit fit object. function supports lavaan::lavaan object. R number bootstrap samples. Default 100. seed seed random resampling. Default NULL. parallel Logical. Whether parallel processing used. Default NULL. ncores Integer. number CPU cores use parallel TRUE. Default number non-logical cores minus one (one minimum). raise error greater number cores detected parallel::detectCores(). ncores set, override make_cluster_args. make_cluster_args named list additional arguments passed parallel::makeCluster(). advanced users. See parallel::makeCluster() details. Default list(). progress Logical. Display progress . Default TRUE. internal list arguments used internally debugging. Default list().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","text":"boot_out-class object can used boot_out argument indirect_effect(), cond_indirect_effects(), related functions forming bootstrapping confidence intervals. object list number elements equal number bootstrap samples. element list parameter estimates sample variances covariances variables bootstrap sample.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","text":"function advanced users. do_boot() function users try first do_boot() general interface input-specific functions like one. bootstrapping confidence intervals requested calling lavaan::sem() setting se = \"boot\", fit2boot_out() can used extract stored bootstrap estimates can reused indirect_effect(), cond_indirect_effects() related functions form bootstrapping confidence intervals effects indirect effects conditional indirect effects. bootstrapping confidence requested fitting model lavaan::sem(), fit2boot_out_do_boot() can used generate nonparametric bootstrap estimates output lavaan::sem() store use indirect_effect(), cond_indirect_effects(), related functions. approach removes need repeat bootstrapping call indirect_effect(), cond_indirect_effects(), related functions. also ensures set bootstrap samples used subsequent analyses.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","text":"fit2boot_out(): Process stored bootstrap estimates functions cond_indirect_effects(). fit2boot_out_do_boot(): bootstrapping store information used cond_indirect_effects() related functions. Support parallel processing.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Estimates for a\nlavaan Output — fit2boot_out","text":"","code":"library(lavaan) data(data_med_mod_ab1) dat <- data_med_mod_ab1 dat$\"x:w\" <- dat$x * dat$w dat$\"m:w\" <- dat$m * dat$w mod <- \" m ~ x + w + x:w + c1 + c2 y ~ m + w + m:w + x + c1 + c2 \"  # Bootstrapping not requested in calling lavaan::sem() fit <- sem(model = mod, data = dat, fixed.x = FALSE,            se = \"none\", baseline = FALSE) fit_boot_out <- fit2boot_out_do_boot(fit = fit,                                      R = 40,                                      seed = 1234,                                      progress = FALSE) out <- cond_indirect_effects(wlevels = \"w\",                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = fit,                              boot_ci = TRUE,                              boot_out = fit_boot_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.033 0.459 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.065 0.237      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.069 0.113     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 40 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/fit2mc_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Estimates for a\nlavaan Output — fit2mc_out","title":"Monte Carlo Estimates for a\nlavaan Output — fit2mc_out","text":"Generate Monte Carlo estimates output lavaan::sem().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2mc_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Estimates for a\nlavaan Output — fit2mc_out","text":"","code":"fit2mc_out(fit, progress = TRUE)"},{"path":"https://sfcheung.github.io/manymome/reference/fit2mc_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Estimates for a\nlavaan Output — fit2mc_out","text":"fit fit object. function supports lavaan::lavaan object. can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). progress Logical. Display progress . Default TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2mc_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Estimates for a\nlavaan Output — fit2mc_out","text":"mc_out-class object can used mc_out argument indirect_effect(), cond_indirect_effects(), related functions forming Monte Carlo confidence intervals. object list number elements equal number Monte Carlo replications. element list parameter estimates sample variances covariances variables Monte Carlo replication.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2mc_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Estimates for a\nlavaan Output — fit2mc_out","text":"function advanced users. do_mc() function users try first do_mc() general interface input-specific functions like one. fit2mc_out() can used extract stored Monte Carlo estimates can reused indirect_effect(), cond_indirect_effects() related functions form Monte Carlo confidence intervals effects indirect effects conditional indirect effects. approach removes need repeat Monte Carlo simulation call indirect_effect(), cond_indirect_effects(), related functions. also ensures set Monte Carlo estimates used subsequent analyses.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/fit2mc_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Estimates for a\nlavaan Output — fit2mc_out","text":"","code":"library(lavaan) data(data_med_mod_ab1) dat <- data_med_mod_ab1 dat$\"x:w\" <- dat$x * dat$w dat$\"m:w\" <- dat$m * dat$w mod <- \" m ~ x + w + x:w + c1 + c2 y ~ m + w + m:w + x + c1 + c2 \"  fit <- sem(model = mod, data = dat, fixed.x = FALSE,            baseline = FALSE) # In real research, R should be 5000 or even 10000. fit <- gen_mc_est(fit, R = 100, seed = 453253) fit_mc_out <- fit2mc_out(fit) #> Stage 1: Simulate estimates #> Stage 2: Compute implied statistics out <- cond_indirect_effects(wlevels = \"w\",                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = fit,                              mc_ci = TRUE,                              mc_out = fit_mc_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.016 0.477 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.070 0.114      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.072 0.025     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% Monte Carlo confidence intervals with 100 #>    replications. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/get_one_cond_indirect_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","title":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","text":"Return conditional indirect effect one row output cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_one_cond_indirect_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","text":"","code":"get_one_cond_indirect_effect(object, row)  get_one_cond_effect(object, row)"},{"path":"https://sfcheung.github.io/manymome/reference/get_one_cond_indirect_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","text":"object output cond_indirect_effects(). row row number row retrieved.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_one_cond_indirect_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","text":"indirect-class object, similar output indirect_effect() cond_indirect(). See [indirect_effect)] cond_indirect() details classes. [indirect_effect)]: R:indirect_effect) cond_indirect(): R:cond_indirect()","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_one_cond_indirect_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","text":"just extracts corresponding output cond_indirect() requested row.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_one_cond_indirect_effect.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","text":"get_one_cond_effect(): alias get_one_cond_indirect_effect()","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/get_one_cond_indirect_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get The Conditional Indirect\nEffect for One Row of\n'cond_indirect_effects' Output — get_one_cond_indirect_effect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ x  + w1 + x:w1 m2 ~ m1 y  ~ m2 + x + w4 + m2:w4 \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # Examples for cond_indirect():  # Conditional effects from x to m1 # when w1 is equal to each of the default levels out1 <- cond_indirect_effects(x = \"x\", y = \"m1\",                               wlevels = c(\"w1\", \"w4\"), fit = fit) get_one_cond_indirect_effect(out1, 3) #>  #> == Conditional  Effect   == #>                                              #>  Path:               x -> m1                 #>  Moderators:         w1, w4                  #>  Conditional Effect: 0.297                   #>  When:               w1 = -0.710, w4 = 1.209 #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1)) #> Computation: #>   ((0.46277) + (0.23380)*(-0.71006))  # Conditional Indirect effect from x1 through m1 to y, # when w1 is equal to each of the levels out2 <- cond_indirect_effects(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\"),                               wlevels = c(\"w1\", \"w4\"), fit = fit) get_one_cond_indirect_effect(out2, 4) #>  #> == Conditional Indirect Effect   == #>                                                        #>  Path:                        x -> m1 -> m2 -> y       #>  Moderators:                  w1, w4                   #>  Conditional Indirect Effect: 0.048                    #>  When:                        w1 = -0.710, w4 = -0.902 #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1))*(b.m2~m1)*(b.y~m2 + (b.m2:w4)*(w4)) #> Computation: #>   ((0.46277) + (0.23380)*(-0.71006))*(0.39883)*((0.42709) + (0.02570)*(-0.90228)) #> Coefficients of Component Paths: #>   Path Conditional Effect Original Coefficient #>   m1~x              0.297                0.463 #>  m2~m1              0.399                0.399 #>   y~m2              0.404                0.427 #>"},{"path":"https://sfcheung.github.io/manymome/reference/get_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Product Terms (if Any)\nAlong a Path — get_prod","title":"Product Terms (if Any)\nAlong a Path — get_prod","text":"Identify product term(s), , along path model return term(s), variables involved coefficient(s) term(s).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_prod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Product Terms (if Any)\nAlong a Path — get_prod","text":"","code":"get_prod(   x,   y,   operator = \":\",   fit = NULL,   est = NULL,   data = NULL,   expand = FALSE )"},{"path":"https://sfcheung.github.io/manymome/reference/get_prod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Product Terms (if Any)\nAlong a Path — get_prod","text":"x Character. Variable name. y Character. Variable name. operator Character. string used indicate product term. Default \":\", used lm() lavaan::sem() observed variables. fit fit object. Currently supports lavaan::lavaan object. can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). est output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ge ignored. data Data frame (optional). supplied, used identify product terms. expand Whether products two terms searched. FALSE default.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_prod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Product Terms (if Any)\nAlong a Path — get_prod","text":"least one product term found, returns list elements: prod: names product terms found. b: coefficients product terms. w: variable, x, product term. x: x-variable, , path starts. y: y-variable, , path ends. returns NA product term found along path.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_prod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Product Terms (if Any)\nAlong a Path — get_prod","text":"function used several functions manymome identify product terms along path. possible, done numerically checking whether column dataset product two columns. possible (e.g., \"product term\" \"product\" two latent variables, formed products indicators), requires user specify operator. detailed workflow function can found article https://sfcheung.github.io/manymome/articles/get_prod.html function intended used users. exported advanced users developers can use .","code":""},{"path":"https://sfcheung.github.io/manymome/reference/get_prod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Product Terms (if Any)\nAlong a Path — get_prod","text":"","code":"dat <- modmed_x1m3w4y1 library(lavaan) mod <- \" m1 ~ x   + w1 + x:w1 m2 ~ m1  + w2 + m1:w2 m3 ~ m2 y  ~ m3  + w4 + m3:w4 + x + w3 + x:w3 + x:w4 \" fit <- sem(model = mod,            data = dat,            meanstructure = TRUE,            fixed.x = FALSE)  # One product term get_prod(x = \"x\", y = \"m1\", fit = fit) #> $prod #> [1] \"x:w1\" #>  #> $b #>      x:w1  #> 0.2337967  #>  #> $w #> [1] \"w1\" #>  #> $x #> [1] \"x\" #>  #> $y #> [1] \"m1\" #>  # Two product terms get_prod(x = \"x\", y = \"y\", fit = fit) #> $prod #> [1] \"x:w3\" \"x:w4\" #>  #> $b #>       x:w3       x:w4  #>  0.5576550 -0.4167135  #>  #> $w #> [1] \"w3\" \"w4\" #>  #> $x #> [1] \"x\" #>  #> $y #> [1] \"y\" #>  # No product term get_prod(x = \"m2\", y = \"m3\", fit = fit) #> [1] NA"},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":null,"dir":"Reference","previous_headings":"","what":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"computes index moderated mediation index moderated moderated mediation proposed Hayes (2015, 2018).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"","code":"index_of_mome(   x,   y,   m = NULL,   w = NULL,   fit = NULL,   boot_ci = FALSE,   level = 0.95,   boot_out = NULL,   R = 100,   seed = NULL,   progress = TRUE,   mc_ci = FALSE,   mc_out = NULL,   ci_type = NULL,   ci_out = NULL,   ... )  index_of_momome(   x,   y,   m = NULL,   w = NULL,   z = NULL,   fit = NULL,   boot_ci = FALSE,   level = 0.95,   boot_out = NULL,   R = 100,   seed = NULL,   progress = TRUE,   mc_ci = FALSE,   mc_out = NULL,   ci_type = NULL,   ci_out = NULL,   ... )"},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"x Character. name predictor start path. y Character. name outcome variable end path. m vector variable names mediator(s). path goes first mediator successively last mediator. NULL, default, path goes x y. w Character. name moderator. fit fit object. Can lavaan::lavaan object, list lm() outputs, object created lm2list(). can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). boot_ci Logical. Whether bootstrap confidence interval formed. Default FALSE. level level confidence bootstrap confidence interval. Default .95. boot_out boot_ci TRUE, users can supply pregenerated bootstrap estimates. can output do_boot(). indirect_effect() cond_indirect_effects(), can output previous call cond_indirect_effects(), indirect_effect(), cond_indirect() bootstrap confidence intervals requested. stored estimates reused need bootstrapping . supplied, function try generate fit. R Integer. boot_ci TRUE, boot_out NULL, bootstrap standard errors requested fit lavaan object, function bootstrapping fit. R number bootstrap samples. Default 100. Monte Carlo simulation, number replications. seed bootstrapping Monte Carlo simulation conducted, seed bootstrapping simulation. Default NULL seed set. progress Logical. Display bootstrapping progress . Default TRUE. mc_ci Logical. Whether Monte Carlo confidence interval formed. Default FALSE. mc_out mc_ci TRUE, users can supply pregenerated Monte Carlo estimates. can output do_mc(). indirect_effect() cond_indirect_effects(), can output previous call cond_indirect_effects(), indirect_effect(), cond_indirect() Monte Carlo confidence intervals requested. stored estimates reused need Monte Carlo simulation . supplied, function try generate fit. ci_type type confidence intervals formed. Can either \"boot\" (bootstrapping) \"mc\" (Monte Carlo). supplied NULL, check arguments (e.g, boot_ci mc_ci). supplied, override boot_ci mc_ci. ci_out ci_type supplied, corresponding argument. ci_type \"boot\", argument used boot_out. ci_type \"mc\", argument used mc_out. ... Arguments passed cond_indirect_effects() z Character. name second moderator, computing index moderated moderated mediation.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"returns cond_indirect_diff-class object. class print method (print.cond_indirect_diff()), coef method extracting index (coef.cond_indirect_diff()), confint method extracting confidence interval available (confint.cond_indirect_diff()).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"function index_of_mome() computes index moderated mediation proposed Hayes (2015). supports path model one (one) component path moderated. example, x->m1->m2->y x->m1 moderated w. measures change indirect effect moderator increases one unit. function index_of_momome() computes index moderated moderated mediation proposed Hayes (2018). supports path model, two component paths moderated, one moderator. example, x->m1->m2->y x->m1 moderated w m2->y moderated z. measures change index moderated mediation one moderator moderator increases one unit.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"index_of_mome(): Compute index moderated mediation. index_of_momome(): Compute index moderated moderated mediation.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"Hayes, . F. (2015). index test linear moderated mediation. Multivariate Behavioral Research, 50(1), 1-22. doi:10.1080/00273171.2014.962683 Hayes, . F. (2018). Partial, conditional, moderated moderated mediation: Quantification, inference, interpretation. Communication Monographs, 85(1), 4-40. doi:10.1080/03637751.2017.1352100","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index of Moderated Mediation\nand Index of Moderated Moderated\nMediation — index_of_mome","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 dat$xw1 <- dat$x * dat$w1 mod <- \" m1 ~ a * x  + f * w1 + d * xw1 y  ~ b * m1 + cp * x ind_mome := d * b \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # R should be at least 2000 or even 5000 in real research. # parallel is set to TRUE by default. # Therefore, in research, the argument parallel can be omitted. out_mome <- index_of_mome(x = \"x\", y = \"y\", m = \"m1\", w = \"w1\",                           fit = fit,                           boot_ci = TRUE,                           R = 42,                           seed = 4314,                           parallel = FALSE,                           progress = FALSE) out_mome #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>   [w1] (w1)   ind  CI.lo CI.hi Sig  m1~x  y~m1 #> 1    1    1 0.063 -0.693 0.491     0.697 0.091 #> 2    0    0 0.042 -0.439 0.330     0.463 0.091 #>  #> == Index of Moderated Mediation == #>  #> Levels compared: Row 1 - Row 2 #>  #>       x y Index  CI.lo CI.hi #> Index x y 0.021 -0.254 0.171 #>  #>  - [CI.lo, CI.hi]: 95% percentile confidence interval. #>  coef(out_mome) #>     y~m1~x  #> 0.02126581  # From lavaan print(est[19, ], nd = 8) #>         lhs op rhs    label        est #> 19 ind_mome := d*b ind_mome 0.02126581 confint(out_mome) #>             2.50%    97.50% #> y~m1~x -0.2540199 0.1710191    library(lavaan) dat <- modmed_x1m3w4y1 dat$xw1 <- dat$x * dat$w1 dat$m1w4 <- dat$m1 * dat$w4 mod <- \" m1 ~ a * x  + f1 * w1 + d1 * xw1 y  ~ b * m1 + f4 * w4 + d4 * m1w4 + cp * x ind_momome := d1 * d4 \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # See the example of index_of_mome on how to request # bootstrap confidence interval. out_momome <- index_of_momome(x = \"x\", y = \"y\", m = \"m1\",                               w = \"w1\", z = \"w4\",                               fit = fit) out_momome #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1, w4 #>  Moderator(s) represented by: w1, w4 #>  #>   [w1] [w4] (w1) (w4)    ind  m1~x   y~m1 #> 1    1    1    1    1 -0.119 0.697 -0.172 #> 2    1    0    1    0 -0.070 0.697 -0.101 #> 3    0    1    0    1 -0.079 0.463 -0.172 #> 4    0    0    0    0 -0.047 0.463 -0.101 #>  #> == Index of Moderated Moderated Mediation == #>  #> Levels compared: #> (Row 1 - Row 2) - (Row 3 - Row 4) #>  #>       x y  Index #> Index x y -0.017 #>  #>   coef(out_momome) #>      y~m1~x  #> -0.01659799  print(est[32, ], nd = 8) #>           lhs op   rhs      label         est #> 32 ind_momome := d1*d4 ind_momome -0.01659799"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_effects_from_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","title":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","text":"Create coefficient table point estimates confidence intervals (available) output many_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_effects_from_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","text":"","code":"indirect_effects_from_list(object, add_sig = TRUE, pvalue = FALSE, se = FALSE)"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_effects_from_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","text":"object output indirect_effect() cond_indirect(). add_sig Whether column significance test results added. Default TRUE. pvalue Logical. TRUE, asymmetric p-values based bootstrapping added available. Default FALSE. se Logical. TRUE confidence intervals available, standard errors estimates also added. simply standard deviations bootstrap estimates Monte Carlo simulated values, depending method used form confidence intervals.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_effects_from_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","text":"data frame indirect effect estimates confidence intervals (available). also string column, \"Sig\", #' significant test results add_sig TRUE confidence intervals available.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_effects_from_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","text":"bootstrapping confidence interval requested, method option add p-values computed method presented Asparouhov Muthén (2021). Note p-values asymmetric bootstrap p-values based distribution bootstrap estimates. computed based distribution null hypothesis. p-value , means 100(1 - )% bootstrapping confidence interval one limits equal 0. confidence interval higher confidence level include zero, confidence interval lower confidence level exclude zero.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_effects_from_list.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/indirect_effects_from_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coefficient Table of an 'indirect_list' Class\nObject — indirect_effects_from_list","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE)  # All indirect paths from x to y paths <- all_indirect_paths(fit,                            x = \"x\",                            y = \"y\") paths #> Call:  #> all_indirect_paths(fit = fit, x = \"x\", y = \"y\") #> Path(s):  #>   path                 #> 1 x -> m11 -> m12 -> y #> 2 x -> m11 -> y        #> 3 x -> m12 -> y        #> 4 x -> m2 -> y          # Indirect effect estimates out <- many_indirect_effects(paths,                              fit = fit) out #>  #> ==  Indirect Effect(s)   == #>                        ind #> x -> m11 -> m12 -> y 0.193 #> x -> m11 -> y        0.163 #> x -> m12 -> y        0.059 #> x -> m2 -> y         0.364 #>  #>  - The 'ind' column shows the indirect effects. #>    # Create a data frame of the indirect effect estimates  out_df <- indirect_effects_from_list(out) out_df #>                             ind #> x -> m11 -> m12 -> y 0.19321379 #> x -> m11 -> y        0.16261213 #> x -> m12 -> y        0.05946653 #> x -> m2 -> y         0.36440188"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect Effect (No\nBootstrapping) — indirect_i","title":"Indirect Effect (No\nBootstrapping) — indirect_i","text":"computes indirect effect, optionally conditional value(s) moderator(s) present.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect Effect (No\nBootstrapping) — indirect_i","text":"","code":"indirect_i(   x,   y,   m = NULL,   fit = NULL,   est = NULL,   implied_stats = NULL,   wvalues = NULL,   standardized_x = FALSE,   standardized_y = FALSE,   computation_digits = 5,   prods = NULL,   get_prods_only = FALSE,   data = NULL,   expand = TRUE,   warn = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect Effect (No\nBootstrapping) — indirect_i","text":"x Character. name predictor start path. y Character. name outcome variable end path. m vector variable names mediator(s). path goes first mediator successively last mediator. NULL, default, path goes x y. fit fit object. Currently supports lavaan::lavaan objects. Support lists lm() output implemented high level functions indirect_effect() cond_indirect_effects(). can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). est output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ignored. implied_stats Implied means, variances, covariances observed variables latent variables (), form output lavaan::lavInspect() set \"implied\", means extracted set \"mean.ov\" \"mean.lv\". standard deviations extracted object standardization. Default NULL, implied statistics computed fit required. wvalues numeric vector named elements. names variable names moderators, values values moderators set . Default NULL. standardized_x Logical. Whether x standardized. Default FALSE. standardized_y Logical. Whether y standardized. Default FALSE. computation_digits number digits storing computation text. Default 3. prods product terms found. internal use. get_prods_only TRUE, quit early return product terms found. results can passed prod argument calling function. Default FALSE. internal use. data Data frame (optional). supplied, used identify product terms. internal use. expand Whether products two terms searched. TRUE default. internal use. warn TRUE, default, function warn possible misspecification, setting value moderator moderate one component path. Set FALSE suppress warnings. Suppress moderators omitted intentionally.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect Effect (No\nBootstrapping) — indirect_i","text":"returns indirect-class object. class following methods: coef.indirect(), print.indirect(). confint.indirect() method used called cond_indirect() cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indirect Effect (No\nBootstrapping) — indirect_i","text":"function low-level function called indirect_effect(), cond_indirect_effects(), cond_indirect(), call function multiple times bootstrap confidence interval requested. function usually used directly. exported advanced users developers","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect Effect (No\nBootstrapping) — indirect_i","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x   + b1 * w1 + d1 * x:w1 m2 ~ a2 * m1  + b2 * w2 + d2 * m1:w2 m3 ~ a3 * m2  + b3 * w3 + d3 * m2:w3 y  ~ a4 * m3  + b4 * w4 + d4 * m3:w4 \" fit <- sem(mod, dat, meanstructure = TRUE,            fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  wvalues <- c(w1 = 5, w2 = 4, w3 = 2, w4 = 3)  # Compute the conditional indirect effect by indirect_i() indirect_1 <- indirect_i(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\", \"m3\"), fit = fit,                        wvalues = wvalues)  # Manually compute the conditional indirect effect indirect_2 <- (est[est$label == \"a1\", \"est\"] +                 wvalues[\"w1\"] * est[est$label == \"d1\", \"est\"]) *               (est[est$label == \"a2\", \"est\"] +                 wvalues[\"w2\"] * est[est$label == \"d2\", \"est\"]) *               (est[est$label == \"a3\", \"est\"] +                 wvalues[\"w3\"] * est[est$label == \"d3\", \"est\"]) *               (est[est$label == \"a4\", \"est\"] +                 wvalues[\"w4\"] * est[est$label == \"d4\", \"est\"]) # They should be the same coef(indirect_1) #>      y~x  #> 1.176089  indirect_2 #>       w1  #> 1.176089"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion of Effect Mediated — indirect_proportion","title":"Proportion of Effect Mediated — indirect_proportion","text":"computes proportion effect mediated along pathway.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion of Effect Mediated — indirect_proportion","text":"","code":"indirect_proportion(x, y, m = NULL, fit = NULL)"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion of Effect Mediated — indirect_proportion","text":"x name x variable. Must supplied quoted string. y name y variable. Must supplied quoted string. m vector variable names mediator(s). path goes first mediator successively last mediator. NULL function. fit fit object. Can lavaan::lavaan object list lm() outputs. can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportion of Effect Mediated — indirect_proportion","text":"indirect_proportion class object. list-like object major elements: proportion: proportion effect mediated. x: name x-variable. y: name y-variable. m: character vector mediator(s) along path. path runs first element last element. class print method coef method.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_proportion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proportion of Effect Mediated — indirect_proportion","text":"proportion effect mediated along path x y indirect effect along path divided total effect x y (Alwin & Hauser, 1975). total effect equal sum indirect effects x y direct effect x y. ensure proportion can indeed interpreted proportion, function computes proportion signs indirect direct effects x y (.e., effects positive effects negative).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_proportion.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Proportion of Effect Mediated — indirect_proportion","text":"Alwin, D. F., & Hauser, R. M. (1975). decomposition effects path analysis. American Sociological Review, 40(1), 37. doi:10.2307/2094445","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/indirect_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion of Effect Mediated — indirect_proportion","text":"","code":"library(lavaan) dat <- data_med head(dat) #>           x        m        y       c1       c2 #> 1  9.931992 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150 22.91594 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678 5.770532 #> 4 11.196969 20.01750 25.05038 3.120056 4.654931 #> 5 11.887811 22.08645 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712 mod <- \" m ~ x + c1 + c2 y ~ m + x + c1 + c2 \" fit <- sem(mod, dat, fixed.x = FALSE) out <- indirect_proportion(x = \"x\",                            y = \"y\",                            m = \"m\",                            fit = fit) out #> ==== Proportion of Effect Mediated ==== #>  #> Path: \t\t x -> m -> y  #> Proportion: \t 0.591  #> Indirect Effect: 0.733  #> Total Effect: \t 1.241  #>  #> Note: #> Use coef() to extract the proportion. #>  #> All indirect path(s): #> x -> m -> y"},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","title":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","text":"Generate bootstrap estimates models list 'lm' outputs.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","text":"","code":"lm2boot_out(outputs, R = 100, seed = NULL, progress = TRUE)  lm2boot_out_parallel(   outputs,   R = 100,   seed = NULL,   parallel = FALSE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","text":"outputs list lm class objects, output lm2list() (.e., lm_list-class object). R number bootstrap samples. Default 100. seed seed random resampling. Default NULL. progress Logical. Display progress . Default TRUE. parallel Logical. Whether parallel processing used. Default NULL. ncores Integer. number CPU cores use parallel TRUE. Default number non-logical cores minus one (one minimum). raise error greater number cores detected parallel::detectCores(). ncores set, override make_cluster_args. make_cluster_args named list additional arguments passed parallel::makeCluster(). advanced users. See parallel::makeCluster() details. Default list().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","text":"boot_out-class object can used boot_out argument indirect_effect(), cond_indirect_effects(), related functions forming bootstrapping confidence intervals. object list number elements equal number bootstrap samples. element list parameter estimates sample variances covariances variables bootstrap sample.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","text":"function advanced users. do_boot() function users try first do_boot() general interface input-specific functions like one. nonparametric bootstrapping generate bootstrap estimates regression coefficients regression models list lm() outputs, lm_list-class object created lm2list(). stored estimates can used indirect_effect(), cond_indirect_effects(), related functions forming bootstrapping confidence intervals effects indirect effect conditional indirect effects. approach removes need repeat bootstrapping call indirect_effect(), cond_indirect_effects(), related functions. also ensures set bootstrap samples used subsequent analyses.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","text":"lm2boot_out(): Generate bootstrap estimates using one process (serial, without parallelization). lm2boot_out_parallel(): Generate bootstrap estimates using parallel processing.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Estimates for lm\nOutputs — lm2boot_out","text":"","code":"data(data_med_mod_ab1) dat <- data_med_mod_ab1 lm_m <- lm(m ~ x*w + c1 + c2, dat) lm_y <- lm(y ~ m*w + x + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) # In real research, R should be 2000 or even 5000 # In real research, no need to set progress to FALSE # Progress is displayed by default. lm_boot_out <- lm2boot_out(lm_out, R = 100, seed = 1234,                            progress = FALSE) out <- cond_indirect_effects(wlevels = \"w\",                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = lm_out,                              boot_ci = TRUE,                              boot_out = lm_boot_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.030 0.458 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.079 0.171      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.087 0.098     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":null,"dir":"Reference","previous_headings":"","what":"Join 'lm()' Output to Form an\n'lm_list`-Class Object — lm2list","title":"Join 'lm()' Output to Form an\n'lm_list`-Class Object — lm2list","text":"resulting model can used indirect_effect(), cond_indirect_effects(), cond_indirect() path method, fitted lavaan::sem().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join 'lm()' Output to Form an\n'lm_list`-Class Object — lm2list","text":"","code":"lm2list(...)"},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join 'lm()' Output to Form an\n'lm_list`-Class Object — lm2list","text":"... lm() outputs grouped list.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join 'lm()' Output to Form an\n'lm_list`-Class Object — lm2list","text":"returns lm_list-class object forms path model represented set regression models. class summary method shows summary regression model stored (see summary.lm_list()), print method prints models stored (see print.lm_list()).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join 'lm()' Output to Form an\n'lm_list`-Class Object — lm2list","text":"path model mediation /moderation fitted set regression models using lm(), function can combine object class lm_list represents path model, one fitted structural equation model functions lavaan::sem(). class object can used functions, indirect_effect(), cond_indirect_effects(), cond_indirect() output fitting path model, regression coefficients treated path coefficients. regression outputs combined need meet following requirements: models must connected least one another model. , regression model must either () least predictor outcome variable another model, (b) outcome variable predictor another model. models must fitted sample. implies sample size must analysis.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join 'lm()' Output to Form an\n'lm_list`-Class Object — lm2list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>  summary(lm_serial_parallel) #>  #>  #> Model: #> m11 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  11.4546     1.1258   10.17  < 2e-16 *** #> x             0.8001     0.0953    8.39  4.2e-13 *** #> c1            0.0855     0.1020    0.84    0.404     #> c2           -0.2444     0.1002   -2.44    0.017 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.459. Adjusted R-square = 0.442. F(3, 96) = 27.148, p < .001 #>  #> Model: #> m12 ~ m11 + x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   9.8742     1.5048    6.56  2.8e-09 *** #> m11           0.4652     0.0946    4.92  3.7e-06 *** #> x             0.1146     0.1164    0.98   0.3274     #> c1            0.1934     0.0949    2.04   0.0444 *   #> c2           -0.2848     0.0957   -2.97   0.0037 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.469. Adjusted R-square = 0.446. F(4, 95) = 20.963, p < .001 #>  #> Model: #> m2 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    2.354      1.236    1.91     0.06 .   #> x              0.435      0.105    4.15  7.1e-05 *** #> c1             0.178      0.112    1.59     0.12     #> c2            -0.167      0.110   -1.52     0.13     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.196. Adjusted R-square = 0.171. F(3, 96) = 7.812, p < .001 #>  #> Model: #> y ~ m11 + m12 + m2 + x + c1 + c2 #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.791908   4.613263   -0.39  0.69859     #> m11          0.203249   0.266930    0.76  0.44832     #> m12          0.519112   0.255389    2.03  0.04494 *   #> m2           0.838632   0.217639    3.85  0.00021 *** #> x            0.071421   0.317264    0.23  0.82238     #> c1          -0.000114   0.244934    0.00  0.99963     #> c2          -0.069787   0.253231   -0.28  0.78348     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.315. Adjusted R-square = 0.271. F(6, 93) = 7.133, p < .001  # Compute indirect effect from x to y through m11 and m12 outm11m12 <- cond_indirect(x = \"x\", y = \"y\",                            m = c(\"m11\", \"m12\"),                            fit = lm_serial_parallel) outm11m12 #>  #> == Indirect Effect == #>                                       #>  Path:           x -> m11 -> m12 -> y #>  Indirect Effect 0.193                #>  #> Computation Formula: #>   (b.m11~x)*(b.m12~m11)*(b.y~m12) #> Computation: #>   (0.80006)*(0.46521)*(0.51911) #> Coefficients of Component Paths: #>     Path Coefficient #>    m11~x       0.800 #>  m12~m11       0.465 #>    y~m12       0.519 #>  # Compute indirect effect from x to y # through m11 and m12 with bootstrapping CI # R should be at least 2000 or even 5000 in read study. # In real research, parallel and progress can be omitted. # They are est to TRUE by default. outm11m12 <- cond_indirect(x = \"x\", y = \"y\",                            m = c(\"m11\", \"m12\"),                            fit = lm_serial_parallel,                            boot_ci = TRUE,                            R = 100,                            seed = 1234,                            parallel = FALSE,                            progress = FALSE) outm11m12 #>  #> == Indirect Effect == #>                                           #>  Path:               x -> m11 -> m12 -> y #>  Indirect Effect     0.193                #>  95.0% Bootstrap CI: [-0.110 to 0.487]    #>  #> Computation Formula: #>   (b.m11~x)*(b.m12~m11)*(b.y~m12) #> Computation: #>   (0.80006)*(0.46521)*(0.51911) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>     Path Coefficient #>    m11~x       0.800 #>  m12~m11       0.465 #>    y~m12       0.519 #>"},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":null,"dir":"Reference","previous_headings":"","what":"'lavaan'-class to\n'lm_from_lavaan_list'-Class — lm_from_lavaan_list","title":"'lavaan'-class to\n'lm_from_lavaan_list'-Class — lm_from_lavaan_list","text":"Converts regression models lavaan-class model lm_from_lavaan_list-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'lavaan'-class to\n'lm_from_lavaan_list'-Class — lm_from_lavaan_list","text":"","code":"lm_from_lavaan_list(fit)"},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'lavaan'-class to\n'lm_from_lavaan_list'-Class — lm_from_lavaan_list","text":"fit lavaan-class object, usually output lavaan::lavaan() wrappers.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'lavaan'-class to\n'lm_from_lavaan_list'-Class — lm_from_lavaan_list","text":"lm_from_lavaan_list-class object, list lm_from_lavaan objects. predict-method (predict.lm_from_lavaan_list()) computing predicted values one variable another.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'lavaan'-class to\n'lm_from_lavaan_list'-Class — lm_from_lavaan_list","text":"identifies dependent variables lavaan model creates lm_from_lavaan-class object . advanced helper used plot.cond_indirect_effects(). Exported advanced users developers.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'lavaan'-class to\n'lm_from_lavaan_list'-Class — lm_from_lavaan_list","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) tmp <- data.frame(x = 1, c1 = 2, c2 = 3, m = 4) predict(fit_list, x = \"x\", y = \"y\", m = \"m\", newdata = tmp) #> [1] 0.9728797"},{"path":"https://sfcheung.github.io/manymome/reference/manymome-package.html","id":null,"dir":"Reference","previous_headings":"","what":"manymome: Mediation, Moderation and Moderated-Mediation After Model Fitting — manymome-package","title":"manymome: Mediation, Moderation and Moderated-Mediation After Model Fitting — manymome-package","text":"Computes indirect effects, conditional effects, conditional indirect effects structural equation model path model model fitting, need define user parameters label paths model syntax. Can also form bootstrap confidence intervals bootstrapping reusing bootstrap estimates subsequent computations. Supports bootstrap confidence intervals standardized (partially completely) indirect effects, conditional effects, conditional indirect effects described Cheung (2009) doi:10.3758/BRM.41.2.425  Cheung, Cheung, Lau, Hui, Vong (2022) doi:10.1037/hea0001188 . Model fitting can done structural equation modeling using lavaan() regression using lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/manymome-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"manymome: Mediation, Moderation and Moderated-Mediation After Model Fitting — manymome-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID) Authors: Sing-Hang Cheung (ORCID)","code":""},{"path":"https://sfcheung.github.io/manymome/reference/math_indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Math Operators for\n'indirect'-Class Objects — math_indirect","title":"Math Operators for\n'indirect'-Class Objects — math_indirect","text":"Mathematic operators 'indirect'-class object, output indirect_effect() cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/math_indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Math Operators for\n'indirect'-Class Objects — math_indirect","text":"","code":"# S3 method for indirect +(e1, e2)  # S3 method for indirect -(e1, e2)"},{"path":"https://sfcheung.github.io/manymome/reference/math_indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Math Operators for\n'indirect'-Class Objects — math_indirect","text":"e1 'indirect'-class object. e2 'indirect'-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/math_indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Math Operators for\n'indirect'-Class Objects — math_indirect","text":"'indirect'-class object list effects stored. See indirect_effect() details class.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/math_indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Math Operators for\n'indirect'-Class Objects — math_indirect","text":"now, + operator - operator supported. operators can used estimate test function effects pair variables along different paths. example, can used compute test total effects along different paths. can also used compute test difference effects along two paths. operators check whether operation valid. operation valid two paths start variable, two paths end variable, (c) path appears objects, moderators involved set values objects, bootstrap estimates stored boot_out, , identical. Monte Carlo simulated estimates stored mc_out, , identical.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/math_indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Math Operators for\n'indirect'-Class Objects — math_indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x  + d1 * w1 + e1 * x:w1 m2 ~ m1 + a2 * x y  ~ b1 * m1 + b2 * m2 + cp * x \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit) hi_w1 <- mean(dat$w1) + sd(dat$w1)  # Examples for cond_indirect():  # Conditional effect from x to m1 when w1 is 1 SD above mean out1 <- cond_indirect(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\"),               wvalues = c(w1 = hi_w1), fit = fit) out2 <- cond_indirect(x = \"x\", y = \"y\", m = c(\"m2\"),               wvalues = c(w1 = hi_w1), fit = fit) out3 <- cond_indirect(x = \"x\", y = \"y\",               wvalues = c(w1 = hi_w1), fit = fit)  out12 <- out1 + out2 out12 #>  #> == Conditional Indirect Effect   == #>                                          #>  Path:                x -> m1 -> m2 -> y #>  Path:                x -> m2 -> y       #>  Moderators:          w1                 #>  Function of Effects: 0.082              #>  When:                w1 = 1.228         #>  #> Computation of the Function of Effects: #>  (x->m1->m2->y) #> +(x->m2->y)  #>  out123 <- out1 + out2 + out3 out123 #>  #> == Conditional Indirect Effect   == #>                                          #>  Path:                x -> m1 -> m2 -> y #>  Path:                x -> m2 -> y       #>  Path:                x -> y             #>  Moderators:          w1                 #>  Function of Effects: 0.394              #>  When:                w1 = 1.228         #>  #> Computation of the Function of Effects: #>  ((x->m1->m2->y) #> +(x->m2->y)) #> +(x->y)  #>  coef(out1) + coef(out2) + coef(out3) #>     y~x  #> 0.39405"},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge the Generated Levels of\nModerators — merge_mod_levels","title":"Merge the Generated Levels of\nModerators — merge_mod_levels","text":"Merge levels moderators generated mod_levels() data frame.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge the Generated Levels of\nModerators — merge_mod_levels","text":"","code":"merge_mod_levels(...)"},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge the Generated Levels of\nModerators — merge_mod_levels","text":"... output mod_levels(), list levels generated mod_levels_list().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge the Generated Levels of\nModerators — merge_mod_levels","text":"wlevels-class object, data frame combinations levels, additional attributes levels.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge the Generated Levels of\nModerators — merge_mod_levels","text":"merges levels moderators generated mod_levels() data frame, row represents combination levels. output used cond_indirect_effects(). Users usually need use function cond_indirect_effects() merge levels internally necessary. function used users need customize levels moderator use mod_levels_list() default levels cond_indirect_effects().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge the Generated Levels of\nModerators — merge_mod_levels","text":"","code":"data(data_med_mod_ab) dat <- data_med_mod_ab # Form the levels from a list of lm() outputs lm_m <- lm(m ~ x*w1 + c1 + c2, dat) lm_y <- lm(y ~ m*w2 + x + w1 + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) w1_levels <- mod_levels(lm_out, w = \"w1\") w1_levels #>               w1 #> M+1.0SD 6.173157 #> Mean    5.105602 #> M-1.0SD 4.038047 w2_levels <- mod_levels(lm_out, w = \"w2\") w2_levels #>               w2 #> M+1.0SD 4.040487 #> Mean    3.047789 #> M-1.0SD 2.055091 merge_mod_levels(w1_levels, w2_levels) #>                                w1       w2 #> w1: M+1.0SD; w2: M+1.0SD 6.173157 4.040487 #> w1: M+1.0SD; w2: Mean    6.173157 3.047789 #> w1: M+1.0SD; w2: M-1.0SD 6.173157 2.055091 #> w1: Mean; w2: M+1.0SD    5.105602 4.040487 #> w1: Mean; w2: Mean       5.105602 3.047789 #> w1: Mean; w2: M-1.0SD    5.105602 2.055091 #> w1: M-1.0SD; w2: M+1.0SD 4.038047 4.040487 #> w1: M-1.0SD; w2: Mean    4.038047 3.047789 #> w1: M-1.0SD; w2: M-1.0SD 4.038047 2.055091"},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Levels of Moderators — mod_levels","title":"Create Levels of Moderators — mod_levels","text":"Create levels moderators used indirect_effect(), cond_indirect_effects(), cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Levels of Moderators — mod_levels","text":"","code":"mod_levels(   w,   fit,   w_type = c(\"auto\", \"numeric\", \"categorical\"),   w_method = c(\"sd\", \"percentile\"),   sd_from_mean = c(-1, 0, 1),   percentiles = c(0.16, 0.5, 0.84),   extract_gp_names = TRUE,   prefix = NULL,   values = NULL,   reference_group_label = NULL,   descending = TRUE )  mod_levels_list(   ...,   fit,   w_type = \"auto\",   w_method = \"sd\",   sd_from_mean = NULL,   percentiles = NULL,   extract_gp_names = TRUE,   prefix = NULL,   descending = TRUE,   merge = FALSE )"},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Levels of Moderators — mod_levels","text":"w Character. names moderator. moderator categorical 3 groups, vector indicator variables. fit fit object. Can lavaan::lavaan object list lm() outputs. can also lavaan.mi object returned semTools::runMI() wrapper, semTools::sem.mi(). w_type Character. Whether moderator \"numeric\" variable \"categorical\" variable. \"auto\", function try determine type automatically. w_method Character, either \"sd\" \"percentile\". \"sd\", levels defined distance mean terms standard deviation. \"percentile\", levels defined percentiles. sd_from_mean numeric vector. Specify distance standard deviation mean level. Default c(-1, 0, 1) mod_levels(). mod_levels_list(), default c(-1, 0, 1) one moderator, c(-1, 1) one moderator. Ignored w_method equal \"sd\". percentiles numeric vector. Specify percentile (proportion) level. Default c(.16, .50, .84) mod_levels(), corresponding approximately one standard deviation mean, mean, one standard deviation mean normal distribution. mod_levels_list(), default c(.16, .50, .84) one moderator, c(.16, .84) one moderator. Ignored w_method equal \"percentile\". extract_gp_names Logical. TRUE, default, function try determine name group variable names. prefix Character. extract_gp_names TRUE prefix supplied, removed variable names create group names. Default NULL, function try determine prefix automatically. values numeric moderators, numeric vector. values used override options. categorical moderators, named list numeric vector, vector length equal number indicator variables. vector named, names used label values. example, set list(gp1 = c(0, 0), gp3 = c(0, 1), two levels returned, one named gp1 indicator variables equal 0 0, named gp3 indicator variables equal 0 1. Default NULL. reference_group_label categorical moderator, label reference group (group indicators equal zero) determined, default label \"Reference\". change , set reference_group_label desired label. Ignored values set. descending TRUE (default), rows sorted descending order numerical moderators: highest value first row lowest values last row. user supplied values, first value last row last value first row. FALSE, rows sorted ascending order. ... names moderators variables. categorical variable, vector variable names. merge TRUE, mod_levels_list() call merge_mod_levels() return merged levels. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Levels of Moderators — mod_levels","text":"mod_levels() returns wlevels-class object data frame additional attributes levels. mod_levels_list() returns list wlevels-class objects, wlevels-class object data frame merged levels merge = TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Levels of Moderators — mod_levels","text":"creates values moderator can used compute conditional effect conditional indirect effect. default, numeric moderator, uses one standard deviation mean, mean, one standard deviation mean. percentiles three levels normal distribution (16th, 50th, 84th) can also used. categorical variable, simply collect unique categories data. generated levels used cond_indirect() cond_indirect_effects(). model one moderator, mod_levels_list() can used generate combinations levels. output can passed cond_indirect_effects() compute conditional effects conditional indirect effects combinations.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create Levels of Moderators — mod_levels","text":"mod_levels(): Generate levels one moderator. mod_levels_list(): Generate levels several moderators.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Levels of Moderators — mod_levels","text":"","code":"library(lavaan) data(data_med_mod_ab) dat <- data_med_mod_ab # Form the levels from a list of lm() outputs lm_m <- lm(m ~ x*w1 + c1 + c2, dat) lm_y <- lm(y ~ m*w2 + x + w1 + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) w1_levels <- mod_levels(lm_out, w = \"w1\") w1_levels #>               w1 #> M+1.0SD 6.173157 #> Mean    5.105602 #> M-1.0SD 4.038047 w2_levels <- mod_levels(lm_out, w = \"w2\") w2_levels #>               w2 #> M+1.0SD 4.040487 #> Mean    3.047789 #> M-1.0SD 2.055091 # Indirect effect from x to y through m, at the first levels of w1 and w2 cond_indirect(x = \"x\", y = \"y\", m = \"m\",               fit = lm_out,               wvalues = c(w1 = w1_levels$w1[1],                           w2 = w2_levels$w2[1])) #>  #> == Conditional Indirect Effect   == #>                                                      #>  Path:                        x -> m -> y            #>  Moderators:                  w1, w2                 #>  Conditional Indirect Effect: 0.398                  #>  When:                        w1 = 6.173, w2 = 4.040 #>  #> Computation Formula: #>   (b.m~x + (b.x:w1)*(w1))*(b.y~m + (b.m:w2)*(w2)) #> Computation: #>   ((-0.66304) + (0.20389)*(6.17316))*((-0.14996) + (0.20267)*(4.04049)) #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>   m~x              0.596               -0.663 #>   y~m              0.669               -0.150 #>  # Can form the levels based on percentiles w1_levels2 <- mod_levels(lm_out, w = \"w1\", w_method = \"percentile\") w1_levels2 #>           w1 #> 84% 6.207972 #> 50% 5.215974 #> 16% 3.932444 # Form the levels from a lavaan output # Compute the product terms before fitting the model dat$mw2 <- dat$m * dat$w2 mod <- \" m ~ x + w1 + x:w1 + c1 + c2 y ~ m + x + w1 + w2 + mw2 + c1 + c2 \" fit <- sem(mod, dat, fixed.x = FALSE) cond_indirect(x = \"x\", y = \"y\", m = \"m\",               fit = fit,               wvalues = c(w1 = w1_levels$w1[1],                           w2 = w2_levels$w2[1])) #>  #> == Conditional Indirect Effect   == #>                                                      #>  Path:                        x -> m -> y            #>  Moderators:                  w1, w2                 #>  Conditional Indirect Effect: 0.398                  #>  When:                        w1 = 6.173, w2 = 4.040 #>  #> Computation Formula: #>   (b.m~x + (b.x:w1)*(w1))*(b.y~m + (b.mw2)*(w2)) #> Computation: #>   ((-0.66304) + (0.20389)*(6.17316))*((-0.14996) + (0.20267)*(4.04049)) #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>   m~x              0.596               -0.663 #>   y~m              0.669               -0.150 #>  # Can pass all levels to cond_indirect_effects() # First merge the levels by merge_mod_levels() w1w2_levels <- merge_mod_levels(w1_levels, w2_levels) cond_indirect_effects(x = \"x\", y = \"y\", m = \"m\",                       fit = fit,                       wlevels = w1w2_levels) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.398 0.596 0.669 #> 2 M+1.0SD Mean    6.173 3.048 0.279 0.596 0.468 #> 3 M+1.0SD M-1.0SD 6.173 2.055 0.159 0.596 0.267 #> 4 Mean    M+1.0SD 5.106 4.040 0.253 0.378 0.669 #> 5 Mean    Mean    5.106 3.048 0.177 0.378 0.468 #> 6 Mean    M-1.0SD 5.106 2.055 0.101 0.378 0.267 #> 7 M-1.0SD M+1.0SD 4.038 4.040 0.107 0.160 0.669 #> 8 M-1.0SD Mean    4.038 3.048 0.075 0.160 0.468 #> 9 M-1.0SD M-1.0SD 4.038 2.055 0.043 0.160 0.267 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>      # mod_levels_list() forms a combinations of levels in one call # It returns a list, by default. # Form the levels from a list of lm() outputs # \"merge = TRUE\" is optional. cond_indirect_effects will merge the levels # automatically. w1w2_levels <- mod_levels_list(\"w1\", \"w2\", fit = fit, merge = TRUE) w1w2_levels #>                                w1       w2 #> w1: M+1.0SD; w2: M+1.0SD 6.173157 4.040487 #> w1: M+1.0SD; w2: M-1.0SD 6.173157 2.055091 #> w1: M-1.0SD; w2: M+1.0SD 4.038047 4.040487 #> w1: M-1.0SD; w2: M-1.0SD 4.038047 2.055091 cond_indirect_effects(x = \"x\", y = \"y\", m = \"m\",                       fit = fit, wlevels = w1w2_levels) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.398 0.596 0.669 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.159 0.596 0.267 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.107 0.160 0.669 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.043 0.160 0.267 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>  # Can work without merge = TRUE: w1w2_levels <- mod_levels_list(\"w1\", \"w2\", fit = fit) w1w2_levels #> [[1]] #>               w1 #> M+1.0SD 6.173157 #> M-1.0SD 4.038047 #>  #> [[2]] #>               w2 #> M+1.0SD 4.040487 #> M-1.0SD 2.055091 #>  cond_indirect_effects(x = \"x\", y = \"y\", m = \"m\",                       fit = fit, wlevels = w1w2_levels) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditional on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.398 0.596 0.669 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.159 0.596 0.267 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.107 0.160 0.669 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.043 0.160 0.267 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/modmed_x1m3w4y1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Moderated\nSerial Mediation — modmed_x1m3w4y1","title":"Sample Dataset: Moderated\nSerial Mediation — modmed_x1m3w4y1","text":"Generated serial mediation model one predictor, three mediators, one outcome variable, one moderator stage.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/modmed_x1m3w4y1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Moderated\nSerial Mediation — modmed_x1m3w4y1","text":"","code":"modmed_x1m3w4y1"},{"path":"https://sfcheung.github.io/manymome/reference/modmed_x1m3w4y1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Moderated\nSerial Mediation — modmed_x1m3w4y1","text":"data frame 200 rows 11 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. w3 Moderator 3. Numeric. w4 Moderator 4. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. m3 Mediator 3. Numeric. y Outcome variable. Numeric. gp Three values: \"earth\", \"mars\", \"venus\". String. city Four values: \"alpha\", \"beta\", \"gamma\", \"sigma\". String.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Conditional Effects — plot.cond_indirect_effects","title":"Plot Conditional Effects — plot.cond_indirect_effects","text":"Plot conditional effects different levels moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Conditional Effects — plot.cond_indirect_effects","text":"","code":"# S3 method for cond_indirect_effects plot(   x,   x_label,   w_label = \"Moderator(s)\",   y_label,   title,   x_from_mean_in_sd = 1,   x_method = c(\"sd\", \"percentile\"),   x_percentiles = c(0.16, 0.84),   x_sd_to_percentiles = NA,   note_standardized = TRUE,   no_title = FALSE,   line_width = 1,   point_size = 5,   graph_type = c(\"default\", \"tumble\"),   ... )"},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Conditional Effects — plot.cond_indirect_effects","text":"x output cond_indirect_effects(). (Named x required naming arguments plot generic function.) x_label label X-axis. Default value predictor output cond_indirect_effects(). w_label label legend lines. Default \"Moderator(s)\". y_label label Y-axis. Default name response variable model. title title graph. supplied, generated variable names labels (x_label, y_label, w_label). \"\", title printed. can used plot manuscript submission figures required titles. x_from_mean_in_sd many SD mean used define \"low\" \"high\" focal variable. Default 1. x_method define \"high\" \"low\" focal variable levels. Default terms standard deviation focal variable, \"sd\". equal \"percentile\", percentiles focal variable dataset used. x_percentiles x_method \"percentile\", argument specifies two percentiles used, divided 100. must vector two numbers. default c(.16, .84), 16th 84th percentiles, corresponds approximately one SD mean normal distribution, respectively. x_sd_to_percentiles x_method \"percentile\" argument set number, number used determine percentiles used. lower percentile percentile normal distribution x_sd_to_percentiles SD mean. upper percentile percentile normal distribution x_sd_to_percentiles SD mean. Therefore, x_sd_to_percentiles set 1, lower upper percentiles 16th 84th, respectively. Default NA. note_standardized TRUE, check whether variable SD nearly equal one. yes, report plot. Default TRUE. no_title TRUE, title suppressed. Default FALSE. line_width width lines used ggplot2::geom_segment(). Default 1. point_size size points used ggplot2::geom_point(). Default 5. graph_type \"default\", typical line-graph equal end-points plotted. \"tubmle\", tumble graph proposed Bodner (2016) plotted. Default \"default\". ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Conditional Effects — plot.cond_indirect_effects","text":"ggplot2 graph. Plotted assigned name. can modified like usual ggplot2 graph.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Conditional Effects — plot.cond_indirect_effects","text":"function plot method output cond_indirect_effects(). use levels moderators output. plots conditional effect x y model different levels moderators. support conditional indirect effects. one mediators x, raise error.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Conditional Effects — plot.cond_indirect_effects","text":"Bodner, T. E. (2016). Tumble graphs: Avoiding misleading end point extrapolation graphing interactions moderated multiple regression analysis. Journal Educational Behavioral Statistics, 41(6), 593-604. doi:10.3102/1076998616657080","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Conditional Effects — plot.cond_indirect_effects","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 n <- nrow(dat) set.seed(860314) dat$gp <- sample(c(\"gp1\", \"gp2\", \"gp3\"), n, replace = TRUE) dat <- cbind(dat, factor2var(dat$gp, prefix = \"gp\", add_rownames = FALSE))  # Categorical moderator  mod <- \" m3 ~ m1 + x + gpgp2 + gpgp3 + x:gpgp2 + x:gpgp3 y ~ m2 + m3 + x \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE) out_mm_1 <- mod_levels(c(\"gpgp2\", \"gpgp3\"),                        sd_from_mean = c(-1, 1),                        fit = fit) out_1 <- cond_indirect_effects(wlevels = out_mm_1, x = \"x\", y = \"m3\", fit = fit) plot(out_1)  plot(out_1, graph_type = \"tumble\")   # Numeric moderator  dat <- modmed_x1m3w4y1 mod2 <- \" m3 ~ m1 + x + w1 + x:w1 y ~ m3 + x \" fit2 <- sem(mod2, dat, meanstructure = TRUE, fixed.x = FALSE) out_mm_2 <- mod_levels(\"w1\",                        w_method = \"percentile\",                        percentiles = c(.16, .84),                        fit = fit2) out_mm_2 #>            w1 #> 84%  1.157084 #> 16% -0.626876 out_2 <- cond_indirect_effects(wlevels = out_mm_2, x = \"x\", y = \"m3\", fit = fit2) plot(out_2)  plot(out_2, graph_type = \"tumble\")"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted Values of a\n'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","title":"Predicted Values of a\n'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"Compute predicted values based model stored 'lm_from_lavaan`-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted Values of a\n'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"","code":"# S3 method for lm_from_lavaan predict(object, newdata, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted Values of a\n'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"object 'lm_from_lavaan'-class object. newdata Required. data frame new data. must data frame. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted Values of a\n'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"numeric vector predicted values, length equal number rows user-supplied data.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted Values of a\n'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"lm_from_lavaan-class method converts regression model variable lavaan model formula object. function uses stored model compute predicted values using user-supplied data. advanced helper used plot.cond_indirect_effects(). Exported advanced users developers.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted Values of a\n'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) tmp <- data.frame(x = 1, c1 = 2, c2 = 3, m = 4) predict(fit_list$m, newdata = tmp) #> [1] 0.8250255 predict(fit_list$y, newdata = tmp) #> [1] 3.464241"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted Values of an\n'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","title":"Predicted Values of an\n'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"computes predicted values based models stored 'lm_from_lavaan_list`-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted Values of an\n'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"","code":"# S3 method for lm_from_lavaan_list predict(object, x = NULL, y = NULL, m = NULL, newdata, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted Values of an\n'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"object 'lm_from_lavaan'-class object. x variable name start path. y variable name end path. m Optional. mediator(s) x y. numeric vector names mediators. path goes first element last element. example, m = c(\"m1\", \"m2\"), path x -> m1 -> m2 -> y. newdata Required. data frame new data. must data frame. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted Values of an\n'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"numeric vector predicted values, length equal number rows user-supplied data.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted Values of an\n'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"lm_from_lavaan_list-class object list lm_from_lavaan-class objects. advanced helper used plot.cond_indirect_effects(). Exported advanced users developers.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted Values of an\n'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) tmp <- data.frame(x = 1, c1 = 2, c2 = 3, m = 4) predict(fit_list, x = \"x\", y = \"y\", m = \"m\", newdata = tmp) #> [1] 0.9728797"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted Values of an\n'lm_list'-Class Object — predict.lm_list","title":"Predicted Values of an\n'lm_list'-Class Object — predict.lm_list","text":"Compute predicted values based models stored 'lm_list`-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted Values of an\n'lm_list'-Class Object — predict.lm_list","text":"","code":"# S3 method for lm_list predict(object, x = NULL, y = NULL, m = NULL, newdata, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted Values of an\n'lm_list'-Class Object — predict.lm_list","text":"object 'lm_list'-class object. x variable name start path. y variable name end path. m Optional. mediator(s) x y. numeric vector names mediators. path goes first element last element. example, m = c(\"m1\", \"m2\"), path x -> m1 -> m2 -> y. newdata Required. data frame new data. must data frame. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted Values of an\n'lm_list'-Class Object — predict.lm_list","text":"numeric vector predicted values, length equal number rows user-supplied data.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted Values of an\n'lm_list'-Class Object — predict.lm_list","text":"lm_list-class object list lm-class objects, function similar stats::predict() method lm() works system defined list regression models. advanced helper used functions package. Exported advanced users.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted Values of an\n'lm_list'-Class Object — predict.lm_list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>  summary(lm_serial_parallel) #>  #>  #> Model: #> m11 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  11.4546     1.1258   10.17  < 2e-16 *** #> x             0.8001     0.0953    8.39  4.2e-13 *** #> c1            0.0855     0.1020    0.84    0.404     #> c2           -0.2444     0.1002   -2.44    0.017 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.459. Adjusted R-square = 0.442. F(3, 96) = 27.148, p < .001 #>  #> Model: #> m12 ~ m11 + x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   9.8742     1.5048    6.56  2.8e-09 *** #> m11           0.4652     0.0946    4.92  3.7e-06 *** #> x             0.1146     0.1164    0.98   0.3274     #> c1            0.1934     0.0949    2.04   0.0444 *   #> c2           -0.2848     0.0957   -2.97   0.0037 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.469. Adjusted R-square = 0.446. F(4, 95) = 20.963, p < .001 #>  #> Model: #> m2 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    2.354      1.236    1.91     0.06 .   #> x              0.435      0.105    4.15  7.1e-05 *** #> c1             0.178      0.112    1.59     0.12     #> c2            -0.167      0.110   -1.52     0.13     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.196. Adjusted R-square = 0.171. F(3, 96) = 7.812, p < .001 #>  #> Model: #> y ~ m11 + m12 + m2 + x + c1 + c2 #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.791908   4.613263   -0.39  0.69859     #> m11          0.203249   0.266930    0.76  0.44832     #> m12          0.519112   0.255389    2.03  0.04494 *   #> m2           0.838632   0.217639    3.85  0.00021 *** #> x            0.071421   0.317264    0.23  0.82238     #> c1          -0.000114   0.244934    0.00  0.99963     #> c2          -0.069787   0.253231   -0.28  0.78348     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.315. Adjusted R-square = 0.271. F(6, 93) = 7.133, p < .001 newdat <- data_serial_parallel[3:5, ] predict(lm_serial_parallel,         x = \"x\",         y = \"y\",         m = \"m2\",         newdata = newdat) #> [1] 16.24671 19.60951 16.58806"},{"path":"https://sfcheung.github.io/manymome/reference/print.all_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Print 'all_paths' Class Object — print.all_paths","title":"Print 'all_paths' Class Object — print.all_paths","text":"Print content 'all_paths'-class object, can generated all_indirect_paths().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.all_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print 'all_paths' Class Object — print.all_paths","text":"","code":"# S3 method for all_paths print(x, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.all_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print 'all_paths' Class Object — print.all_paths","text":"x 'all_paths'-class object. ... Optional arguments.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.all_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print 'all_paths' Class Object — print.all_paths","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.all_paths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print 'all_paths' Class Object — print.all_paths","text":"function used print paths identified readable format.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/print.all_paths.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print 'all_paths' Class Object — print.all_paths","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.all_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print 'all_paths' Class Object — print.all_paths","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE) # All indirect paths out1 <- all_indirect_paths(fit) out1 #> Call:  #> all_indirect_paths(fit = fit) #> Path(s):  #>    path                  #> 1  m11 -> m12 -> y       #> 2  x -> m11 -> m12       #> 3  x -> m11 -> m12 -> y  #> 4  x -> m11 -> y         #> 5  x -> m12 -> y         #> 6  x -> m2 -> y          #> 7  c1 -> m11 -> m12      #> 8  c1 -> m11 -> m12 -> y #> 9  c1 -> m11 -> y        #> 10 c1 -> m12 -> y        #> 11 c1 -> m2 -> y         #> 12 c2 -> m11 -> m12      #> 13 c2 -> m11 -> m12 -> y #> 14 c2 -> m11 -> y        #> 15 c2 -> m12 -> y        #> 16 c2 -> m2 -> y"},{"path":"https://sfcheung.github.io/manymome/reference/print.boot_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a boot_out-Class\nObject — print.boot_out","title":"Print a boot_out-Class\nObject — print.boot_out","text":"Print content output do_boot() related functions.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.boot_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a boot_out-Class\nObject — print.boot_out","text":"","code":"# S3 method for boot_out print(x, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.boot_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a boot_out-Class\nObject — print.boot_out","text":"x output do_boot(), boot_out-class object returned similar functions. ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.boot_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a boot_out-Class\nObject — print.boot_out","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.boot_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a boot_out-Class\nObject — print.boot_out","text":"","code":"data(data_med_mod_ab1) dat <- data_med_mod_ab1 lm_m <- lm(m ~ x*w + c1 + c2, dat) lm_y <- lm(y ~ m*w + x + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) # In real research, R should be 2000 or even 5000 # In real research, no need to set parallel to FALSE # In real research, no need to set progress to FALSE # Progress is displayed by default. lm_boot_out <- do_boot(lm_out, R = 100,                        seed = 1234,                        progress = FALSE,                        parallel = FALSE) # Print the output of do_boot() lm_boot_out #>  #> == A 'boot_out' class object == #>  #> Number of bootstrap samples: 100  #> Number of cases in each bootstrap sample: 100  #> (Missing data, if any, is ignored in the count.) #> Column names in data: #> [1] m   x   w   c1  c2  x:w y   m:w #> (Note: May contain derived terms such as product terms.) #>   library(lavaan) data(data_med_mod_ab1) dat <- data_med_mod_ab1 dat$\"x:w\" <- dat$x * dat$w dat$\"m:w\" <- dat$m * dat$w mod <- \" m ~ x + w + x:w + c1 + c2 y ~ m + w + m:w + x + c1 + c2 \" fit <- sem(model = mod, data = dat, fixed.x = FALSE,            se = \"none\", baseline = FALSE) # In real research, R should be 2000 or even 5000 # In real research, no need to set progress to FALSE # In real research, no need to set parallel to FALSE # Progress is displayed by default. fit_boot_out <- do_boot(fit = fit,                         R = 40,                         seed = 1234,                         parallel = FALSE,                         progress = FALSE) # Print the output of do_boot() fit_boot_out #>  #> == A 'boot_out' class object == #>  #> Number of bootstrap samples: 40  #> Column names in data: #> [1] m   y   m:w x   w   x:w c1  c2  #> (Note: May contain derived terms such as product terms.) #>"},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Output of\n'cond_indirect_diff' — print.cond_indirect_diff","title":"Print the Output of\n'cond_indirect_diff' — print.cond_indirect_diff","text":"Print output cond_indirect_diff().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Output of\n'cond_indirect_diff' — print.cond_indirect_diff","text":"","code":"# S3 method for cond_indirect_diff print(x, digits = 3, pvalue = FALSE, pvalue_digits = 3, se = FALSE, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Output of\n'cond_indirect_diff' — print.cond_indirect_diff","text":"x output cond_indirect_diff(). digits number decimal places printout. pvalue Logical. TRUE, asymmetric p-value based bootstrapping printed available. Default FALSE. pvalue_digits Number decimal places display p-value. Default 3. se Logical. TRUE confidence intervals available, standard errors estimates also printed. simply standard deviations bootstrap estimates Monte Carlo simulated values, depending method used form confidence intervals. ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Output of\n'cond_indirect_diff' — print.cond_indirect_diff","text":"returns x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print the Output of\n'cond_indirect_diff' — print.cond_indirect_diff","text":"print method cond_indirect_diff-class object. bootstrapping confidence interval requested, method option print p-value computed method presented Asparouhov Muthén (2021). Note p-value asymmetric bootstrap p-value based distribution bootstrap estimates. computed based distribution null hypothesis. p-value , means 100(1 - )% bootstrapping confidence interval one limits equal 0. confidence interval higher confidence level include zero, confidence interval lower confidence level exclude zero.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_diff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print the Output of\n'cond_indirect_diff' — print.cond_indirect_diff","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","title":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"Print content output cond_indirect_effects()","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"","code":"# S3 method for cond_indirect_effects print(   x,   digits = 3,   annotation = TRUE,   pvalue = FALSE,   pvalue_digits = 3,   se = FALSE,   ... )"},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"x output cond_indirect_effects(). digits Number digits display. Default 3. annotation Logical. Whether annotation table effects printed. Default TRUE. pvalue Logical. TRUE, asymmetric p-values based bootstrapping printed available. Default FALSE. pvalue_digits Number decimal places display p-values. Default 3. se Logical. TRUE confidence intervals available, standard errors estimates also printed. simply standard deviations bootstrap estimates Monte Carlo simulated values, depending method used form confidence intervals. ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"print method cond_indirect_effects-class object. bootstrapping confidence intervals requested, method option print p-values computed method presented Asparouhov Muthén (2021). Note p-values asymmetric bootstrap p-values based distribution bootstrap estimates. computed based distribution null hypothesis. p-value , means 100(1 - )% bootstrapping confidence interval one limits equal 0. confidence interval higher confidence level include zero, confidence interval lower confidence level exclude zero.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a\n'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x  + d1 * w1 + e1 * x:w1 m2 ~ a2 * x y  ~ b1 * m1 + b2 * m2 + cp * x \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE)  # Conditional effects from x to m1 when w1 is equal to each of the default levels cond_indirect_effects(x = \"x\", y = \"m1\",                       wlevels = \"w1\", fit = fit) #>  #> == Conditional effects == #>  #>  Path: x -> m1 #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  m1~x #> 1 M+1.0SD  1.228 0.750 0.750 #> 2 Mean     0.259 0.523 0.523 #> 3 M-1.0SD -0.710 0.297 0.297 #>  #>  - The 'ind' column shows the  effects. #>  - ‘m1~x’ is/are the path coefficient(s) along the path conditional on #>    the moderators. #>   # Conditional Indirect effect from x1 through m1 to y, # when w1 is equal to each of the default levels out <- cond_indirect_effects(x = \"x\", y = \"y\", m = \"m1\",                       wlevels = \"w1\", fit = fit) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)    ind  m1~x   y~m1 #> 1 M+1.0SD  1.228 -0.031 0.750 -0.042 #> 2 Mean     0.259 -0.022 0.523 -0.042 #> 3 M-1.0SD -0.710 -0.012 0.297 -0.042 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>   print(out, digits = 5) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]     (w1)      ind    m1~x     y~m1 #> 1 M+1.0SD  1.22806 -0.03147 0.74988 -0.04197 #> 2 Mean     0.25900 -0.02196 0.52332 -0.04197 #> 3 M-1.0SD -0.71006 -0.01246 0.29676 -0.04197 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>   print(out, annotation = FALSE) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)    ind  m1~x   y~m1 #> 1 M+1.0SD  1.228 -0.031 0.750 -0.042 #> 2 Mean     0.259 -0.022 0.523 -0.042 #> 3 M-1.0SD -0.710 -0.012 0.297 -0.042"},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'indirect' Class\nObject — print.indirect","title":"Print an 'indirect' Class\nObject — print.indirect","text":"Print content output indirect_effect() cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'indirect' Class\nObject — print.indirect","text":"","code":"# S3 method for indirect print(x, digits = 3, pvalue = FALSE, pvalue_digits = 3, se = FALSE, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'indirect' Class\nObject — print.indirect","text":"x output indirect_effect() cond_indirect(). digits Number digits display. Default 3. pvalue Logical. TRUE, asymmetric p-value based bootstrapping printed available. pvalue_digits Number decimal places display p-value. Default 3. se Logical. TRUE confidence interval available, standard error estimate also printed. simply standard deviation bootstrap estimates Monte Carlo simulated values, depending method used form confidence interval. ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'indirect' Class\nObject — print.indirect","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'indirect' Class\nObject — print.indirect","text":"print method indirect-class object. bootstrapping confidence interval requested, method option print p-value computed method presented Asparouhov Muthén (2021). Note p-value asymmetric bootstrap p-value based distribution bootstrap estimates. computed based distribution null hypothesis. p-value , means 100(1 - )% bootstrapping confidence interval one limits equal 0. confidence interval higher confidence level include zero, confidence interval lower confidence level exclude zero. recommend using confidence interval directly. Therefore, p-value printed default. Nevertheless, users need can request setting pvalue TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print an 'indirect' Class\nObject — print.indirect","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'indirect' Class\nObject — print.indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x   + b1 * w1 + d1 * x:w1 m2 ~ a2 * m1  + b2 * w2 + d2 * m1:w2 m3 ~ a3 * m2  + b3 * w3 + d3 * m2:w3 y  ~ a4 * m3  + b4 * w4 + d4 * m3:w4 \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE,            se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  wvalues <- c(w1 = 5, w2 = 4, w3 = 2, w4 = 3)  indirect_1 <- cond_indirect(x = \"x\", y = \"y\",                             m = c(\"m1\", \"m2\", \"m3\"),                             fit = fit,                             wvalues = wvalues) indirect_1 #>  #> == Conditional Indirect Effect   == #>                                                                              #>  Path:                        x -> m1 -> m2 -> m3 -> y                       #>  Moderators:                  w1, w2, w3, w4                                 #>  Conditional Indirect Effect: 1.176                                          #>  When:                        w1 = 5.000, w2 = 4.000, w3 = 2.000, w4 = 3.000 #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1))*(b.m2~m1 + (b.m1:w2)*(w2))*(b.m3~m2 + (b.m2:w3)*(w3))*(b.y~m3 + (b.m3:w4)*(w4)) #> Computation: #>   ((0.46277) + (0.23380)*(5.00000))*((0.36130) + (0.13284)*(4.00000))*((0.68691) + (0.10880)*(2.00000))*((0.40487) + (0.16260)*(3.00000)) #> Coefficients of Component Paths: #>   Path Conditional Effect Original Coefficient #>   m1~x              1.632                0.463 #>  m2~m1              0.893                0.361 #>  m3~m2              0.905                0.687 #>   y~m3              0.893                0.405 #>   dat <- modmed_x1m3w4y1 mod2 <- \" m1 ~ a1 * x m2 ~ a2 * m1 m3 ~ a3 * m2 y  ~ a4 * m3 + x \" fit2 <- sem(mod2, dat,             meanstructure = TRUE, fixed.x = FALSE,             se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  indirect_2 <- indirect_effect(x = \"x\", y = \"y\",                               m = c(\"m1\", \"m2\", \"m3\"),                               fit = fit2) indirect_2 #>  #> == Indirect Effect == #>                                           #>  Path:           x -> m1 -> m2 -> m3 -> y #>  Indirect Effect 0.071                    #>  #> Computation Formula: #>   (b.m1~x)*(b.m2~m1)*(b.m3~m2)*(b.y~m3) #> Computation: #>   (0.52252)*(0.39883)*(0.80339)*(0.42610) #> Coefficients of Component Paths: #>   Path Coefficient #>   m1~x       0.523 #>  m2~m1       0.399 #>  m3~m2       0.803 #>   y~m3       0.426 #>  print(indirect_2, digits = 5) #>  #> == Indirect Effect == #>                                           #>  Path:           x -> m1 -> m2 -> m3 -> y #>  Indirect Effect 0.07134                  #>  #> Computation Formula: #>   (b.m1~x)*(b.m2~m1)*(b.m3~m2)*(b.y~m3) #> Computation: #>   (0.52252)*(0.39883)*(0.80339)*(0.42610) #> Coefficients of Component Paths: #>   Path Coefficient #>   m1~x     0.52252 #>  m2~m1     0.39883 #>  m3~m2     0.80339 #>   y~m3     0.42610 #>"},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'indirect_list' Class\nObject — print.indirect_list","title":"Print an 'indirect_list' Class\nObject — print.indirect_list","text":"Print content output many_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'indirect_list' Class\nObject — print.indirect_list","text":"","code":"# S3 method for indirect_list print(   x,   digits = 3,   annotation = TRUE,   pvalue = FALSE,   pvalue_digits = 3,   se = FALSE,   ... )"},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'indirect_list' Class\nObject — print.indirect_list","text":"x output many_indirect_effects(). digits Number digits display. Default 3. annotation Logical. Whether annotation table effects printed. Default TRUE. pvalue Logical. TRUE, asymmetric p-values based bootstrapping printed available. pvalue_digits Number decimal places display p-values. Default 3. se Logical. TRUE confidence intervals available, standard errors estimates also printed. simply standard deviations bootstrap estimates Monte Carlo simulated values, depending method used form confidence intervals. ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'indirect_list' Class\nObject — print.indirect_list","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'indirect_list' Class\nObject — print.indirect_list","text":"print method indirect_list-class object. bootstrapping confidence interval requested, method option print p-value computed method presented Asparouhov Muthén (2021). Note p-value asymmetric bootstrap p-value based distribution bootstrap estimates. computed based distribution null hypothesis. p-value , means 100(1 - )% bootstrapping confidence interval one limits equal 0. confidence interval higher confidence level include zero, confidence interval lower confidence level exclude zero.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_list.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print an 'indirect_list' Class\nObject — print.indirect_list","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'indirect_list' Class\nObject — print.indirect_list","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE) # All indirect paths from x to y paths <- all_indirect_paths(fit,                            x = \"x\",                            y = \"y\") paths #> Call:  #> all_indirect_paths(fit = fit, x = \"x\", y = \"y\") #> Path(s):  #>   path                 #> 1 x -> m11 -> m12 -> y #> 2 x -> m11 -> y        #> 3 x -> m12 -> y        #> 4 x -> m2 -> y         # Indirect effect estimates out <- many_indirect_effects(paths,                              fit = fit) out #>  #> ==  Indirect Effect(s)   == #>                        ind #> x -> m11 -> m12 -> y 0.193 #> x -> m11 -> y        0.163 #> x -> m12 -> y        0.059 #> x -> m2 -> y         0.364 #>  #>  - The 'ind' column shows the indirect effects. #>"},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_proportion.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an 'indirect_proportion'-Class\nObject — print.indirect_proportion","title":"Print an 'indirect_proportion'-Class\nObject — print.indirect_proportion","text":"Print content 'indirect_proportion'-class object, output indirect_proportion().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_proportion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an 'indirect_proportion'-Class\nObject — print.indirect_proportion","text":"","code":"# S3 method for indirect_proportion print(x, digits = 3, annotation = TRUE, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_proportion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an 'indirect_proportion'-Class\nObject — print.indirect_proportion","text":"x 'indirect_proportion'-class object. digits Number digits display. Default 3. annotation Logical. Whether additional information printed. Default TRUE. ... Optional arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_proportion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an 'indirect_proportion'-Class\nObject — print.indirect_proportion","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_proportion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print an 'indirect_proportion'-Class\nObject — print.indirect_proportion","text":"print method indirect_proportion-class object, produced indirect_proportion(). addition proportion effect mediated, also prints additional information path proportion computed, indirect path(s) x-variable y-variable. get proportion scalar, use coef method indirect_proportion objects.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect_proportion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an 'indirect_proportion'-Class\nObject — print.indirect_proportion","text":"","code":"library(lavaan) dat <- data_med head(dat) #>           x        m        y       c1       c2 #> 1  9.931992 17.89644 20.73893 1.426513 6.103290 #> 2  8.331493 17.92150 22.91594 2.940388 3.832698 #> 3 10.327471 17.83178 22.14201 3.012678 5.770532 #> 4 11.196969 20.01750 25.05038 3.120056 4.654931 #> 5 11.887811 22.08645 28.47312 4.440018 3.959033 #> 6  8.198297 16.95198 20.73549 2.495083 3.763712 mod <- \" m ~ x + c1 + c2 y ~ m + x + c1 + c2 \" fit <- sem(mod, dat, fixed.x = FALSE) out <- indirect_proportion(x = \"x\",                            y = \"y\",                            m = \"m\",                            fit = fit) out #> ==== Proportion of Effect Mediated ==== #>  #> Path: \t\t x -> m -> y  #> Proportion: \t 0.591  #> Indirect Effect: 0.733  #> Total Effect: \t 1.241  #>  #> Note: #> Use coef() to extract the proportion. #>  #> All indirect path(s): #> x -> m -> y print(out, digits = 5) #> ==== Proportion of Effect Mediated ==== #>  #> Path: \t\t x -> m -> y  #> Proportion: \t 0.59095  #> Indirect Effect: 0.73344  #> Total Effect: \t 1.24111  #>  #> Note: #> Use coef() to extract the proportion. #>  #> All indirect path(s): #> x -> m -> y"},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an lm_list-Class\nObject — print.lm_list","title":"Print an lm_list-Class\nObject — print.lm_list","text":"Print content output lm2list().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an lm_list-Class\nObject — print.lm_list","text":"","code":"# S3 method for lm_list print(x, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an lm_list-Class\nObject — print.lm_list","text":"x output lm2list(). ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an lm_list-Class\nObject — print.lm_list","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an lm_list-Class\nObject — print.lm_list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>"},{"path":"https://sfcheung.github.io/manymome/reference/print.mc_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a mc_out-Class\nObject — print.mc_out","title":"Print a mc_out-Class\nObject — print.mc_out","text":"Print content output do_mc() related functions.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.mc_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a mc_out-Class\nObject — print.mc_out","text":"","code":"# S3 method for mc_out print(x, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.mc_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a mc_out-Class\nObject — print.mc_out","text":"x output do_mc(), mc_out-class object returned similar functions. ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.mc_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a mc_out-Class\nObject — print.mc_out","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.mc_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a mc_out-Class\nObject — print.mc_out","text":"","code":"library(lavaan) data(data_med_mod_ab1) dat <- data_med_mod_ab1 mod <- \" m ~ x + w + x:w + c1 + c2 y ~ m + w + m:w + x + c1 + c2 \" fit <- sem(mod, dat) # In real research, R should be 5000 or even 10000 mc_out <- do_mc(fit, R = 100, seed = 1234) #> Stage 1: Simulate estimates #> Stage 2: Compute implied statistics  # Print the output of do_boot() mc_out #>  #> == A 'mc_out' class object == #>  #> Number of Monte Carlo replications: 100  #> Column names in data: #> [1] m   y   m:w x   w   x:w c1  c2  #> (Note: May contain derived terms such as product terms.) #>"},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: A Simple\nLatent Mediation Model — simple_mediation_latent","title":"Sample Dataset: A Simple\nLatent Mediation Model — simple_mediation_latent","text":"Generated simple mediation model among xthree latent factors, fx, fm, fy, xeach three indicators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: A Simple\nLatent Mediation Model — simple_mediation_latent","text":"","code":"simple_mediation_latent"},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: A Simple\nLatent Mediation Model — simple_mediation_latent","text":"data frame 200 rows 11 variables: x1 Indicator fx. Numeric. x2 Indicator fx. Numeric. x3 Indicator fx. Numeric. m1 Indicator fm. Numeric. m2 Indicator fm. Numeric. m3 Indicator fm. Numeric. y1 Indicator fy. Numeric. y2 Indicator fy. Numeric. y3 Indicator fy. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Dataset: A Simple\nLatent Mediation Model — simple_mediation_latent","text":"model:","code":"fx =~ x1 + x2 + x3 fm =~ m1 + m2 + m3 fy =~ y1 + y2 + y3 fm ~ a * fx fy ~ b * fm + cp * fx indirect := a * b"},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_cond_indirect_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction Methods for\n'cond_indirect_effects' Outputs — subsetting_cond_indirect_effects","title":"Extraction Methods for\n'cond_indirect_effects' Outputs — subsetting_cond_indirect_effects","text":"subsetting 'cond_indirect_effects'-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_cond_indirect_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction Methods for\n'cond_indirect_effects' Outputs — subsetting_cond_indirect_effects","text":"","code":"# S3 method for cond_indirect_effects [(x, i, j, drop = if (missing(i)) TRUE else length(j) == 1)"},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_cond_indirect_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction Methods for\n'cond_indirect_effects' Outputs — subsetting_cond_indirect_effects","text":"x 'cond_indirect_effects'-class object. numeric vector row number(s), character vector row name(s), logical vector row(s) selected. j numeric vector column number(s), character vector column name(s), logical vector column(s) selected. drop Whether dropping dimension one row/column.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_cond_indirect_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction Methods for\n'cond_indirect_effects' Outputs — subsetting_cond_indirect_effects","text":"'cond_indirect_effects'-class object. See cond_indirect_effects() details class.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_cond_indirect_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extraction Methods for\n'cond_indirect_effects' Outputs — subsetting_cond_indirect_effects","text":"Customized [ 'cond_indirect_effects'-class objects, ensure operations work data frame object, information specific conditional effects modified correctly.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_cond_indirect_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction Methods for\n'cond_indirect_effects' Outputs — subsetting_cond_indirect_effects","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ x  + w1 + x:w1 m2 ~ m1 y  ~ m2 + x + w4 + m2:w4 \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # Examples for cond_indirect():  # Conditional effects from x to m1 when w1 is equal to each of the levels out1 <- cond_indirect_effects(x = \"x\", y = \"m1\",                       wlevels = \"w1\", fit = fit) out1[2, ] #>  #> == Conditional effects == #>  #>  Path: x -> m1 #>  Conditional on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>   [w1]  (w1)   ind  m1~x #> 1 Mean 0.259 0.523 0.523 #>  #>  - The 'ind' column shows the  effects. #>  - ‘m1~x’ is/are the path coefficient(s) along the path conditional on #>    the moderators. #>   # Conditional Indirect effect from x1 through m1 to y, # when w1 is equal to each of the levels out2 <- cond_indirect_effects(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\"),                       wlevels = c(\"w1\", \"w4\"), fit = fit) out2[c(1, 3), ] #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> m2 -> y #>  Conditional on moderator(s): w1, w4 #>  Moderator(s) represented by: w1, w4 #>  #>      [w1]    [w4]   (w1)  (w4)   ind  m1~x m2~m1  y~m2 #> 1 M+1.0SD M+1.0SD  1.228 1.209 0.137 0.750 0.399 0.458 #> 2 M-1.0SD M+1.0SD -0.710 1.209 0.054 0.297 0.399 0.458 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘m2~m1’,‘y~m2’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_wlevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Extraction Methods for a\n'wlevels'-class Object — subsetting_wlevels","title":"Extraction Methods for a\n'wlevels'-class Object — subsetting_wlevels","text":"subsetting 'wlevels'-class object. Attributes related levels preserved appropriate.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_wlevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extraction Methods for a\n'wlevels'-class Object — subsetting_wlevels","text":"","code":"# S3 method for wlevels [(x, i, j, drop = if (missing(i)) TRUE else length(j) == 1)  # S3 method for wlevels [(x, i, j) <- value  # S3 method for wlevels [[(x, i, j) <- value"},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_wlevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extraction Methods for a\n'wlevels'-class Object — subsetting_wlevels","text":"x 'wlevels'-class object. numeric vector row number(s), character vector row name(s), logical vector row(s) selected. j numeric vector column number(s), character vector column name(s), logical vector column(s) selected. drop Whether dropping dimension one row/column. value Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_wlevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extraction Methods for a\n'wlevels'-class Object — subsetting_wlevels","text":"'wlevels'-class object. See mod_levels() merge_mod_levels() details class.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_wlevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extraction Methods for a\n'wlevels'-class Object — subsetting_wlevels","text":"Customized [ 'wlevels'-class objects, ensure operations work data frame object, information specific wlevels-class object modified correctly. assignment methods [<- [[<- wlevels-class objects raise error. class objects created mod_levels() related functions. Subsetting output mod_levels() possible recommended. reliable generate levels using mod_levels() related functions. Nevertheless, situations subsetting preferred.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/subsetting_wlevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extraction Methods for a\n'wlevels'-class Object — subsetting_wlevels","text":"","code":"data(data_med_mod_ab) dat <- data_med_mod_ab # Form the levels from a list of lm() outputs lm_m <- lm(m ~ x*w1 + c1 + c2, dat) lm_y <- lm(y ~ m*w2 + x + w1 + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) w1_levels <- mod_levels(lm_out, w = \"w1\") w1_levels #>               w1 #> M+1.0SD 6.173157 #> Mean    5.105602 #> M-1.0SD 4.038047 w1_levels[2, ] #>            w1 #> Mean 5.105602 w1_levels[c(2, 3), ] #>               w1 #> Mean    5.105602 #> M-1.0SD 4.038047  dat <- data_med_mod_serial_cat lm_m1 <- lm(m1 ~ x*w1 + c1 + c2, dat) lm_y <- lm(y ~ m1 + x + w1 + c1 + c2, dat) lm_out <- lm2list(lm_m1, lm_y) w1gp_levels <- mod_levels(lm_out, w = \"w1\") w1gp_levels #>        w1group2 w1group3 #> group1        0        0 #> group2        1        0 #> group3        0        1 w1gp_levels[2, ] #>        w1group2 w1group3 #> group2        1        0 w1gp_levels[3, ] #>        w1group2 w1group3 #> group3        0        1  merged_levels <- merge_mod_levels(w1_levels, w1gp_levels) merged_levels #>                               w1 w1group2 w1group3 #> w1: M+1.0SD; w1: group1 6.173157        0        0 #> w1: M+1.0SD; w1: group2 6.173157        1        0 #> w1: M+1.0SD; w1: group3 6.173157        0        1 #> w1: Mean; w1: group1    5.105602        0        0 #> w1: Mean; w1: group2    5.105602        1        0 #> w1: Mean; w1: group3    5.105602        0        1 #> w1: M-1.0SD; w1: group1 4.038047        0        0 #> w1: M-1.0SD; w1: group2 4.038047        1        0 #> w1: M-1.0SD; w1: group3 4.038047        0        1  merged_levels[4:6, ] #>                            w1 w1group2 w1group3 #> w1: Mean; w1: group1 5.105602        0        0 #> w1: Mean; w1: group2 5.105602        1        0 #> w1: Mean; w1: group3 5.105602        0        1 merged_levels[1:3, c(2, 3)] #>                         w1group2 w1group3 #> w1: M+1.0SD; w1: group1        0        0 #> w1: M+1.0SD; w1: group2        1        0 #> w1: M+1.0SD; w1: group3        0        1 merged_levels[c(1, 4, 7), 1, drop = FALSE] #>                               w1 #> w1: M+1.0SD; w1: group1 6.173157 #> w1: Mean; w1: group1    5.105602 #> w1: M-1.0SD; w1: group1 4.038047"},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of an lm_list-Class\nObject — summary.lm_list","title":"Summary of an lm_list-Class\nObject — summary.lm_list","text":"summary content output lm2list().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of an lm_list-Class\nObject — summary.lm_list","text":"","code":"# S3 method for lm_list summary(object, ...)  # S3 method for summary_lm_list print(x, digits = 3, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of an lm_list-Class\nObject — summary.lm_list","text":"object output lm2list(). ... arguments. used. x object class summary_lm_list. digits number significant digits printing numerical results.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of an lm_list-Class\nObject — summary.lm_list","text":"summary.lm_list() returns summary_lm_list-class object, list summary() outputs lm() outputs stored. print.summary_lm_list() returns x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summary of an lm_list-Class\nObject — summary.lm_list","text":"print(summary_lm_list): Print method output summary lm_list.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of an lm_list-Class\nObject — summary.lm_list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>  summary(lm_serial_parallel) #>  #>  #> Model: #> m11 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  11.4546     1.1258   10.17  < 2e-16 *** #> x             0.8001     0.0953    8.39  4.2e-13 *** #> c1            0.0855     0.1020    0.84    0.404     #> c2           -0.2444     0.1002   -2.44    0.017 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.459. Adjusted R-square = 0.442. F(3, 96) = 27.148, p < .001 #>  #> Model: #> m12 ~ m11 + x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   9.8742     1.5048    6.56  2.8e-09 *** #> m11           0.4652     0.0946    4.92  3.7e-06 *** #> x             0.1146     0.1164    0.98   0.3274     #> c1            0.1934     0.0949    2.04   0.0444 *   #> c2           -0.2848     0.0957   -2.97   0.0037 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.469. Adjusted R-square = 0.446. F(4, 95) = 20.963, p < .001 #>  #> Model: #> m2 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    2.354      1.236    1.91     0.06 .   #> x              0.435      0.105    4.15  7.1e-05 *** #> c1             0.178      0.112    1.59     0.12     #> c2            -0.167      0.110   -1.52     0.13     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.196. Adjusted R-square = 0.171. F(3, 96) = 7.812, p < .001 #>  #> Model: #> y ~ m11 + m12 + m2 + x + c1 + c2 #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.791908   4.613263   -0.39  0.69859     #> m11          0.203249   0.266930    0.76  0.44832     #> m12          0.519112   0.255389    2.03  0.04494 *   #> m2           0.838632   0.217639    3.85  0.00021 *** #> x            0.071421   0.317264    0.23  0.82238     #> c1          -0.000114   0.244934    0.00  0.99963     #> c2          -0.069787   0.253231   -0.28  0.78348     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.315. Adjusted R-square = 0.271. F(6, 93) = 7.133, p < .001"},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Terms of an\n'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","title":"Model Terms of an\n'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"extracts terms object lm_from_lavaan-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Terms of an\n'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"","code":"# S3 method for lm_from_lavaan terms(x, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Terms of an\n'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"x 'lm_from_lavaan'-class object. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Terms of an\n'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"terms-class object. See terms.object details.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Terms of an\n'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"method lm_from_lavaan-class converts regression model variable lavaan model formula object. function simply calls stats::terms() formula object extract predictors variable.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Terms of an\n'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) terms(fit_list$m) #> m ~ x + c1 + c2 #> attr(,\"variables\") #> list(m, x, c1, c2) #> attr(,\"factors\") #>    x c1 c2 #> m  0  0  0 #> x  1  0  0 #> c1 0  1  0 #> c2 0  0  1 #> attr(,\"term.labels\") #> [1] \"x\"  \"c1\" \"c2\" #> attr(,\"order\") #> [1] 1 1 1 #> attr(,\"intercept\") #> [1] 1 #> attr(,\"response\") #> [1] 1 #> attr(,\".Environment\") #> <environment: 0x5613c2a71160> terms(fit_list$y) #> y ~ m + x + c1 + c2 #> attr(,\"variables\") #> list(y, m, x, c1, c2) #> attr(,\"factors\") #>    m x c1 c2 #> y  0 0  0  0 #> m  1 0  0  0 #> x  0 1  0  0 #> c1 0 0  1  0 #> c2 0 0  0  1 #> attr(,\"term.labels\") #> [1] \"m\"  \"x\"  \"c1\" \"c2\" #> attr(,\"order\") #> [1] 1 1 1 1 #> attr(,\"intercept\") #> [1] 1 #> attr(,\"response\") #> [1] 1 #> attr(,\".Environment\") #> <environment: 0x5613c2a6f668>"},{"path":"https://sfcheung.github.io/manymome/reference/total_indirect_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Indirect Effect Between\nTwo Variables — total_indirect_effect","title":"Total Indirect Effect Between\nTwo Variables — total_indirect_effect","text":"Compute total indirect effect two variables paths estimated many_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/total_indirect_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Indirect Effect Between\nTwo Variables — total_indirect_effect","text":"","code":"total_indirect_effect(object, x, y)"},{"path":"https://sfcheung.github.io/manymome/reference/total_indirect_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Indirect Effect Between\nTwo Variables — total_indirect_effect","text":"object output many_indirect_effects(), list indirect-class objects. x Character. name x variable. paths start x included. y Character. name y variable. paths end y included.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/total_indirect_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Indirect Effect Between\nTwo Variables — total_indirect_effect","text":"indirect-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/total_indirect_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Total Indirect Effect Between\nTwo Variables — total_indirect_effect","text":"extracts indirect-class objects relevant paths add indirect effects together using + operator.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/total_indirect_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Indirect Effect Between\nTwo Variables — total_indirect_effect","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, data_serial_parallel,            fixed.x = FALSE)  # All indirect paths, control variables excluded paths <- all_indirect_paths(fit,                             exclude = c(\"c1\", \"c2\")) paths #> Call:  #> all_indirect_paths(fit = fit, exclude = c(\"c1\", \"c2\")) #> Path(s):  #>   path                 #> 1 m11 -> m12 -> y      #> 2 x -> m11 -> m12      #> 3 x -> m11 -> m12 -> y #> 4 x -> m11 -> y        #> 5 x -> m12 -> y        #> 6 x -> m2 -> y          # Indirect effect estimates out <- many_indirect_effects(paths,                              fit = fit) out #>  #> ==  Indirect Effect(s)   == #>                        ind #> m11 -> m12 -> y      0.241 #> x -> m11 -> m12      0.372 #> x -> m11 -> m12 -> y 0.193 #> x -> m11 -> y        0.163 #> x -> m12 -> y        0.059 #> x -> m2 -> y         0.364 #>  #>  - The 'ind' column shows the indirect effects. #>    # Total indirect effect from x to y total_indirect_effect(out,                       x = \"x\",                       y = \"y\") #>  #> == Indirect Effect == #>                                            #>  Path:                x -> m11 -> m12 -> y #>  Path:                x -> m11 -> y        #>  Path:                x -> m12 -> y        #>  Path:                x -> m2 -> y         #>  Function of Effects: 0.780                #>  #> Computation of the Function of Effects: #>  (((x->m11->m12->y) #> +(x->m11->y)) #> +(x->m12->y)) #> +(x->m2->y)  #>"},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-0112","dir":"Changelog","previous_headings":"","what":"manymome 0.1.12","title":"manymome 0.1.12","text":"CRAN release: 2023-08-21","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"can-report-standard-errors-if-requested-0-1-12","dir":"Changelog","previous_headings":"New Features","what":"Can report standard errors (if requested)","title":"manymome 0.1.12","text":"major print methods effects support printing standard errors (setting se = TRUE). simply standard deviations bootstrap estimates (bootstrap confidence intervals requested) simulated estimates (Monte Carlo confidence intervals requested). interpreted cautions sampling distribution effect estimates may symmetric. (0.1.11.2)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"miscellaneous-0-1-12","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"manymome 0.1.12","text":"Customized linters. (0.1.11.1) Revised test accommodate behavior MKL MASS::mvrnorm() used generate pseudo random numbers. (0.1.11.4) Finalized 0.1.12. (0.1.12)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"bug-fixes-0-1-12","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"manymome 0.1.12","text":"P-value computed mathematical operations conducted effects using + - version 0.1.11.2. fixed. (0.1.11.2) merge_model_matrix() failed variables lm() output already present merged outputs. Fixed 0.1.11.3. (0.1.11.3) cond_indirect() hide progress Monte Carlo CIs requested do_mc() called internally. Fixed. now hides progress progress = TRUE. (0.1.11.5)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-0110","dir":"Changelog","previous_headings":"","what":"manymome 0.1.10","title":"manymome 0.1.10","text":"CRAN release: 2023-06-08","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"monte-carlo-confidence-intervals-0-1-10","dir":"Changelog","previous_headings":"New Features","what":"Monte Carlo Confidence Intervals","title":"manymome 0.1.10","text":"Added support Monte Carlo confidence intervals. (0.1.9.3 0.1.9.4) Updated vignettes Monte Carlo confidence intervals. (0.1.9.5) Please refer article illustration forming Monte Carlo confidence interval.","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"multiple-imputation-0-1-10","dir":"Changelog","previous_headings":"New Features","what":"Multiple Imputation","title":"manymome 0.1.10","text":"Added support models fitted runMI() sem.mi() semTools package using multiple imputation. (0.1.9.8-0.1.9.10) Please refer article illustration forming Monte Carlo confidence interval.","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"can-report-p-value-if-requested-0-1-10","dir":"Changelog","previous_headings":"New Features","what":"Can report p-value (if requested)","title":"manymome 0.1.10","text":"print methods support printing asymmetric bootstrap p-values using method presented Asparouhov Muthén (2021) bootstrapping confidence interval requested. default, p-values printed. (0.1.9.7)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"report-proportion-of-effect-mediated-0-1-10","dir":"Changelog","previous_headings":"New Features","what":"Report proportion of effect mediated","title":"manymome 0.1.10","text":"Added indirect_proportion() two methods output. (0.1.9.12)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"others-0-1-10","dir":"Changelog","previous_headings":"New Features","what":"Others","title":"manymome 0.1.10","text":"Exported get_prod() added article workflow. (0.1.9.13). Bootstrapping can handle fixed.x argument lavaan . (0.1.9.17)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"bug-fixes-0-1-10","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"manymome 0.1.10","text":"Fixed factor2var() work () categorical variable two levels. (0.1.9.21)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"miscellaneous-0-1-10","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"manymome 0.1.10","text":"Updated badges README.md. (0.1.9.1) Updated pkgdown site. (0.1.9.2) Used reliable test Monte Carlo CIs. (0.1.9.6) Updated logo readability. (0.1.9.6) Fixed error pkgdown site. (0.1.9.6) Added progress bars do_mc(). (0.1.9.11) Added print.mc_out(), print-method mc_out-class objects. (0.1.9.14) Updated vignettes package name. (0.1.9.15) Fixed typos NEWS.md. (0.1.9.15) Updated pkgdown GitHub action using newer version mermaid. (0.1.9.15) Updated pkgdown website use new logo color scheme. (0.1.9.16) Modified tests accommodate change lavaan handling random seed. (0.1.9.18) change main code. Added technical appendices pkgdown articles, accessible pkgdown website package. (0.1.9.19) Updated documentation functions state support lavaan.mi-class objects. (0.1.9.20)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-019","dir":"Changelog","previous_headings":"","what":"manymome 0.1.9","title":"manymome 0.1.9","text":"CRAN release: 2023-01-06","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"miscellaneous-0-1-9","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"manymome 0.1.9","text":"Modified tests accommodate change lavaan handling random seed. Made tests run faster meet CRAN requirements. Used precomputed results speed building vignettes.","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-016","dir":"Changelog","previous_headings":"","what":"manymome 0.1.6","title":"manymome 0.1.6","text":"CRAN release: 2022-11-06","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"bootstrapping-0-1-6","dir":"Changelog","previous_headings":"New Features","what":"Bootstrapping","title":"manymome 0.1.6","text":"Added lm2boot_out_parallel() bootstrapping output lm() using parallel processing. default do_boot() used outputs lm(). (0.1.4.4) Added print method output do_boot(). (0.1.4.7)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"mediation-0-1-6","dir":"Changelog","previous_headings":"New Features","what":"Mediation","title":"manymome 0.1.6","text":"Added all_indirect_paths() identifying indirect paths model. (0.1.4.5) Added many_indirect_effects() computing indirect effects list paths. (0.1.4.5) Added total_indirect_effect() computing total indirect effect two variables. (0.1.4.5)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"bug-fixes-0-1-6","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"manymome 0.1.6","text":"Updated README.md code installing CRAN. (0.1.4.1). Fixed typo README.md. (0.1.4.2) Fixed tests done expect_equal numbers rather characters. change functions. (0.1.4.3) Noted vignettes new functions yet CRAN version available GitHub version. (0.1.4.6) Fixed bug merge_model_frame(). (0.1.4.8)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"others-0-1-6","dir":"Changelog","previous_headings":"","what":"Others","title":"manymome 0.1.6","text":"Finalize Version 0.1.6 CRAN.","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-0140","dir":"Changelog","previous_headings":"","what":"manymome 0.1.4.0","title":"manymome 0.1.4.0","text":"CRAN release: 2022-09-06 Checked examples vignettes ensure parallel processing used. (0.1.3.1) Updated DESCRIPTION (0.1.3.2) Release version main. (0.1.4.0)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-0130","dir":"Changelog","previous_headings":"","what":"manymome 0.1.3.0","title":"manymome 0.1.3.0","text":"Release version main. (0.1.2.0) Fixed invalid link Readme.md. (0.1.3.0)","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-0116","dir":"Changelog","previous_headings":"","what":"manymome 0.1.1.6","title":"manymome 0.1.1.6","text":"Cleaned doc code.","code":""},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-0115","dir":"Changelog","previous_headings":"","what":"manymome 0.1.1.5","title":"manymome 0.1.1.5","text":"First public release.","code":""}]
