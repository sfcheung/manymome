[{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/manymome/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"manymome","text":"article brief illustration manymome functions used typical cases. model intended simple (though two moderators). See section Cases models supported, use function models fitted structural equation modelings using lavaan::sem(), including models latent variables.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"moderated-mediation-by-regression","dir":"Articles","previous_headings":"","what":"Moderated Mediation by Regression","title":"manymome","text":"sample dataset comes package: Suppose model fitted:","code":"library(manymome) dat <- data_med_mod_ab print(head(dat), digits = 3) #>       x   w1   w2    m    y    c1   c2 #> 1  9.27 4.97 2.66 3.46 8.80  9.26 3.14 #> 2 10.79 4.13 3.33 4.05 7.37 10.71 5.80 #> 3 11.10 5.91 3.32 4.04 8.24 10.60 5.45 #> 4  9.53 4.78 2.32 3.54 8.37  9.22 3.83 #> 5 10.00 4.38 2.95 4.65 8.39  9.58 4.26 #> 6 12.25 5.81 4.04 4.73 9.65  9.51 4.01"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"estimating-the-coefficients","dir":"Articles","previous_headings":"Moderated Mediation by Regression","what":"Estimating the Coefficients","title":"manymome","text":"moderated mediation model mediation path x -> m -> y, two moderators: x -> m moderated w1 m -> y moderated w2. effects interest conditional indirect effects: indirect effects x y m different levels w1 w2. effects moderated mediation model can estimated multiple regression approach R using lm(). First, m regressed x, w1, interaction: Second, y regressed m, w2, interaction, x: coefficients: moderation effects significant. indirect effect moderated stages (x -> m m -> y), magnitude indirect effect depends w1 w2. indirect effect conditional moderators called conditional indirect effect. Moreover, like mediation effect without moderation, confidence interval can formed nonparametric bootstrapping. compute conditional indirect effects form bootstrap confidence intervals, can use cond_indirect_effects().","code":"lm_m <- lm(m ~ x * w1, dat) lm_y <- lm(y ~ m * w2 + x, dat) printCoefmat(summary(lm_m)$coefficients, digits = 3, signif.legend = FALSE) #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  11.6273     4.8501    2.40    0.018 * #> x            -0.6342     0.5006   -1.27    0.208   #> w1           -2.2551     0.9654   -2.34    0.022 * #> x:w1          0.1998     0.0958    2.09    0.040 * printCoefmat(summary(lm_y)$coefficients, digits = 3, signif.legend = FALSE) #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   8.1648     1.2779    6.39  6.2e-09 *** #> m            -0.0936     0.2763   -0.34   0.7357     #> w2           -0.8784     0.3409   -2.58   0.0115 *   #> x             0.0599     0.0892    0.67   0.5038     #> m:w2          0.1926     0.0726    2.65   0.0094 **"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"estimating-conditional-indirect-effects","dir":"Articles","previous_headings":"Moderated Mediation by Regression","what":"Estimating Conditional Indirect Effects","title":"manymome","text":"call compute conditional indirect effects: major arguments: wlevels: vector names moderators. x: name predictor. y: name outcome variable. m: name mediator, vector names pathway one mediator. fit: list output lm(). boot_ci: Set TRUE request bootstrapping confidence intervals. Default FALSE. R: number bootstrap samples. 500 bootstrap samples illustration. Set R 2000 even 5000 real research. seed: seed random number generator. output: two moderators, default levels numeric moderators one standard deviation mean one standard deviation mean. two moderators, four combinations. shown , among levels, indirect effect x y m significant w1 w2 one standard deviation mean. indirect effect levels w1 w2 0.410, 95% bootstrap confidence interval [0.106, 0.745].","code":"out_lm <- cond_indirect_effects(wlevels =c(\"w1\", \"w2\"),                                 x = \"x\",                                 y = \"y\",                                 m = \"m\",                                 fit = lm2list(lm_m, lm_y),                                 boot_ci = TRUE,                                 R = 500,                                 seed = 43143) out_lm #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind  CI.lo CI.hi Sig   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.410  0.106 0.745 Sig 0.599 0.685 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.181 -0.001 0.437     0.599 0.302 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.118 -0.089 0.398     0.173 0.685 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.052 -0.041 0.222     0.173 0.302 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 500 samples. #>  - The 'ind' column shows the indirect effects. #>  - 'm~x','y~m' is/are the path coefficient(s) along the path conditional #>    on the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"standardized-conditional-indirect-effects","dir":"Articles","previous_headings":"Moderated Mediation by Regression","what":"Standardized Conditional Indirect Effects","title":"manymome","text":"compute conditional indirect effects, can standardize predictor (x), outcome (y), . standardize x, set standardized_x TRUE. standardize y, set standardized_y TRUE. standardize , set standardized_x standardized_y TRUE. result x y standardized: standardized indirect effect w1 w2 one standard deviation mean 0.412, 95% bootstrap confidence interval [0.115, 0.700].","code":"out_lm_stdxy <- cond_indirect_effects(wlevels =c(\"w1\", \"w2\"),                                 x = \"x\",                                 y = \"y\",                                 m = \"m\",                                 fit = list(lm_m, lm_y),                                 boot_ci = TRUE,                                 R = 500,                                 seed = 43143,                                 standardized_x = TRUE,                                 standardized_y = TRUE) out_lm_stdxy #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   std  CI.lo CI.hi Sig   m~x   y~m   ind #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.412  0.115 0.700 Sig 0.599 0.685 0.410 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.182 -0.002 0.380     0.599 0.302 0.181 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.119 -0.088 0.400     0.173 0.685 0.118 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.052 -0.042 0.226     0.173 0.302 0.052 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 500 samples. #>  - std: The standardized indirect effects.  #>  - ind: The unstandardized indirect effects. #>  - 'm~x','y~m' is/are the path coefficient(s) along the path conditional #>    on the moderators."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"plotting-the-conditional-indirect-effects","dir":"Articles","previous_headings":"Moderated Mediation by Regression","what":"Plotting the Conditional Indirect Effects","title":"manymome","text":"output cond_indirect_effects() cond_indirect_effects-class object plot method:  default, two end points line one standard deviation one standard mean predictor (x). plot reveals patterns apparent conditional effects. Although indirect effect increase either w1 w2 increases, coefficients w1 (-2.2551) w2 (-0.8784) negative. Therefore, combined effects increases w1 w2 decreases y move line downward. Options customize plot can found help page plot.cond_indirect_effects().","code":"plot(out_lm)"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"mediation-only","dir":"Articles","previous_headings":"","what":"Mediation Only","title":"manymome","text":"package can also used mediation model. sample dataset comes package: Suppose model fitted, c1 c2 control variables.","code":"library(manymome) dat <- data_serial print(head(dat), digits = 3) #>       x   m1    m2     y        c1   c2 #> 1 12.12 20.6  9.33  9.00  0.109262 6.01 #> 2  9.81 18.2  9.47 11.56 -0.124014 6.42 #> 3 10.11 20.3 10.05  9.35  4.278608 5.34 #> 4 10.07 19.7 10.17 11.41  1.245356 5.59 #> 5 11.91 20.5 10.05 14.26 -0.000932 5.34 #> 6  9.13 16.5  8.93 10.01  1.802727 5.91"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"estimating-parameters","dir":"Articles","previous_headings":"Mediation Only","what":"Estimating Parameters","title":"manymome","text":"coefficients can estimated three regression models: \"m1 ~ x + c1 + c2 m2 ~ m1 + x + c1 + c2 y ~ m2 + m1 + x + c1 + c2 coefficients:","code":"lm_m1 <- lm(m1 ~ x + c1 + c2, dat) lm_m2 <- lm(m2 ~ m1 + x + c1 + c2, dat) lm_y <- lm(y ~ m2 + m1 + x + c1 + c2, dat) printCoefmat(summary(lm_m1)$coefficients, digits = 3, signif.legend = FALSE) #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  10.8157     1.1438    9.46  2.2e-15 *** #> x             0.8224     0.0942    8.73  8.0e-14 *** #> c1            0.1715     0.0907    1.89    0.062 .   #> c2           -0.1889     0.0928   -2.04    0.045 * printCoefmat(summary(lm_m2)$coefficients, digits = 3, signif.legend = FALSE) #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   3.5194     1.5868    2.22   0.0289 *   #> m1            0.4208     0.1019    4.13  7.8e-05 *** #> x            -0.1161     0.1260   -0.92   0.3591     #> c1            0.2775     0.0922    3.01   0.0033 **  #> c2           -0.1619     0.0946   -1.71   0.0902 . printCoefmat(summary(lm_y)$coefficients, digits = 3, signif.legend = FALSE) #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)   9.4679     3.6090    2.62    0.010 * #> m2            0.5208     0.2275    2.29    0.024 * #> m1           -0.4353     0.2454   -1.77    0.079 . #> x             0.4929     0.2806    1.76    0.082 . #> c1            0.0988     0.2140    0.46    0.645   #> c2           -0.0960     0.2130   -0.45    0.653"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"estimating-indirect-effects","dir":"Articles","previous_headings":"Mediation Only","what":"Estimating Indirect Effects","title":"manymome","text":"indirect_effect() can used estimate indirect effect form bootstrapping confidence interval along path model starts variable (predictor), ends variable (outcome variable), variable(s) (mediator(s)). example, call indirect effect x y m1 m2: main arguments : x: name predictor. start pathway. y: name outcome variable. end pathway m: name mediator, vector names mediators pathway one mediator. fit: list output lm(). boot_ci: Set TRUE request bootstrapping confidence intervals. Default FALSE. R: number bootstrap samples. 500 bootstrap samples illustration. Set R 2000 even 5000 real research. seed: seed random number generator. output: indirect effect x y m1 m2 0.180, 95% confidence interval [0.034, 0.396], significantly different zero (p < .05).","code":"out_med <- indirect_effect(x = \"x\",                           y = \"y\",                           m = c(\"m1\", \"m2\"),                           fit = list(lm_m1, lm_m2, lm_y),                           boot_ci = TRUE,                           R = 500,                           seed = 43143) out_med #>  #> == Indirect Effect == #>                                         #>  Path:               x -> m1 -> m2 -> y #>  Indirect Effect     0.180              #>  95.0% Bootstrap CI: [0.034 to 0.396]   #>  #> Computation Formula: #>   (b.m1~x)*(b.m2~m1)*(b.y~m2) #> Computation: #>   (0.82244)*(0.42078)*(0.52077) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 500 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>   m1~x       0.822 #>  m2~m1       0.421 #>   y~m2       0.521"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"standardized-indirect-effect","dir":"Articles","previous_headings":"Mediation Only","what":"Standardized Indirect Effect","title":"manymome","text":"compute indirect effect predictor standardized, set standardized_x TRUE. compute indirect effect outcome variable standardized, set standardized_y TRUE. compute (completely) standardized indirect effect, set standardized_x standardized_y TRUE. call compute (completely) standardized indirect effect: indirect effect x y m1 m2 0.086, 95% confidence interval [0.017, 0.183], significantly different zero (p < .05).","code":"out_med_stdxy <- indirect_effect(x = \"x\",                           y = \"y\",                           m = c(\"m1\", \"m2\"),                           fit = list(lm_m1, lm_m2, lm_y),                           boot_ci = TRUE,                           R = 500,                           seed = 43143,                           standardized_x = TRUE,                           standardized_y = TRUE) out_med_stdxy #>  #> == Indirect Effect == #>                                         #>  Path:               x -> m1 -> m2 -> y #>  Indirect Effect     0.086              #>  95.0% Bootstrap CI: [0.017 to 0.183]   #>  #> Computation Formula: #>   (b.m1~x)*(b.m2~m1)*(b.y~m2)*sd_x/sd_y #> Computation: #>   (0.82244)*(0.42078)*(0.52077)*(0.95489)/(2.00967) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 500 bootstrap samples. #>  #> Coefficients of Component Paths: #>   Path Coefficient #>   m1~x       0.822 #>  m2~m1       0.421 #>   y~m2       0.521 #>  #> NOTE: The effects of the component paths are form the model, not standardized."},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"estimating-indirect-effects-for-any-pathways","dir":"Articles","previous_headings":"Mediation Only","what":"Estimating Indirect Effects For Any Pathways","title":"manymome","text":"indirect_effect() can used indirect effect pathway path model. need specify pathway regression analysis. example, suppose want estimate test indirect effect x m2 y, bypassing m1, simply set x \"x\", y \"y\", m \"m2\": indirect effect along path significant. Similarly, indirect effects m1 m2 y x m1 y can also tested setting three arguments accordingly. also means model can one predictor one outcome variable. example, c1 c2 can predictors model, may point one mediators. model can also one outcome variable. indirect_effect() works extracting path coefficients compute product. Therefore, require users anything advance fitting models also limit form models. indirect_effect() can used long indirect effect computed product component paths meaningful. Fit models first, explore many pathways want.","code":"out_x_m2_y <- indirect_effect(x = \"x\",                               y = \"y\",                               m = \"m2\",                               fit = list(lm_m1, lm_m2, lm_y),                               boot_ci = TRUE,                               R = 500,                               seed = 43143) out_x_m2_y #>  #> == Indirect Effect == #>                                        #>  Path:               x -> m2 -> y      #>  Indirect Effect     -0.060            #>  95.0% Bootstrap CI: [-0.232 to 0.097] #>  #> Computation Formula: #>   (b.m2~x)*(b.y~m2) #> Computation: #>   (-0.11610)*(0.52077) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 500 bootstrap samples. #>  #> Coefficients of Component Paths: #>  Path Coefficient #>  m2~x      -0.116 #>  y~m2       0.521"},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"other-cases","dir":"Articles","previous_headings":"","what":"Other Cases","title":"manymome","text":"following articles illustrate uses manymome (prepared): Moderated mediation models categorical numeric moderators. Moderated mediation models categorical numeric moderators. Parallel mediation models. Complex mediation models. Moderated mediation models numeric moderators. Moderated mediation models categorical moderators. Moderated mediation models numeric categorical moderators. Complex mediation models. Indirect effects latent factors. Models missing data.","code":""},{"path":"https://sfcheung.github.io/manymome/articles/manymome.html","id":"moderation-only-models","dir":"Articles","previous_headings":"","what":"Moderation-Only Models","title":"manymome","text":"Although cond_indirect_effects() can also used moderated regression model without mediators, packages specifically model. example, stdmod::cond_effect() can used compute conditional effects, stdmod::cond_effect_boot(), used stdmod::std_selected(), can used form bootstrap confidence intervals standardized conditional effects. visreg::visreg() stdmod::plotmod() can used plot conditional effects moderated regression model. Interested researchers can check package stdmod visreg. (Disclosure: stdmod also developed maintainer manymome.)","code":""},{"path":"https://sfcheung.github.io/manymome/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer.","code":""},{"path":"https://sfcheung.github.io/manymome/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung S (2022). manymome: Moderation, Mediation, Moderated-Mediation SEM. R package version 0.0.1.9023, https://sfcheung.github.io/manymome/.","code":"@Manual{,   title = {manymome: Moderation, Mediation, and Moderated-Mediation in SEM},   author = {Shu Fai Cheung},   year = {2022},   note = {R package version 0.0.1.9023},   url = {https://sfcheung.github.io/manymome/}, }"},{"path":"https://sfcheung.github.io/manymome/index.html","id":"manymome","dir":"","previous_headings":"","what":"Moderation, Mediation, and Moderated-Mediation in SEM","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"Moderation, mediation, moderated mediation structural equation modelling (SEM) path models fitted linear regression.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"what-it-can-do","dir":"","previous_headings":"","what":"What It Can Do?","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"Compute unstandardized standardized indirect effect conditional indirect effect path model. Form bootstrap confidence interval effect.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"advantages","dir":"","previous_headings":"","what":"Advantages","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"need create parameters similar code fitting model. Just focus fitting model first. model selected, users can compute effect pathway, variable, variables, conditioned moderators, levels moderators. Supports structural equation models fitted lavaan::sem() path models fitted regression using lm(). interface main functions similar approaches. limit number predictors, mediators, outcome variables, lavaan::sem() lm(). Supports indirect effects conditional indirect effects among latent variables models fitted lavaan::sem(). Supports dataset missing data lavaan::sem() full information maximum likelihood (fiml). Supports numeric categorical moderators. Capitalizes native support categorical moderators lm() function (factor2var()) easy creation dummy variables lavaan::sem(). Bootstrapping, time consuming, can conducted just . main functions computing indirect effects indirect effects can called many times needed without redoing bootstrapping.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"limitations-for-now","dir":"","previous_headings":"","what":"Limitations (For Now)","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"support categorical predictors.","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"how-to-use-it","dir":"","previous_headings":"","what":"How To Use It?","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"good starting point “Get Started” article (vignette(\"manymome\")). articles can found Articles","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"homepage","dir":"","previous_headings":"","what":"Homepage","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"information package, please visit GitHub page: https://sfcheung.github.io/manymome/","code":""},{"path":"https://sfcheung.github.io/manymome/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"Stable release versions package can downloaded : https://github.com/sfcheung/manymome/releases latest developmental version package can installed remotes::install_github:","code":"remotes::install_github(\"sfcheung/manymome\")"},{"path":"https://sfcheung.github.io/manymome/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Moderation, Mediation, and Moderated-Mediation in SEM","text":"suggestions found bugs, please feel feel open GitHub issue. Thanks: https://github.com/sfcheung/manymome/issues","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Whether an Indirect Path is Valid in a Model — check_path","title":"Check Whether an Indirect Path is Valid in a Model — check_path","text":"checks whether indirect path exists model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Whether an Indirect Path is Valid in a Model — check_path","text":"","code":"check_path(x, y, m = NULL, fit = NULL, est = NULL)"},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Whether an Indirect Path is Valid in a Model — check_path","text":"x Character. name predictor start pathway. y Character. name outcome variable end pathway. m vector variable names mediators. pathway goes first mediator successively last mediator. NULL, default, pathway goes x y. fit fit object. Currently supports lavaan::lavaan object. est output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ge ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Whether an Indirect Path is Valid in a Model — check_path","text":"Boolean. TRUE path valid, FALSE path invalid.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Whether an Indirect Path is Valid in a Model — check_path","text":"checks whether path defined predictor, outcome, sequence mediators exists model. example, following model lavaan syntax   path valid: `x = \"x\", y = \"y\", m = c(\"m1\", \"m2\")`` path invalid: `x = \"x\", y = \"y\", m = c(\"m2\")`` path also invalid: `x = \"x\", y = \"y\", m = c(\"m1\", \"m2\")``","code":"m1 ~ x m2 ~ m1 m3 ~ x y ~ m2 + m3"},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check Whether an Indirect Path is Valid in a Model — check_path","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/check_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Whether an Indirect Path is Valid in a Model — check_path","text":"","code":"library(lavaan) #> This is lavaan 0.6-12 #> lavaan is FREE software! Please report any bugs. data(data_serial_parallel) dat <- data_serial_parallel mod <- \" m11 ~ x + c1 + c2 m12 ~ m11 + x + c1 + c2 m2 ~ x + c1 + c2 y ~ m12 + m2 + m11 + x + c1 + c2 \" fit <- sem(mod, dat,            meanstructure = TRUE, fixed.x = FALSE)  # The following paths are valid check_path(x = \"x\", y = \"y\", m = c(\"m11\", \"m12\"), fit = fit) #> [1] TRUE check_path(x = \"x\", y = \"y\", m = \"m2\", fit = fit) #> [1] TRUE # The following paths are invalid check_path(x = \"x\", y = \"y\", m = c(\"m11\", \"m2\"), fit = fit) #> [1] FALSE check_path(x = \"x\", y = \"y\", m = c(\"m12\", \"m11\"), fit = fit) #> [1] FALSE"},{"path":"https://sfcheung.github.io/manymome/reference/coef.index_of_mome.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Output of 'index_of_mome' — coef.index_of_mome","title":"Print the Output of 'index_of_mome' — coef.index_of_mome","text":"Extract Index Moderated-Mediation.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.index_of_mome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Output of 'index_of_mome' — coef.index_of_mome","text":"","code":"# S3 method for index_of_mome coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.index_of_mome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Output of 'index_of_mome' — coef.index_of_mome","text":"object output index_of_mome(). ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.index_of_mome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Output of 'index_of_mome' — coef.index_of_mome","text":"Scalar: index moderated-mediation object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.index_of_mome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print the Output of 'index_of_mome' — coef.index_of_mome","text":"coef method index_of_mome-class object.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect effect or conditional indirect effect — coef.indirect","title":"Indirect effect or conditional indirect effect — coef.indirect","text":"Return estimate indirect effect output indirect_i() cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect effect or conditional indirect effect — coef.indirect","text":"","code":"# S3 method for indirect coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect effect or conditional indirect effect — coef.indirect","text":"object output indirect_i() cond_indirect(). ... Optional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect effect or conditional indirect effect — coef.indirect","text":"scalar: estimate standardized moderation effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indirect effect or conditional indirect effect — coef.indirect","text":"just extracts returns element indirect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect effect or conditional indirect effect — coef.indirect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect effect or conditional indirect effect — coef.indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x   + b1 * w1 + d1 * x:w1 m2 ~ a2 * m1  + b2 * w2 + d2 * m1:w2 m3 ~ a3 * m2  + b3 * w3 + d3 * m2:w3 y  ~ a4 * m3  + b4 * w4 + d4 * m3:w4 \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  wvalues <- c(w1 = 5, w2 = 4, w3 = 2, w4 = 3)  indirect_1 <- indirect_i(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\", \"m3\"), fit = fit,                        wvalues = wvalues) indirect_2 <- (est[est$label == \"a1\", \"est\"] +                 wvalues[\"w1\"] * est[est$label == \"d1\", \"est\"]) *               (est[est$label == \"a2\", \"est\"] +                 wvalues[\"w2\"] * est[est$label == \"d2\", \"est\"]) *               (est[est$label == \"a3\", \"est\"] +                 wvalues[\"w3\"] * est[est$label == \"d3\", \"est\"]) *               (est[est$label == \"a4\", \"est\"] +                 wvalues[\"w4\"] * est[est$label == \"d4\", \"est\"]) indirect_1$indirect #> [1] 1.176673 indirect_2 #>       w1  #> 1.176673"},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","title":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"Returns path coefficients terms lm_from_lavaan-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"","code":"# S3 method for lm_from_lavaan coef(object, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"object 'lm_from_lavaan'-class object. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"numeric vector path coefficients.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"lm_from_lavaan-class object converts regression model variable lavaan`` model formulaobject. function simply extracts path coefficients estimates. Intercept always included, set zero mean structure sourcelavaan` model.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/coef.lm_from_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coefficients of a 'lm_from_lavaan'-Class Object — coef.lm_from_lavaan","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) coef(fit_list$m) #> (Intercept)           x          c1          c2  #>   0.0000000   0.9346863   0.1977842  -0.1684097  coef(fit_list$y) #> (Intercept)           m           x          c1          c2  #>   0.0000000   0.7846871   0.5076728   0.1404921  -0.1543881"},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"Compute conditional effects, indirect effects, conditional indirect effects structural model fitted lm() lavaan::lavaan().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"","code":"cond_indirect(   x,   y,   m = NULL,   fit = NULL,   est = NULL,   implied_stats = NULL,   wvalues = NULL,   standardized_x = FALSE,   standardized_y = FALSE,   boot_ci = FALSE,   level = 0.95,   boot_out = NULL,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE,   save_boot_full = FALSE,   prods = NULL,   get_prods_only = FALSE,   save_boot_out = TRUE )  cond_indirect_effects(   wlevels,   x,   y,   m = NULL,   fit = NULL,   w_type = \"auto\",   w_method = \"sd\",   sd_from_mean = NULL,   percentiles = NULL,   est = NULL,   implied_stats = NULL,   boot_ci = FALSE,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE,   boot_out = NULL,   output_type = \"data.frame\",   mod_levels_list_args = list(),   ... )  indirect_effect(   x,   y,   m = NULL,   fit = NULL,   est = NULL,   implied_stats = NULL,   standardized_x = FALSE,   standardized_y = FALSE,   boot_ci = FALSE,   level = 0.95,   boot_out = NULL,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE,   save_boot_full = FALSE )"},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"x Character. name predictor start pathway. y Character. name outcome variable end pathway. m vector variable names moderators. pathway goes first mediator successively last mediator. NULL, default, pathway goes x y. fit fit object. Can lavaan::lavaan object list lm() outputs. est output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ge ignored. implied_stats Implied means, variances, covariances observed variables, form output lavaan::lavInspect() set \"implied\". standard deviations extracted object standardization. Default NULL, implied statistics computed fit required. wvalues numeric vector named elements. names variable names moderators, values values moderators set . Default NULL. standardized_x Logical. Whether x standardized. Default FALSE. standardized_y Logical. Whether y standardized. Default FALSE. boot_ci Logical. Whether bootstrap confidence interval formed. Default FALSE. level level confidence bootstrap confidence interval. Default .95. boot_out boot_ci TRUE, users can supply pregenerated bootstrap estimates. can output do_boot(). cond_indirect_effects(), can output previous call cond_indirect_effects() bootstrap estimates. stored estimates reused need bootstrapping . supplied, function try generate fit. R Integer. boot_ci TRUE, fit list lm() outputs, boot_out NULL, function bootstrapping fit. R number bootstrap samples. Default 100. seed boot_ci TRUE, fit list lm() outputs, boot_out NULL, function bootstrapping fit. seed bootstrapping. Default NULL seed set. parallel Logical. bootstrapping conducted, whether parallel processing used. Default TRUE. fit list lm() outputs, parallel processing used. ncores Integer. number CPU cores use parallel TRUE. Default number non-logical cores minus one (one minimum). raise error greater number cores detected parallel::detectCores(). ncores set, override make_cluster_args do_boot(). make_cluster_args named list additional arguments passed parallel::makeCluster(). advanced users. See parallel::makeCluster() details. Default list(). progress Logical. Display progress . Default TRUE. save_boot_full TRUE, full bootstrapping results stored. Default FALSE. prods product terms found. internal use. get_prods_only TRUE, quit early return product terms found. results can passed prod argument calling function. Default FALSE. save_boot_out boot_out supplied, whether save output. Default TRUE. wlevels output merge_mod_levels(), moderator(s) passed mod_levels_list(). moderators can represented one variable, , moderator () numeric variable, (b) dichotomous categorical variable, (c) factor string variable used lm() fit, vector names moderators appeared data frame. least one moderators categorical variable represented one variable, user-created dummy variables used lavaan::sem(), must list names moderators, moderators represented vector names. example: list(\"w1\", c(\"gpgp2\", \"gpgp3\"), first moderator w1 second moderator three-categorical variable represented gpgp2 gpgp3. w_type Character. Whether moderator \"numeric\" variable \"categorical\" variable. \"auto\", function try determine type automatically.  See mod_levels_list() information. w_method Character, either \"sd\" \"percentile\". \"sd\", levels defined distance mean terms standard deviation. \"percentile\", levels defined percentiles.  See mod_levels_list() information. sd_from_mean numeric vector. Specify distance standard deviation mean level. Default c(-1, 0, 1) one moderator, c(-1, 1) one moderator. Ignored w_method equal \"sd\". See mod_levels_list() information. percentiles numeric vector. Specify percentile (proportion) level. Default c(.16, .50, .84) one moderator, c(.16, .84) one moderator. Ignored w_method equal \"percentile\". See mod_levels_list() information. output_type type output cond_indirect_effects(). \"data.frame\", default, output converted data frame. value, output list outputs cond_indirect(). mod_levels_list_args Additional arguments passed mod_levels_list() called creating levels moderators. Default list(). ... Arguments passed cond_indirect()","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"cond_indirect() returns indirect-class object. cond_indirect_effects() returns cond_indirect_effects-class object. two classes objects print methods printing results (see print.indirect() print.cond_indirect_effects())","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"model mediation pathway moderated one moderators, cond_indirect() cond_indirect_effects() can used compute conditional indirect effect one variable another variable, selected level(s) moderator(s). mediator(s) /specified (m) values moderator(s) specified, indirect effect one variable (x) another variable (y) computed. value(s) moderator(s) /specified (wvalues wlevels) mediators (m) specified, conditional direct effects one variable another computed.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"cond_indirect: Compute conditional, indirect, conditional indirect effects one set levels. cond_indirect_effects: Compute conditional, indirect, conditional indirect effects several sets levels. indirect_effect: Compute indirect effects. wrapper cond_indirect(). Can used moderator.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/cond_indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional, Indirect, and Conditional Indirect Effects — cond_indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x  + d1 * w1 + e1 * x:w1 m2 ~ a2 * x y  ~ b1 * m1 + b2 * m2 + cp * x \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit) hi_w1 <- mean(dat$w1) + sd(dat$w1)  # Examples for cond_indirect():  # Conditional effect from x to m1 when w1 is 1 SD above mean cond_indirect(x = \"x\", y = \"m1\",               wvalues = c(w1 = hi_w1), fit = fit) #>  #> == Conditional  Effect   == #>                                 #>  Path:               x -> m1    #>  Moderators:         w1         #>  Conditional Effect: 0.750      #>  When:               w1 = 1.228 #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1)) #> Computation: #>   ((0.46277) + (0.23380)*(1.22806))  # Indirect effect from x1 through m2 to y cond_indirect(x = \"x\", y = \"y\", m = \"m2\", fit = fit) #>  #> == Indirect Effect == #>                               #>  Path:           x -> m2 -> y #>  Indirect Effect 0.052        #>  #> Computation Formula: #>   (b.m2~x)*(b.y~m2) #> Computation: #>   (0.16554)*(0.31451) #> Coefficients of Component Paths: #>  Path Coefficient #>  m2~x       0.166 #>  y~m2       0.315 #>   # Conditional Indirect effect from x1 through m1 to y, when w1 is 1 SD above mean cond_indirect(x = \"x\", y = \"y\", m = \"m1\",               wvalues = c(w1 = hi_w1), fit = fit) #>  #> == Conditional Indirect Effect   == #>                                            #>  Path:                        x -> m1 -> y #>  Moderators:                  w1           #>  Conditional Indirect Effect: -0.031       #>  When:                        w1 = 1.228   #>  #> Computation Formula: #>   (b.m1~x + (b.x:w1)*(w1))*(b.y~m1) #> Computation: #>   ((0.46277) + (0.23380)*(1.22806))*(-0.04197) #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>  m1~x              0.750                0.463 #>  y~m1             -0.042               -0.042 #>     # Examples for cond_indirect_effects():  # Create levels of w1, the moderators w1levels <- mod_levels(\"w1\", fit = fit) w1levels #>                 w1 #> M+1.0SD  1.2280576 #> Mean     0.2589999 #> M-1.0SD -0.7100578  # Conditional effects from x to m1 when w1 is equal to each of the levels cond_indirect_effects(x = \"x\", y = \"m1\",                       wlevels = w1levels, fit = fit) #>  #> == Conditional effects == #>  #>  Path: x -> m1 #>  Conditioned on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  m1~x #> 1 M+1.0SD  1.228 0.750 0.750 #> 2 Mean     0.259 0.523 0.523 #> 3 M-1.0SD -0.710 0.297 0.297 #>  #>  - The 'ind' column shows the  effects. #>  - ‘m1~x’ is/are the path coefficient(s) along the path conditional on #>    the moderators. #>   # Conditional Indirect effect from x1 through m1 to y, # when w1 is equal to each of the levels cond_indirect_effects(x = \"x\", y = \"y\", m = \"m1\",                       wlevels = w1levels, fit = fit) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditioned on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)    ind  m1~x   y~m1 #> 1 M+1.0SD  1.228 -0.031 0.750 -0.042 #> 2 Mean     0.259 -0.022 0.523 -0.042 #> 3 M-1.0SD -0.710 -0.012 0.297 -0.042 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/confint.index_of_mome.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval of the Output of 'index_of_mome' — confint.index_of_mome","title":"Confidence Interval of the Output of 'index_of_mome' — confint.index_of_mome","text":"Extract confidence interval output index_of_mome().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.index_of_mome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval of the Output of 'index_of_mome' — confint.index_of_mome","text":"","code":"# S3 method for index_of_mome confint(object, parm, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/confint.index_of_mome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval of the Output of 'index_of_mome' — confint.index_of_mome","text":"object output index_of_mome(). parm Ignored. level level confidence bootstrap confidence interval. Default .95. Must match level stored confidence interval. ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.index_of_mome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval of the Output of 'index_of_mome' — confint.index_of_mome","text":"one-row-two-column data frame confidence limits.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.index_of_mome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval of the Output of 'index_of_mome' — confint.index_of_mome","text":"confint method index_of_mome-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect effect or conditional indirect effect — confint.indirect","title":"Indirect effect or conditional indirect effect — confint.indirect","text":"Return estimate indirect effect output indirect_i() cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect effect or conditional indirect effect — confint.indirect","text":"","code":"# S3 method for indirect confint(object, parm, level = 0.95, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect effect or conditional indirect effect — confint.indirect","text":"object output indirect_i() cond_indirect(). parm Ignored. Always return bootstrap confidence interval standardized moderation effect. level level confidence, default .95, returning 95% confidence interval. ... Additional arguments. Ignored function.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indirect effect or conditional indirect effect — confint.indirect","text":"just extracts returns element indirect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect effect or conditional indirect effect — confint.indirect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/confint.indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect effect or conditional indirect effect — confint.indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x   + b1 * w1 + d1 * x:w1 m2 ~ a2 * m1  + b2 * w2 + d2 * m1:w2 m3 ~ a3 * m2  + b3 * w3 + d3 * m2:w3 y  ~ a4 * m3  + b4 * w4 + d4 * m3:w4 \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  wvalues <- c(w1 = 5, w2 = 4, w3 = 2, w4 = 3)  indirect_1 <- indirect_i(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\", \"m3\"), fit = fit,                        wvalues = wvalues) indirect_2 <- (est[est$label == \"a1\", \"est\"] +                 wvalues[\"w1\"] * est[est$label == \"d1\", \"est\"]) *               (est[est$label == \"a2\", \"est\"] +                 wvalues[\"w2\"] * est[est$label == \"d2\", \"est\"]) *               (est[est$label == \"a3\", \"est\"] +                 wvalues[\"w3\"] * est[est$label == \"d3\", \"est\"]) *               (est[est$label == \"a4\", \"est\"] +                 wvalues[\"w4\"] * est[est$label == \"d4\", \"est\"]) indirect_1$indirect #> [1] 1.176673 indirect_2 #>       w1  #> 1.176673"},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Mediation: Sample Dataset — data_med","title":"Simple Mediation: Sample Dataset — data_med","text":"simple mediation model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Mediation: Sample Dataset — data_med","text":"","code":"data_med"},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simple Mediation: Sample Dataset — data_med","text":"data frame 100 rows 5 variables: x Predictor. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Mediation: Sample Dataset — data_med","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 ab := a * b \" fit <- sem(mod, data_med, fixed.x = FALSE) parameterEstimates(fit) #>    lhs op rhs label    est    se      z pvalue ci.lower ci.upper #> 1    m  ~   x     a  0.935 0.079 11.802  0.000    0.779    1.090 #> 2    m  ~  c1        0.198 0.075  2.629  0.009    0.050    0.345 #> 3    m  ~  c2       -0.168 0.101 -1.668  0.095   -0.366    0.029 #> 4    y  ~   m     b  0.785 0.243  3.227  0.001    0.308    1.261 #> 5    y  ~   x        0.508 0.298  1.704  0.088   -0.076    1.092 #> 6    y  ~  c1        0.140 0.189  0.743  0.458   -0.230    0.511 #> 7    y  ~  c2       -0.154 0.249 -0.620  0.535   -0.642    0.334 #> 8    m ~~   m        0.681 0.096  7.071  0.000    0.493    0.870 #> 9    y ~~   y        4.030 0.570  7.071  0.000    2.913    5.147 #> 10   x ~~   x        1.102 0.156  7.071  0.000    0.797    1.408 #> 11   x ~~  c1        0.026 0.116  0.221  0.825   -0.202    0.253 #> 12   x ~~  c2        0.100 0.087  1.143  0.253   -0.071    0.271 #> 13  c1 ~~  c1        1.218 0.172  7.071  0.000    0.880    1.555 #> 14  c1 ~~  c2       -0.092 0.092 -1.002  0.316   -0.272    0.088 #> 15  c2 ~~  c2        0.685 0.097  7.071  0.000    0.495    0.875 #> 16  ab := a*b    ab  0.733 0.236  3.112  0.002    0.272    1.195"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":null,"dir":"Reference","previous_headings":"","what":"A Complicated Mediation Model: Sample Dataset — data_med_complicated","title":"A Complicated Mediation Model: Sample Dataset — data_med_complicated","text":"mediation model two predictors, two pathways,","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Complicated Mediation Model: Sample Dataset — data_med_complicated","text":"","code":"data_med_complicated"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Complicated Mediation Model: Sample Dataset — data_med_complicated","text":"data frame 300 rows 5 variables: x1 Predictor 1. Numeric. x2 Predictor 2. Numeric. m11 Mediator 1 Path 1. Numeric. m12 Mediator 2 Path 1. Numeric. m2 Mediator Path 2. Numeric. y1 Outcome variable 1. Numeric. y2 Outcome variable 2. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_complicated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Complicated Mediation Model: Sample Dataset — data_med_complicated","text":"","code":"data(data_med_complicated) dat <- data_med_complicated summary(lm_m11 <- lm(m11 ~ x1 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m11 ~ x1 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.64294 -0.55585  0.08916  0.67243  1.70807  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.13910    1.32319   1.617 0.109276     #> x1           0.35204    0.08946   3.935 0.000158 *** #> x2          -0.04471    0.09540  -0.469 0.640340     #> c1           0.07961    0.10081   0.790 0.431666     #> c2          -0.09890    0.08790  -1.125 0.263356     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9613 on 95 degrees of freedom #> Multiple R-squared:  0.1679,\tAdjusted R-squared:  0.1328  #> F-statistic: 4.791 on 4 and 95 DF,  p-value: 0.001453 #>  summary(lm_m12 <- lm(m12 ~ m11 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m12 ~ m11 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.4487 -0.6344  0.1066  0.5949  2.4585  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  8.23329    1.38073   5.963 4.32e-08 *** #> m11          0.45408    0.10562   4.299 4.18e-05 *** #> x1          -0.21182    0.09931  -2.133   0.0355 *   #> x2          -0.07206    0.09832  -0.733   0.4654     #> c1           0.20391    0.10412   1.959   0.0531 .   #> c2          -0.42456    0.09109  -4.661 1.04e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9896 on 94 degrees of freedom #> Multiple R-squared:  0.3525,\tAdjusted R-squared:  0.318  #> F-statistic: 10.23 on 5 and 94 DF,  p-value: 7.515e-08 #>  summary(lm_m2 <- lm(m2 ~ x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.25156 -0.62962 -0.02606  0.64273  1.67002  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  7.19926    1.21769   5.912 5.28e-08 *** #> x1           0.02233    0.08232   0.271   0.7868     #> x2           0.28901    0.08779   3.292   0.0014 **  #> c1          -0.13437    0.09277  -1.448   0.1508     #> c2          -0.01723    0.08089  -0.213   0.8318     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.8847 on 95 degrees of freedom #> Multiple R-squared:  0.1167,\tAdjusted R-squared:  0.07948  #> F-statistic: 3.137 on 4 and 95 DF,  p-value: 0.01805 #>  summary(lm_y1 <- lm(y1 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y1 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.52098 -0.63677 -0.04699  0.60540  2.05599  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  7.44629    1.72403   4.319 3.95e-05 *** #> m11          0.14694    0.10966   1.340  0.18354     #> m12          0.23402    0.09787   2.391  0.01884 *   #> m2          -0.43300    0.10894  -3.975  0.00014 *** #> x1          -0.07840    0.09651  -0.812  0.41865     #> x2           0.00322    0.09875   0.033  0.97406     #> c1           0.04238    0.10188   0.416  0.67842     #> c2          -0.04145    0.09592  -0.432  0.66666     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9391 on 92 degrees of freedom #> Multiple R-squared:  0.2786,\tAdjusted R-squared:  0.2237  #> F-statistic: 5.075 on 7 and 92 DF,  p-value: 6.688e-05 #>  summary(lm_y2 <- lm(y2 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y2 ~ m11 + m12 + m2 + x1 + x2 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.4153 -0.5711  0.1328  0.6137  2.2840  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) 10.98160    1.95311   5.623    2e-07 *** #> m11          0.02417    0.12423   0.195 0.846185     #> m12          0.13525    0.11088   1.220 0.225649     #> m2          -0.43598    0.12341  -3.533 0.000645 *** #> x1           0.11534    0.10933   1.055 0.294202     #> x2           0.06204    0.11187   0.555 0.580515     #> c1          -0.04905    0.11542  -0.425 0.671820     #> c2           0.04581    0.10867   0.422 0.674297     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.064 on 92 degrees of freedom #> Multiple R-squared:  0.1526,\tAdjusted R-squared:  0.08818  #> F-statistic: 2.368 on 7 and 92 DF,  p-value: 0.02857 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Mediation with a-Path Moderated: Sample Dataset — data_med_mod_a","title":"Simple Mediation with a-Path Moderated: Sample Dataset — data_med_mod_a","text":"simple mediation model -path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Mediation with a-Path Moderated: Sample Dataset — data_med_mod_a","text":"","code":"data_med_mod_a"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simple Mediation with a-Path Moderated: Sample Dataset — data_med_mod_a","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w Moderator. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_a.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Mediation with a-Path Moderated: Sample Dataset — data_med_mod_a","text":"","code":"library(lavaan) data(data_med_mod_a) data_med_mod_a$xw <-  data_med_mod_a$x *  data_med_mod_a$w mod <- \" m ~ a * x + w + d * xw + c1 + c2 y ~ b * m + x + w + c1 + c2 w ~~ v_w * w w ~ m_w * 1 ab := a * b ab_lo := (a + d * (m_w - sqrt(v_w))) * b ab_hi := (a + d * (m_w + sqrt(v_w))) * b \" fit <- sem(mod, data_med_mod_a,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 11, 12, 31:33), ] #>      lhs op                     rhs label   est    se      z pvalue ci.lower #> 1      m  ~                       x     a 0.096 0.455  0.211  0.833   -0.796 #> 3      m  ~                      xw     d 0.978 0.040 24.656  0.000    0.901 #> 6      y  ~                       m     b 0.923 0.040 23.115  0.000    0.845 #> 11     w ~~                       w   v_w 0.960 0.136  7.071  0.000    0.694 #> 12     w ~1                           m_w 2.179 0.098 22.239  0.000    1.987 #> 31    ab :=                     a*b    ab 0.089 0.420  0.211  0.833   -0.735 #> 32 ab_lo := (a+d*(m_w-sqrt(v_w)))*b ab_lo 1.172 0.427  2.742  0.006    0.334 #> 33 ab_hi := (a+d*(m_w+sqrt(v_w)))*b ab_hi 2.942 0.438  6.723  0.000    2.085 #>    ci.upper #> 1     0.988 #> 3     1.056 #> 6     1.001 #> 11    1.226 #> 12    2.371 #> 31    0.912 #> 32    2.010 #> 33    3.800"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Mediation with Both Paths Moderated (Two Moderators): Sample Dataset — data_med_mod_ab","title":"Simple Mediation with Both Paths Moderated (Two Moderators): Sample Dataset — data_med_mod_ab","text":"simple mediation model -path b-path moderated moderator.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Mediation with Both Paths Moderated (Two Moderators): Sample Dataset — data_med_mod_ab","text":"","code":"data_med_mod_ab"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simple Mediation with Both Paths Moderated (Two Moderators): Sample Dataset — data_med_mod_ab","text":"data frame 100 rows 7 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Mediation with Both Paths Moderated (Two Moderators): Sample Dataset — data_med_mod_ab","text":"","code":"library(lavaan) data(data_med_mod_ab) data_med_mod_ab$xw1 <-  data_med_mod_ab$x *  data_med_mod_ab$w1 data_med_mod_ab$mw2 <-  data_med_mod_ab$m *  data_med_mod_ab$w2 mod <- \" m ~ a * x + w1 + d1 * xw1 + c1 + c2 y ~ b * m + x + w1 + w2 + d2 * mw2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 ab := a * b ab_lolo := (a + d1 * (m_w1 - sqrt(v_w1))) * (b + d2 * (m_w2 - sqrt(v_w2))) ab_lohi := (a + d1 * (m_w1 - sqrt(v_w1))) * (b + d2 * (m_w2 + sqrt(v_w2))) ab_hilo := (a + d1 * (m_w1 + sqrt(v_w1))) * (b + d2 * (m_w2 - sqrt(v_w2))) ab_hihi := (a + d1 * (m_w1 + sqrt(v_w1))) * (b + d2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_ab,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 10, 41:45), ] #>        lhs op                                               rhs   label    est #> 1        m  ~                                                 x       a -0.663 #> 3        m  ~                                               xw1      d1  0.204 #> 6        y  ~                                                 m       b -0.150 #> 10       y  ~                                               mw2      d2  0.203 #> 41      ab :=                                               a*b      ab  0.099 #> 42 ab_lolo := (a+d1*(m_w1-sqrt(v_w1)))*(b+d2*(m_w2-sqrt(v_w2))) ab_lolo  0.043 #> 43 ab_lohi := (a+d1*(m_w1-sqrt(v_w1)))*(b+d2*(m_w2+sqrt(v_w2))) ab_lohi  0.108 #> 44 ab_hilo := (a+d1*(m_w1+sqrt(v_w1)))*(b+d2*(m_w2-sqrt(v_w2))) ab_hilo  0.159 #> 45 ab_hihi := (a+d1*(m_w1+sqrt(v_w1)))*(b+d2*(m_w2+sqrt(v_w2))) ab_hihi  0.397 #>       se      z pvalue ci.lower ci.upper #> 1  0.179 -3.700  0.000   -1.014   -0.312 #> 3  0.012 16.774  0.000    0.180    0.228 #> 6  0.048 -3.115  0.002   -0.244   -0.056 #> 10 0.012 16.258  0.000    0.178    0.227 #> 41 0.042  2.383  0.017    0.018    0.181 #> 42 0.039  1.100  0.271   -0.034    0.120 #> 43 0.095  1.129  0.259   -0.079    0.295 #> 44 0.050  3.173  0.002    0.061    0.257 #> 45 0.095  4.175  0.000    0.211    0.584"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Mediation with Both Paths Moderated By a Moderator: Sample Dataset — data_med_mod_ab1","title":"Simple Mediation with Both Paths Moderated By a Moderator: Sample Dataset — data_med_mod_ab1","text":"simple mediation model -path b-path moderated one moderator.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Mediation with Both Paths Moderated By a Moderator: Sample Dataset — data_med_mod_ab1","text":"","code":"data_med_mod_ab1"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simple Mediation with Both Paths Moderated By a Moderator: Sample Dataset — data_med_mod_ab1","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w Moderator. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_ab1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Mediation with Both Paths Moderated By a Moderator: Sample Dataset — data_med_mod_ab1","text":"","code":"library(lavaan) data(data_med_mod_ab1) data_med_mod_ab1$xw <-  data_med_mod_ab1$x *  data_med_mod_ab1$w data_med_mod_ab1$mw <-  data_med_mod_ab1$m *  data_med_mod_ab1$w mod <- \" m ~ a * x + w + da * xw + c1 + c2 y ~ b * m + x + w + db * mw + c1 + c2 w ~~ v_w * w w ~ m_w * 1 ab := a * b ab_lo := (a + da * (m_w - sqrt(v_w))) * (b + db * (m_w - sqrt(v_w))) ab_hi := (a + da * (m_w + sqrt(v_w))) * (b + db * (m_w + sqrt(v_w))) \" fit <- sem(mod, data_med_mod_ab1,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 9, 38:40), ] #>      lhs op                                           rhs label    est    se #> 1      m  ~                                             x     a -1.255 0.164 #> 3      m  ~                                            xw    da  0.264 0.011 #> 6      y  ~                                             m     b -1.276 0.036 #> 9      y  ~                                            mw    db  0.331 0.014 #> 38    ab :=                                           a*b    ab  1.602 0.214 #> 39 ab_lo := (a+da*(m_w-sqrt(v_w)))*(b+db*(m_w-sqrt(v_w))) ab_lo -0.006 0.014 #> 40 ab_hi := (a+da*(m_w+sqrt(v_w)))*(b+db*(m_w+sqrt(v_w))) ab_hi  0.246 0.096 #>          z pvalue ci.lower ci.upper #> 1   -7.659  0.000   -1.576   -0.934 #> 3   23.531  0.000    0.242    0.286 #> 6  -35.730  0.000   -1.346   -1.206 #> 9   23.119  0.000    0.303    0.359 #> 38   7.489  0.000    1.182    2.021 #> 39  -0.437  0.662   -0.033    0.021 #> 40   2.555  0.011    0.057    0.435"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Mediation with b-Path Moderated: Sample Dataset — data_med_mod_b","title":"Simple Mediation with b-Path Moderated: Sample Dataset — data_med_mod_b","text":"simple mediation model b-path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Mediation with b-Path Moderated: Sample Dataset — data_med_mod_b","text":"","code":"data_med_mod_b"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simple Mediation with b-Path Moderated: Sample Dataset — data_med_mod_b","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w Moderator. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Mediation with b-Path Moderated: Sample Dataset — data_med_mod_b","text":"","code":"library(lavaan) data(data_med_mod_b) data_med_mod_b$mw <-  data_med_mod_b$m *  data_med_mod_b$w mod <- \" m ~ a * x + w + c1 + c2 y ~ b * m + x + d * mw + c1 + c2 w ~~ v_w * w w ~ m_w * 1 ab := a * b ab_lo := a * (b + d * (m_w - sqrt(v_w))) ab_hi := a * (b + d * (m_w + sqrt(v_w))) \" fit <- sem(mod, data_med_mod_b,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 5, 7, 10, 11, 30:32), ] #>      lhs op                     rhs label   est    se      z pvalue ci.lower #> 1      m  ~                       x     a 0.300 0.073  4.127  0.000    0.158 #> 5      y  ~                       m     b 0.841 0.475  1.770  0.077   -0.090 #> 7      y  ~                      mw     d 0.629 0.039 16.123  0.000    0.553 #> 10     w ~~                       w   v_w 0.960 0.136  7.071  0.000    0.694 #> 11     w ~1                           m_w 2.179 0.098 22.239  0.000    1.987 #> 30    ab :=                     a*b    ab 0.253 0.155  1.626  0.104   -0.052 #> 31 ab_lo := a*(b+d*(m_w-sqrt(v_w))) ab_lo 0.480 0.186  2.578  0.010    0.115 #> 32 ab_hi := a*(b+d*(m_w+sqrt(v_w))) ab_hi 0.850 0.254  3.342  0.001    0.352 #>    ci.upper #> 1     0.443 #> 5     1.773 #> 7     0.706 #> 10    1.226 #> 11    2.371 #> 30    0.557 #> 31    0.844 #> 32    1.349"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"A Simple Mediation Model with b-Path Moderated-Moderation: Sample Dataset — data_med_mod_b_mod","title":"A Simple Mediation Model with b-Path Moderated-Moderation: Sample Dataset — data_med_mod_b_mod","text":"simple mediation model moderated-mediation b-path.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Simple Mediation Model with b-Path Moderated-Moderation: Sample Dataset — data_med_mod_b_mod","text":"","code":"data_med_mod_b_mod"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Simple Mediation Model with b-Path Moderated-Moderation: Sample Dataset — data_med_mod_b_mod","text":"data frame 100 rows 5 variables: x Predictor. Numeric. w1 Moderator b-path. Numeric. w2 Moderator moderating effect w1. Numeric. m Mediator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_b_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A Simple Mediation Model with b-Path Moderated-Moderation: Sample Dataset — data_med_mod_b_mod","text":"","code":"data(data_med_mod_b_mod) dat <- data_med_mod_b_mod summary(lm_m <- lm(m ~ x + c1 + c2, dat)) #>  #> Call: #> lm(formula = m ~ x + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.20492 -0.61466 -0.00616  0.66926  2.99114  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.28350    1.41914  -0.904    0.368     #> x            0.48501    0.09547   5.080 1.85e-06 *** #> c1           0.03757    0.08769   0.428    0.669     #> c2           0.02441    0.08581   0.285    0.777     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9498 on 96 degrees of freedom #> Multiple R-squared:  0.2123,\tAdjusted R-squared:  0.1877  #> F-statistic: 8.625 on 3 and 96 DF,  p-value: 3.987e-05 #>  summary(lm_y <- lm(y ~ m*w1*w2 + x + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m * w1 * w2 + x + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.18204 -0.47099 -0.02998  0.53605  2.77463  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -17.40513    6.18440  -2.814  0.00602 **  #> m             6.47229    1.54231   4.196 6.40e-05 *** #> w1            5.06717    1.20737   4.197 6.39e-05 *** #> w2            8.08655    1.97632   4.092 9.39e-05 *** #> x             0.08443    0.10955   0.771  0.44293     #> c1           -0.09960    0.08419  -1.183  0.23995     #> c2           -0.14547    0.08432  -1.725  0.08798 .   #> m:w1         -1.23202    0.30195  -4.080 9.79e-05 *** #> m:w2         -1.98779    0.47670  -4.170 7.06e-05 *** #> w1:w2        -1.63594    0.39291  -4.164 7.22e-05 *** #> m:w1:w2       0.39674    0.09034   4.391 3.09e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9022 on 89 degrees of freedom #> Multiple R-squared:  0.4306,\tAdjusted R-squared:  0.3667  #> F-statistic: 6.732 on 10 and 89 DF,  p-value: 1.025e-07 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_parallel","title":"Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_parallel","text":"parallel mediation model a1-path b2-path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_parallel","text":"","code":"data_med_mod_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_parallel","text":"data frame 100 rows 8 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_parallel","text":"","code":"library(lavaan) data(data_med_mod_parallel) data_med_mod_parallel$xw1 <-  data_med_mod_parallel$x *  data_med_mod_parallel$w1 data_med_mod_parallel$m2w2 <-  data_med_mod_parallel$m2 *  data_med_mod_parallel$w2 mod <- \" m1 ~ a1 * x + w1 + da1 * xw1 + c1 + c2 m2 ~ a2 * x + w1 + c1 + c2 y ~ b1 * m1 + b2 * m2 + x + w1 + w2 + db2 * m2w2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 a1b1 := a1 * b1 a2b2 := a2 * b2 a1b1_w1lo := (a1 + da1 * (m_w1 - sqrt(v_w1))) * b1 a1b1_w1hi := (a1 + da1 * (m_w1 + sqrt(v_w1))) * b2 a2b2_w2lo := a2 * (b2 + db2 * (m_w2 - sqrt(v_w2))) a2b2_w2hi := a2 * (b2 + db2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 10, 11, 15, 48:53), ] #>          lhs op                           rhs     label    est    se      z #> 1         m1  ~                             x        a1 -1.328 0.136 -9.741 #> 3         m1  ~                           xw1       da1  0.289 0.010 28.738 #> 6         m2  ~                             x        a2  0.184 0.068  2.704 #> 10         y  ~                            m1        b1  0.368 0.030 12.437 #> 11         y  ~                            m2        b2 -0.363 0.091 -3.966 #> 15         y  ~                          m2w2       db2  0.296 0.007 39.907 #> 48      a1b1 :=                         a1*b1      a1b1 -0.489 0.064 -7.669 #> 49      a2b2 :=                         a2*b2      a2b2 -0.067 0.030 -2.234 #> 50 a1b1_w1lo := (a1+da1*(m_w1-sqrt(v_w1)))*b1 a1b1_w1lo -0.075 0.042 -1.816 #> 51 a1b1_w1hi := (a1+da1*(m_w1+sqrt(v_w1)))*b2 a1b1_w1hi -0.155 0.053 -2.943 #> 52 a2b2_w2lo := a2*(b2+db2*(m_w2-sqrt(v_w2))) a2b2_w2lo  0.046 0.025  1.831 #> 53 a2b2_w2hi := a2*(b2+db2*(m_w2+sqrt(v_w2))) a2b2_w2hi  0.158 0.061  2.571 #>    pvalue ci.lower ci.upper #> 1   0.000   -1.595   -1.061 #> 3   0.000    0.270    0.309 #> 6   0.007    0.051    0.318 #> 10  0.000    0.310    0.426 #> 11  0.000   -0.542   -0.183 #> 15  0.000    0.282    0.311 #> 48  0.000   -0.614   -0.364 #> 49  0.025   -0.126   -0.008 #> 50  0.069   -0.157    0.006 #> 51  0.003   -0.258   -0.052 #> 52  0.067   -0.003    0.095 #> 53  0.010    0.038    0.278"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_parallel_cat","title":"Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_parallel_cat","text":"parallel mediation model two categorical moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_parallel_cat","text":"","code":"data_med_mod_parallel_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_parallel_cat","text":"data frame 300 rows 8 variables: x Predictor. Numeric. w1 Moderator. String. Values: \"group1\", \"group2\", \"group3\" w2 Moderator. String. Values: \"team1\", \"team2\" m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_parallel_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_parallel_cat","text":"","code":"data(data_med_mod_parallel_cat) dat <- data_med_mod_parallel_cat summary(lm_m1 <- lm(m1 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m1 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.7472 -0.6656  0.0500  0.6887  3.4973  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.143612   0.692888   1.651   0.0999 .   #> x            0.902275   0.087667  10.292   <2e-16 *** #> w1group2     1.150056   0.800215   1.437   0.1517     #> w1group3     0.708515   0.846560   0.837   0.4033     #> c1          -0.002886   0.062350  -0.046   0.9631     #> c2          -0.127222   0.059342  -2.144   0.0329 *   #> x:w1group2  -0.233639   0.117285  -1.992   0.0473 *   #> x:w1group3  -0.238876   0.123572  -1.933   0.0542 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.025 on 292 degrees of freedom #> Multiple R-squared:   0.49,\tAdjusted R-squared:  0.4777  #> F-statistic: 40.07 on 7 and 292 DF,  p-value: < 2.2e-16 #>  summary(lm_m2 <- lm(m2 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.7490 -0.5931 -0.0192  0.6492  3.2015  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  3.224453   0.648430   4.973 1.13e-06 *** #> x            0.438166   0.082042   5.341 1.86e-07 *** #> w1group2     0.190078   0.748870   0.254   0.7998     #> w1group3    -0.150416   0.792242  -0.190   0.8496     #> c1          -0.129800   0.058349  -2.225   0.0269 *   #> c2           0.007616   0.055535   0.137   0.8910     #> x:w1group2  -0.053156   0.109759  -0.484   0.6285     #> x:w1group3   0.025153   0.115643   0.218   0.8280     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9597 on 292 degrees of freedom #> Multiple R-squared:  0.2529,\tAdjusted R-squared:  0.235  #> F-statistic: 14.12 on 7 and 292 DF,  p-value: 8.862e-16 #>  summary(lm_y <- lm(y ~ m1*w2 + m2*w2 + m1 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m1 * w2 + m2 * w2 + m1 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.9753 -0.9732 -0.0471  0.9780  4.0917  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.335755   0.823638  -0.408 0.683833     #> m1           0.897601   0.094224   9.526  < 2e-16 *** #> w2team2      0.683583   0.919420   0.743 0.457787     #> m2           0.426387   0.115277   3.699 0.000259 *** #> x            0.044777   0.088262   0.507 0.612315     #> w1group2    -0.194036   0.189154  -1.026 0.305839     #> w1group3    -0.031134   0.204115  -0.153 0.878874     #> c1          -0.125317   0.083119  -1.508 0.132728     #> c2           0.083940   0.078548   1.069 0.286119     #> m1:w2team2   0.006921   0.120168   0.058 0.954113     #> w2team2:m2  -0.080865   0.159015  -0.509 0.611463     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.338 on 289 degrees of freedom #> Multiple R-squared:  0.5841,\tAdjusted R-squared:  0.5697  #> F-statistic: 40.59 on 10 and 289 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial Mediation with Two Moderators: Sample Dataset — data_med_mod_serial","title":"Serial Mediation with Two Moderators: Sample Dataset — data_med_mod_serial","text":"simple mediation model -path b2-path moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial Mediation with Two Moderators: Sample Dataset — data_med_mod_serial","text":"","code":"data_med_mod_serial"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Serial Mediation with Two Moderators: Sample Dataset — data_med_mod_serial","text":"data frame 100 rows 8 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial Mediation with Two Moderators: Sample Dataset — data_med_mod_serial","text":"","code":"library(lavaan) data(data_med_mod_serial) data_med_mod_serial$xw1 <-  data_med_mod_serial$x *  data_med_mod_serial$w1 data_med_mod_serial$m2w2 <-  data_med_mod_serial$m2 *  data_med_mod_serial$w2 mod <- \" m1 ~ a * x + w1 + da1 * xw1 + c1 + c2 m2 ~ b1 * m1 + x + w1 + c1 + c2 y ~ b2 * m2 + m1 + x + w1 + w2 + db2 * m2w2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 ab1b2 := a * b1 * b2 ab1b2_lolo := (a + da1 * (m_w1 - sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 - sqrt(v_w2))) ab1b2_lohi := (a + da1 * (m_w1 - sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 + sqrt(v_w2))) ab1b2_hilo := (a + da1 * (m_w1 + sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 - sqrt(v_w2))) ab1b2_hihi := (a + da1 * (m_w1 + sqrt(v_w1))) * b1 * (b2 + db2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_serial,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 11, 16, 49:53), ] #>           lhs op                                                     rhs #> 1          m1  ~                                                       x #> 3          m1  ~                                                     xw1 #> 6          m2  ~                                                      m1 #> 11          y  ~                                                      m2 #> 16          y  ~                                                    m2w2 #> 49      ab1b2 :=                                                 a*b1*b2 #> 50 ab1b2_lolo := (a+da1*(m_w1-sqrt(v_w1)))*b1*(b2+db2*(m_w2-sqrt(v_w2))) #> 51 ab1b2_lohi := (a+da1*(m_w1-sqrt(v_w1)))*b1*(b2+db2*(m_w2+sqrt(v_w2))) #> 52 ab1b2_hilo := (a+da1*(m_w1+sqrt(v_w1)))*b1*(b2+db2*(m_w2-sqrt(v_w2))) #> 53 ab1b2_hihi := (a+da1*(m_w1+sqrt(v_w1)))*b1*(b2+db2*(m_w2+sqrt(v_w2))) #>         label    est    se      z pvalue ci.lower ci.upper #> 1           a -1.328 0.136 -9.741  0.000   -1.595   -1.061 #> 3         da1  0.289 0.010 28.738  0.000    0.270    0.309 #> 6          b1  0.183 0.032  5.712  0.000    0.120    0.246 #> 11         b2 -0.469 0.092 -5.075  0.000   -0.651   -0.288 #> 16        db2  0.333 0.007 45.421  0.000    0.319    0.348 #> 49      ab1b2  0.114 0.032  3.535  0.000    0.051    0.177 #> 50 ab1b2_lolo -0.009 0.006 -1.381  0.167   -0.021    0.004 #> 51 ab1b2_lohi -0.033 0.019 -1.711  0.087   -0.071    0.005 #> 52 ab1b2_hilo  0.018 0.010  1.892  0.058   -0.001    0.037 #> 53 ab1b2_hihi  0.070 0.022  3.219  0.001    0.027    0.112"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_cat","title":"Serial Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_cat","text":"serial mediation model two categorical moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_cat","text":"","code":"data_med_mod_serial_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Serial Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_cat","text":"data frame 300 rows 8 variables: x Predictor. Numeric. w1 Moderator. String. Values: \"group1\", \"group2\", \"group3\" w2 Moderator. String. Values: \"team1\", \"team2\" m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_cat","text":"","code":"data(data_med_mod_serial_cat) dat <- data_med_mod_serial_cat summary(lm_m1 <- lm(m1 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m1 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.48162 -0.63917  0.03616  0.62807  2.88106  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -0.13552    0.66475  -0.204 0.838596     #> x            0.97270    0.10335   9.411  < 2e-16 *** #> w1group2    -0.23379    0.90635  -0.258 0.796628     #> w1group3     2.53055    0.90458   2.797 0.005493 **  #> c1           0.06033    0.06185   0.975 0.330139     #> c2           0.04888    0.05965   0.819 0.413195     #> x:w1group2  -0.03211    0.14433  -0.222 0.824096     #> x:w1group3  -0.51225    0.14585  -3.512 0.000515 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.047 on 292 degrees of freedom #> Multiple R-squared:  0.4478,\tAdjusted R-squared:  0.4346  #> F-statistic: 33.83 on 7 and 292 DF,  p-value: < 2.2e-16 #>  summary(lm_m2 <- lm(m2 ~ m1 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ m1 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -3.03503 -0.65833  0.02794  0.64110  2.99045  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  3.314339   0.443355   7.476 8.95e-13 *** #> m1           0.363210   0.055052   6.598 1.95e-10 *** #> x            0.005616   0.072660   0.077  0.93844     #> w1group2    -0.415468   0.148938  -2.790  0.00562 **  #> w1group3    -0.075908   0.145738  -0.521  0.60286     #> c1          -0.034240   0.059456  -0.576  0.56513     #> c2           0.010818   0.057533   0.188  0.85098     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.01 on 293 degrees of freedom #> Multiple R-squared:  0.2334,\tAdjusted R-squared:  0.2177  #> F-statistic: 14.87 on 6 and 293 DF,  p-value: 7.661e-15 #>  summary(lm_y <- lm(y ~ m2*w2 + m1 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m2 * w2 + m1 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.30328 -0.69259  0.03058  0.67952  2.89379  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.81161    0.56116   3.228  0.00139 **  #> m2           0.39472    0.07703   5.124 5.46e-07 *** #> w2team2      0.48363    0.56320   0.859  0.39120     #> m1           0.11568    0.05984   1.933  0.05418 .   #> x           -0.06053    0.07369  -0.821  0.41210     #> w1group2    -0.02577    0.15383  -0.168  0.86706     #> w1group3    -0.14960    0.14819  -1.010  0.31358     #> c1          -0.08765    0.06035  -1.452  0.14750     #> c2           0.08223    0.05853   1.405  0.16112     #> m2:w2team2  -0.07549    0.10503  -0.719  0.47288     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.024 on 290 degrees of freedom #> Multiple R-squared:  0.2074,\tAdjusted R-squared:  0.1828  #> F-statistic:  8.43 on 9 and 290 DF,  p-value: 3.442e-11 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial-Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_serial_parallel","title":"Serial-Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_serial_parallel","text":"serial-parallel mediation model paths moderated.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial-Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_serial_parallel","text":"","code":"data_med_mod_serial_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Serial-Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_serial_parallel","text":"data frame 100 rows 9 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. m11 Mediator 1 Path 1. Numeric. m12 Mediator 2 Path 2. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial-Parallel Mediation with Two Moderators: Sample Dataset — data_med_mod_serial_parallel","text":"","code":"library(lavaan) data(data_med_mod_serial_parallel) data_med_mod_serial_parallel$xw1 <-  data_med_mod_serial_parallel$x *  data_med_mod_serial_parallel$w1 data_med_mod_serial_parallel$m2w2 <-  data_med_mod_serial_parallel$m2 *  data_med_mod_serial_parallel$w2 mod <- \" m11 ~ a1 * x + w1 + da11 * xw1 + c1 + c2 m12 ~ b11 * m11 + x + w1 + c1 + c2 m2 ~ a2 * x + c1 + c2 y ~ b12 * m12 + b2 * m2 + m11 + x + w1 + w2 + db2 * m2w2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 a1b11b22 := a1 * b11 * b12 a2b2 := a2 * b2 ab := a1b11b22 + a2b2 a1b11b12_w1lo := (a1 + da11 * (m_w1 - sqrt(v_w1))) * b11 * b12 a1b11b12_w1hi := (a1 + da11 * (m_w1 + sqrt(v_w1))) * b11 * b12 a2b2_w2lo := a2 * (b2 + db2 * (m_w2 - sqrt(v_w2))) a2b2_w2hi := a2 * (b2 + db2 * (m_w2 + sqrt(v_w2))) \" fit <- sem(mod, data_med_mod_serial_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[parameterEstimates(fit)$label != \"\", ] #>              lhs op                                 rhs         label    est #> 1            m11  ~                                   x            a1 -1.328 #> 3            m11  ~                                 xw1          da11  2.894 #> 6            m12  ~                                 m11           b11  0.248 #> 11            m2  ~                                   x            a2  0.349 #> 14             y  ~                                 m12           b12  0.320 #> 15             y  ~                                  m2            b2 -0.711 #> 20             y  ~                                m2w2           db2  4.057 #> 23            w1 ~~                                  w1          v_w1  0.012 #> 24            w1 ~1                                              m_w1  0.497 #> 25            w2 ~~                                  w2          v_w2  0.010 #> 26            w2 ~1                                              m_w2  0.304 #> 55      a1b11b22 :=                          a1*b11*b12      a1b11b22 -0.105 #> 56          a2b2 :=                               a2*b2          a2b2 -0.249 #> 57            ab :=                       a1b11b22+a2b2            ab -0.354 #> 58 a1b11b12_w1lo := (a1+da11*(m_w1-sqrt(v_w1)))*b11*b12 a1b11b12_w1lo -0.016 #> 59 a1b11b12_w1hi := (a1+da11*(m_w1+sqrt(v_w1)))*b11*b12 a1b11b12_w1hi  0.034 #> 60     a2b2_w2lo :=       a2*(b2+db2*(m_w2-sqrt(v_w2)))     a2b2_w2lo  0.044 #> 61     a2b2_w2hi :=       a2*(b2+db2*(m_w2+sqrt(v_w2)))     a2b2_w2hi  0.322 #>       se      z pvalue ci.lower ci.upper #> 1  0.136 -9.741  0.000   -1.595   -1.061 #> 3  0.101 28.738  0.000    2.697    3.091 #> 6  0.014 17.421  0.000    0.220    0.276 #> 11 0.034 10.154  0.000    0.282    0.417 #> 14 0.216  1.478  0.139   -0.104    0.744 #> 15 0.189 -3.768  0.000   -1.081   -0.341 #> 20 0.156 25.993  0.000    3.751    4.363 #> 23 0.002  7.071  0.000    0.009    0.015 #> 24 0.011 45.550  0.000    0.476    0.519 #> 25 0.001  7.071  0.000    0.007    0.012 #> 26 0.010 31.028  0.000    0.285    0.323 #> 55 0.072 -1.456  0.145   -0.247    0.036 #> 56 0.070 -3.533  0.000   -0.386   -0.111 #> 57 0.101 -3.507  0.000   -0.552   -0.156 #> 58 0.014 -1.149  0.251   -0.044    0.011 #> 59 0.024  1.396  0.163   -0.014    0.081 #> 60 0.069  0.633  0.527   -0.092    0.179 #> 61 0.078  4.111  0.000    0.168    0.475"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial-Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_parallel_cat","title":"Serial-Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_parallel_cat","text":"serial-parallel mediation model two categorical moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial-Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_parallel_cat","text":"","code":"data_med_mod_serial_parallel_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Serial-Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_parallel_cat","text":"data frame 300 rows 8 variables: x Predictor. Numeric. w1 Moderator. String. Values: \"group1\", \"group2\", \"group3\" w2 Moderator. String. Values: \"team1\", \"team2\" m11 Mediator 1 Path 1. Numeric. m12 Mediator 1 Path 1. Numeric. m2 Mediator Path 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_med_mod_serial_parallel_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial-Parallel Moderated Mediation with Two Categorical Moderators:\nSample Dataset — data_med_mod_serial_parallel_cat","text":"","code":"data(data_med_mod_serial_parallel_cat) dat <- data_med_mod_serial_parallel_cat summary(lm_m11 <- lm(m11 ~ x*w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m11 ~ x * w1 + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -2.0619 -0.6060 -0.0216  0.6404  3.4200  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.3209962  0.6435180   0.499  0.61829     #> x            0.9510556  0.0940888  10.108  < 2e-16 *** #> w1group2     0.9280457  0.8350532   1.111  0.26733     #> w1group3     1.9216220  0.8739049   2.199  0.02867 *   #> c1          -0.0009806  0.0545802  -0.018  0.98568     #> c2          -0.0064057  0.0580329  -0.110  0.91218     #> x:w1group2  -0.1964450  0.1338652  -1.467  0.14332     #> x:w1group3  -0.4204409  0.1276517  -3.294  0.00111 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.955 on 292 degrees of freedom #> Multiple R-squared:  0.4167,\tAdjusted R-squared:  0.4027  #> F-statistic:  29.8 on 7 and 292 DF,  p-value: < 2.2e-16 #>  summary(lm_m12 <- lm(m12 ~ m11 + x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m12 ~ m11 + x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.83583 -0.56576  0.02488  0.59982  2.07412  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.239944   0.480360   4.663 4.74e-06 *** #> m11          0.042372   0.058007   0.730    0.466     #> x            0.430485   0.068153   6.316 9.91e-10 *** #> w1group2     0.112602   0.140247   0.803    0.423     #> w1group3     0.051596   0.166553   0.310    0.757     #> c1           0.054272   0.054916   0.988    0.324     #> c2          -0.006007   0.058548  -0.103    0.918     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9642 on 293 degrees of freedom #> Multiple R-squared:  0.2655,\tAdjusted R-squared:  0.2505  #> F-statistic: 17.66 on 6 and 293 DF,  p-value: < 2.2e-16 #>  summary(lm_m2 <- lm(m2 ~ x + w1 + c1 + c2, dat)) #>  #> Call: #> lm(formula = m2 ~ x + w1 + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.50745 -0.72556  0.01446  0.74006  2.64019  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  2.87424    0.50746   5.664 3.52e-08 *** #> x            0.44820    0.05732   7.820 9.54e-14 *** #> w1group2    -0.12412    0.15005  -0.827    0.409     #> w1group3    -0.05783    0.16970  -0.341    0.733     #> c1          -0.02093    0.05907  -0.354    0.723     #> c2          -0.01997    0.06298  -0.317    0.751     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.037 on 294 degrees of freedom #> Multiple R-squared:  0.2303,\tAdjusted R-squared:  0.2172  #> F-statistic: 17.59 on 5 and 294 DF,  p-value: 3.033e-15 #>  summary(lm_y <- lm(y ~ m12 + m2*w2 + m12 + x + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ m12 + m2 * w2 + m12 + x + c1 + c2, data = dat) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -3.0979 -0.7856 -0.0818  0.7568  3.6255  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  0.462047   0.754233   0.613   0.5406     #> m12          0.815192   0.074408  10.956  < 2e-16 *** #> m2           0.448334   0.099012   4.528 8.68e-06 *** #> w2team2      1.308023   0.704869   1.856   0.0645 .   #> x            0.002084   0.073283   0.028   0.9773     #> c1          -0.020047   0.069981  -0.286   0.7747     #> c2          -0.022310   0.075188  -0.297   0.7669     #> m2:w2team2  -0.228928   0.122836  -1.864   0.0634 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 1.226 on 292 degrees of freedom #> Multiple R-squared:  0.4392,\tAdjusted R-squared:  0.4258  #> F-statistic: 32.67 on 7 and 292 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"One Moderator: Sample Dataset — data_mod","title":"One Moderator: Sample Dataset — data_mod","text":"one-moderator model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One Moderator: Sample Dataset — data_mod","text":"","code":"data_mod"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"One Moderator: Sample Dataset — data_mod","text":"data frame 100 rows 5 variables: x Predictor. Numeric. w Moderator. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One Moderator: Sample Dataset — data_mod","text":"","code":"library(lavaan) data(data_mod) data_mod$xw <- data_mod$x * data_mod$w mod <- \" y ~ a * x + w + d * xw + c1 + c2 w ~~ v_w * w w ~ m_w * 1 a_lo := a + d * (m_w - sqrt(v_w)) a_hi := a + d * (m_w + sqrt(v_w)) \" fit <- sem(mod, data_mod, fixed.x = FALSE) parameterEstimates(fit)[c(1, 3, 6, 7, 24, 25), ] #>     lhs op                 rhs label   est    se      z pvalue ci.lower #> 1     y  ~                   x     a 0.453 0.235  1.924  0.054   -0.008 #> 3     y  ~                  xw     d 0.596 0.020 29.951  0.000    0.557 #> 6     w ~~                   w   v_w 1.137 0.161  7.071  0.000    0.822 #> 7     w ~1                       m_w 3.213 0.107 30.142  0.000    3.005 #> 24 a_lo := a+d*(m_w-sqrt(v_w))  a_lo 1.733 0.244  7.113  0.000    1.256 #> 25 a_hi := a+d*(m_w+sqrt(v_w))  a_hi 3.004 0.247 12.178  0.000    2.521 #>    ci.upper #> 1     0.915 #> 3     0.635 #> 6     1.452 #> 7     3.422 #> 24    2.211 #> 25    3.487"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":null,"dir":"Reference","previous_headings":"","what":"Two Moderators: Sample Dataset — data_mod2","title":"Two Moderators: Sample Dataset — data_mod2","text":"two-moderator model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two Moderators: Sample Dataset — data_mod2","text":"","code":"data_mod2"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Two Moderators: Sample Dataset — data_mod2","text":"data frame 100 rows 6 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two Moderators: Sample Dataset — data_mod2","text":"","code":"library(lavaan) data(data_mod2) data_mod2$xw1 <- data_mod2$x * data_mod2$w1 data_mod2$xw2 <- data_mod2$x * data_mod2$w2 mod <- \" y ~ a * x + w1 + w2 + d1 * xw1 + d2 * xw2 + c1 + c2 w1 ~~ v_w1 * w1 w1 ~ m_w1 * 1 w2 ~~ v_w2 * w2 w2 ~ m_w2 * 1 a_lolo := a + d1 * (m_w1 - sqrt(v_w1)) + d2 * (m_w2 - sqrt(v_w2)) a_lohi := a + d1 * (m_w1 - sqrt(v_w1)) + d2 * (m_w2 + sqrt(v_w2)) a_hilo := a + d1 * (m_w1 + sqrt(v_w1)) + d2 * (m_w2 - sqrt(v_w2)) a_hihi := a + d1 * (m_w1 + sqrt(v_w1)) + d2 * (m_w2 + sqrt(v_w2)) \" fit <- sem(mod, data_mod2, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 5, 8:11, 34:37), ] #>       lhs op                                         rhs  label    est    se #> 1       y  ~                                           x      a  0.716 0.098 #> 4       y  ~                                         xw1     d1  0.107 0.009 #> 5       y  ~                                         xw2     d2 -0.191 0.009 #> 8      w1 ~~                                          w1   v_w1  0.987 0.140 #> 9      w1 ~1                                               m_w1  4.027 0.099 #> 10     w2 ~~                                          w2   v_w2  1.052 0.149 #> 11     w2 ~1                                               m_w2  2.959 0.103 #> 34 a_lolo := a+d1*(m_w1-sqrt(v_w1))+d2*(m_w2-sqrt(v_w2)) a_lolo  0.671 0.091 #> 35 a_lohi := a+d1*(m_w1-sqrt(v_w1))+d2*(m_w2+sqrt(v_w2)) a_lohi  0.279 0.089 #> 36 a_hilo := a+d1*(m_w1+sqrt(v_w1))+d2*(m_w2-sqrt(v_w2)) a_hilo  0.884 0.091 #> 37 a_hihi := a+d1*(m_w1+sqrt(v_w1))+d2*(m_w2+sqrt(v_w2)) a_hihi  0.492 0.090 #>          z pvalue ci.lower ci.upper #> 1    7.285  0.000    0.523    0.908 #> 4   12.461  0.000    0.090    0.124 #> 5  -22.359  0.000   -0.208   -0.174 #> 8    7.071  0.000    0.713    1.260 #> 9   40.545  0.000    3.833    4.222 #> 10   7.071  0.000    0.761    1.344 #> 11  28.845  0.000    2.758    3.160 #> 34   7.360  0.000    0.492    0.850 #> 35   3.134  0.002    0.105    0.454 #> 36   9.663  0.000    0.705    1.063 #> 37   5.481  0.000    0.316    0.668"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Moderation with One Categorical Moderator: Sample Dataset — data_mod_cat","title":"Moderation with One Categorical Moderator: Sample Dataset — data_mod_cat","text":"moderation model categorical moderator.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moderation with One Categorical Moderator: Sample Dataset — data_mod_cat","text":"","code":"data_mod_cat"},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Moderation with One Categorical Moderator: Sample Dataset — data_mod_cat","text":"data frame 300 rows 5 variables: x Predictor. Numeric. w Moderator. String. Values: \"group1\", \"group2\", \"group3\" y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_mod_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moderation with One Categorical Moderator: Sample Dataset — data_mod_cat","text":"","code":"data(data_mod_cat) dat <- data_mod_cat summary(lm_y <- lm(y ~ x*w + c1 + c2, dat)) #>  #> Call: #> lm(formula = y ~ x * w + c1 + c2, data = dat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -2.51583 -0.64354 -0.00324  0.62382  3.08839  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  3.740541   0.521689   7.170 6.17e-12 *** #> x            0.811466   0.087904   9.231  < 2e-16 *** #> wgroup2     -0.127138   0.458910  -0.277  0.78194     #> wgroup3      0.325005   0.415632   0.782  0.43487     #> c1          -0.003431   0.056895  -0.060  0.95196     #> c2          -0.059157   0.056892  -1.040  0.29929     #> x:wgroup2   -0.126358   0.140534  -0.899  0.36933     #> x:wgroup3   -0.376700   0.128669  -2.928  0.00368 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.9806 on 292 degrees of freedom #> Multiple R-squared:  0.3699,\tAdjusted R-squared:  0.3548  #> F-statistic: 24.49 on 7 and 292 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel Mediation: Sample Dataset — data_parallel","title":"Parallel Mediation: Sample Dataset — data_parallel","text":"parallel mediation model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel Mediation: Sample Dataset — data_parallel","text":"","code":"data_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parallel Mediation: Sample Dataset — data_parallel","text":"data frame 100 rows 6 variables: x Predictor. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel Mediation: Sample Dataset — data_parallel","text":"","code":"library(lavaan) data(data_parallel) mod <- \" m1 ~ a1 * x + c1 + c2 m2 ~ a2 * x + c1 + c2 y ~ b2 * m2 + b1 * m1 + x + c1 + c2 indirect1 := a1 * b1 indirect2 := a2 * b2 indirect := a1 * b1 + a2 * b2 \" fit <- sem(mod, data_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 7, 8, 27:29), ] #>          lhs op         rhs     label   est    se     z pvalue ci.lower #> 1         m1  ~           x        a1 0.877 0.112 7.823  0.000    0.657 #> 4         m2  ~           x        a2 0.297 0.108 2.753  0.006    0.086 #> 7          y  ~          m2        b2 0.471 0.190 2.484  0.013    0.099 #> 8          y  ~          m1        b1 0.486 0.182 2.667  0.008    0.129 #> 27 indirect1 :=       a1*b1 indirect1 0.427 0.169 2.524  0.012    0.095 #> 28 indirect2 :=       a2*b2 indirect2 0.140 0.076 1.845  0.065   -0.009 #> 29  indirect := a1*b1+a2*b2  indirect 0.566 0.185 3.058  0.002    0.203 #>    ci.upper #> 1     1.097 #> 4     0.508 #> 7     0.843 #> 8     0.844 #> 27    0.758 #> 28    0.288 #> 29    0.929"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial Mediation: Sample Dataset — data_serial","title":"Serial Mediation: Sample Dataset — data_serial","text":"serial mediation model.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial Mediation: Sample Dataset — data_serial","text":"","code":"data_serial"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Serial Mediation: Sample Dataset — data_serial","text":"data frame 100 rows 6 variables: x Predictor. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial Mediation: Sample Dataset — data_serial","text":"","code":"library(lavaan) data(data_serial) mod <- \" m1 ~ a * x + c1 + c2 m2 ~ b1 * m1 + x + c1 + c2 y ~ b2 * m2 + m1 + x + c1 + c2 indirect := a * b1 * b2 \" fit <- sem(mod, data_serial,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 8, 28), ] #>         lhs op     rhs    label   est    se     z pvalue ci.lower ci.upper #> 1        m1  ~       x        a 0.822 0.092 8.907  0.000    0.641    1.003 #> 4        m2  ~      m1       b1 0.421 0.099 4.237  0.000    0.226    0.615 #> 8         y  ~      m2       b2 0.521 0.221 2.361  0.018    0.088    0.953 #> 28 indirect := a*b1*b2 indirect 0.180 0.090 2.009  0.045    0.004    0.356"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Serial-Parallel Mediation: Sample Dataset — data_serial_parallel","title":"Serial-Parallel Mediation: Sample Dataset — data_serial_parallel","text":"mediation model serial parallel components.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serial-Parallel Mediation: Sample Dataset — data_serial_parallel","text":"","code":"data_serial_parallel"},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Serial-Parallel Mediation: Sample Dataset — data_serial_parallel","text":"data frame 100 rows 7 variables: x Predictor. Numeric. m11 Mediator 1 Path 1. Numeric. m12 Mediator 2 Path 1. Numeric. m2 Mediator Path 2. Numeric. y Outcome variable. Numeric. c1 Control variable. Numeric. c2 Control variable. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/data_serial_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Serial-Parallel Mediation: Sample Dataset — data_serial_parallel","text":"","code":"library(lavaan) data(data_serial_parallel) mod <- \" m11 ~ a11 * x + c1 + c2 m12 ~ b11 * m11 + x + c1 + c2 m2 ~ a2 * x + c1 + c2 y ~ b12 * m12 + b2 * m2 + m11 + x + c1 + c2 indirect1 := a11 * b11 * b12 indirect2 := a2 * b2 indirect := a11 * b11 * b12 + a2 * b2 \" fit <- sem(mod, data_serial_parallel,            meanstructure = TRUE, fixed.x = FALSE) parameterEstimates(fit)[c(1, 4, 8, 11, 12, 34:36), ] #>          lhs op               rhs     label   est    se     z pvalue ci.lower #> 1        m11  ~                 x       a11 0.800 0.093 8.566  0.000    0.617 #> 4        m12  ~               m11       b11 0.465 0.092 5.044  0.000    0.284 #> 8         m2  ~                 x        a2 0.435 0.103 4.239  0.000    0.234 #> 11         y  ~               m12       b12 0.519 0.246 2.108  0.035    0.036 #> 12         y  ~                m2        b2 0.839 0.207 4.052  0.000    0.433 #> 34 indirect1 :=       a11*b11*b12 indirect1 0.193 0.102 1.897  0.058   -0.006 #> 35 indirect2 :=             a2*b2 indirect2 0.364 0.124 2.929  0.003    0.121 #> 36  indirect := a11*b11*b12+a2*b2  indirect 0.558 0.161 3.468  0.001    0.242 #>    ci.upper #> 1     0.983 #> 4     0.646 #> 8     0.635 #> 11    1.002 #> 12    1.244 #> 34    0.393 #> 35    0.608 #> 36    0.873"},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","title":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","text":"Generate bootstrapping estimates used cond_indirect_effects(), cond_indirect(), indirect_effect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","text":"","code":"do_boot(   fit,   R = 100,   seed = NULL,   parallel = TRUE,   ncores = max(parallel::detectCores(logical = FALSE) - 1, 1),   make_cluster_args = list(),   progress = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","text":"fit Either () list lm class objects, output lm2list() (.e., lm_list-class object), (b) output lavaan::sem(). R number bootstrap samples. Default 100. seed seed bootstrapping. Default NULL seed set. parallel Logical. Whether parallel processing used. Default TRUE. fit list lm() outputs, parallel processing used. ncores Integer. number CPU cores use parallel TRUE. Default number non-logical cores minus one (one minimum). raise error greater number cores detected parallel::detectCores(). ncores set, override make_cluster_args. make_cluster_args named list additional arguments passed parallel::makeCluster(). advanced users. See parallel::makeCluster() details. Default list(). progress Logical. Display progress . Default TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","text":"boot_out-class object can used boot_out argument cond_indirect() cond_indirect_effects() forming bootstrapping confidence intervals.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","text":"nonparametric bootstrapping generate bootstrap estimates parameter estimates model fitted either lavaan::sem() sequence calls lm(). stored estimates can used cond_indirect_effects(), cond_indirect(), indirect_effect() form bootstrapping confidence intervals. approach removes need repeat bootstrapping call cond_indirect() cond_indirect_effects(). also ensures set bootstrap samples used subsequent analysis. determines type fit object call lm2boot_out(), fit2boot_out(), fit2boot_out_do_boot().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/do_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping Estimates for 'cond_indirect_effects' — do_boot","text":"","code":"data(data_med_mod_ab1) dat <- data_med_mod_ab1 lm_m <- lm(m ~ x*w + c1 + c2, dat) lm_y <- lm(y ~ m*w + x + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) # In real research, R should be 2000 or even 5000 lm_boot_out <- lm2boot_out(lm_out, R = 100, seed = 1234) wlevels <- mod_levels(w = \"w\", fit = lm_out) wlevels #>                w #> M+1.0SD 6.046455 #> Mean    4.990179 #> M-1.0SD 3.933902 out <- cond_indirect_effects(wlevels = wlevels,                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = lm_out,                              boot_ci = TRUE,                              boot_out = lm_boot_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.030 0.458 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.079 0.171      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.087 0.098     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Dummy Variables — factor2var","title":"Create Dummy Variables — factor2var","text":"Create dummy variables categorical variable.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Dummy Variables — factor2var","text":"","code":"factor2var(   x_value,   x_contrasts = \"contr.treatment\",   prefix = \"\",   add_rownames = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Dummy Variables — factor2var","text":"x_value vector categorical variable. x_contrasts contrast used. Default constr.treatment. prefix prefix added variables created. Default \"\". add_rownames Whether row names added output. Default TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Dummy Variables — factor2var","text":"always returns matrix number rows equal length vector (x_value). categorical two categories one dummy variable needed, output still one-column \"matrix\" R.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Dummy Variables — factor2var","text":"main use creating dummy variables (indicator variables) categorical variable, used lavaan::sem(). Optionally, contrasts can used argument x_contrasts.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Dummy Variables — factor2var","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/factor2var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Dummy Variables — factor2var","text":"","code":"dat <- data_mod_cat dat <- data.frame(dat,                   factor2var(dat$w, prefix = \"gp\", add_rownames = FALSE)) head(dat[, c(\"w\", \"gpgroup2\", \"gpgroup3\")], 15) #>         w gpgroup2 gpgroup3 #> 1  group3        0        1 #> 2  group3        0        1 #> 3  group2        1        0 #> 4  group2        1        0 #> 5  group1        0        0 #> 6  group2        1        0 #> 7  group3        0        1 #> 8  group2        1        0 #> 9  group1        0        0 #> 10 group2        1        0 #> 11 group1        0        0 #> 12 group3        0        1 #> 13 group3        0        1 #> 14 group2        1        0 #> 15 group3        0        1"},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"Extract bootstrapping estimates output lavaan::sem().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"","code":"fit2boot_out(fit)  fit2boot_out_do_boot(   fit,   R = 100,   seed = NULL,   parallel = FALSE,   ncores = NULL,   make_cluster_args = list(spec = getOption(\"cl.cores\", 2)),   progress = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"fit fit object. Currently supports lavaan::lavaan object. R Number bootstrap samples. Default 100. seed seed random resampling. Default NULL. parallel Logical. Whether parallel processing used. Default NULL. ncores Integer. number CPU cores use parallel TRUE. Default NULL, number cores determined getOption(\"cl.cores\", 2). raise error greater number cores detected parallel::detectCores(). ncores set, override make_cluster_args. make_cluster_args named list additional arguments passed parallel::makeCluster(). advanced users. See parallel::makeCluster() details. Default list(spec = getOption(\"cl.cores\", 2)). progress Logical. Display progress . Default TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"boot_out-class object can used boot_out argument cond_indirect() cond_indirect_effects() forming bootstrapping confidence intervals.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"bootstrapping confidence intervals requested calling lavaan::sem() setting se = \"boot\", fit2boot_out() can used extract stored bootstrap estimates can reused cond_indirect() cond_indirect_effects() form bootstrapping confidence intervals conditional effects. bootstrapping confidence intervals requested, fit2boot_out_do_boot() can used generate nonparametric bootstrap estimates output lavaan::sem() store use cond_indirect() cond_indirect_effects(). approach removes need repeat bootstrapping call cond_indirect() cond_indirect_effects(). also ensures set bootstrap samples used subsequent analysis.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"fit2boot_out: Process stored bootstrap estimates functions cond_indirect_effects(). fit2boot_out_do_boot: bootstrapping store information used cond_indirect_effects() related functions. Support parallel processing can faster setting se \"boot\" lavaan::sem().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/fit2boot_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping Estimates for a lavaan Output — fit2boot_out","text":"","code":"library(lavaan) data(data_med_mod_ab1) dat <- data_med_mod_ab1 dat$\"x:w\" <- dat$x * dat$w dat$\"m:w\" <- dat$m * dat$w mod <- \" m ~ x + w + x:w + c1 + c2 y ~ m + w + m:w + x + c1 + c2 \" # Bootstrapping confidence interval requested in lavaan::sem() # bootstrap should be set to 2000 or even 5000 in real study set.seed(1234) fit <- sem(model = mod, data = dat, fixed.x = FALSE,            se = \"boot\", bootstrap = 10) #> Warning: lavaan WARNING: #>     The variance-covariance matrix of the estimated parameters (vcov) #>     does not appear to be positive definite! The smallest eigenvalue #>     (= -8.082160e-14) is smaller than zero. This may be a symptom that #>     the model is not identified. fit_boot_out <- fit2boot_out(fit) wlevels <- mod_levels(w = \"w\", fit = fit) out <- cond_indirect_effects(wlevels = wlevels,                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = fit,                              boot_ci = TRUE,                              boot_out = fit_boot_out) #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.031 0.376 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.041 0.238      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.069 0.114     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 10 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>  # Bootstrapping not requested in calling lavaan::sem() fit <- sem(model = mod, data = dat, fixed.x = FALSE) fit_boot_out <- fit2boot_out_do_boot(fit = fit,                                      R = 10,                                      seed = 1234) #> The expected CPU time is 0.47 second(s). #> Could be faster if 'parallel' set to TRUE. wlevels <- mod_levels(w = \"w\", fit = fit) out <- cond_indirect_effects(wlevels = wlevels,                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = fit,                              boot_ci = TRUE,                              boot_out = fit_boot_out) #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints #> Warning: extreme order statistics used as endpoints out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.031 0.376 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.041 0.238      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.069 0.114     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 10 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Index of Moderated-Mediation — index_of_mome","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"Compute generalized version index moderated-mediation proposed Hayes (2015).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"","code":"index_of_mome(output, from = NULL, to = NULL, level = 0.95)"},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"output cond_indirect_effects-class object: output cond_indirect_effects(). row number output. row number output. change indirect effects computed change level(s) moderator(s) Row Row . level level confidence bootstrap confidence interval. Default .95.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"returns index_of_mome-class object. class print method (print.index_of_mome()), coef method (coef.index_of_mome()), confint method (confint.index_of_mome()).","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"Ths function computes generalized version index moderated-mediation proposed Hayes (2015). variant proposed Hayes change indirect effect along moderated pathway moderator increases one unit. generalized version change indirect effect along moderated pathway moderator increases amount meaningful context. example, function can compute change indirect effect moderator increases one standard deviation. call variant standardized index moderated-mediation. function can also compute change standardized indirect effect moderator increases one unit. call variant index standardized moderated-mediation. change standardized indirect effect moderator increases one standardized deviation called standardized index standardized moderated-mediation. function set levels comparison. levels compared need set calling cond_indirect_effects(). function extracts required information output cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"index_of_mome: Compute generalized index moderated-mediation.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"Hayes, . F. (2015). index test linear moderated mediation. Multivariate Behavioral Research, 50(1), 1-22. doi:10.1080/00273171.2014.962683","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/index_of_mome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Index of Moderated-Mediation — index_of_mome","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 dat$xw1 <- dat$x * dat$w1 mod <- \" m1 ~ a * x  + f * w1 + d * xw1 y  ~ b * m1 + cp * x \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  # Create levels of w1, the moderators w1levels <- mod_levels(\"w1\", fit = fit) w1levels #>                 w1 #> M+1.0SD  1.2280576 #> Mean     0.2589999 #> M-1.0SD -0.7100578  # Conditional effects from x to y when w1 is equal to each of the levels boot_out <- fit2boot_out_do_boot(fit, R = 50, seed = 4314) #> The expected CPU time is 1.7 second(s). #> Could be faster if 'parallel' set to TRUE. out <- cond_indirect_effects(x = \"x\", y = \"y\", m = \"m1\",                       wlevels = w1levels, fit = fit,                       boot_ci = TRUE, boot_out = boot_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditioned on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  CI.lo CI.hi Sig  m1~x  y~m1 #> 1 M+1.0SD  1.228 0.068 -0.660 0.503     0.750 0.091 #> 2 Mean     0.259 0.048 -0.445 0.353     0.523 0.091 #> 3 M-1.0SD -0.710 0.027 -0.231 0.216     0.297 0.091 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 50 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>  out_ind <- index_of_mome(out, from = 2, to = 3) out_ind #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditioned on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  CI.lo CI.hi Sig  m1~x  y~m1 #> 1 M-1.0SD -0.710 0.027 -0.231 0.216     0.297 0.091 #> 2 Mean     0.259 0.048 -0.445 0.353     0.523 0.091 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 50 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>  #>  #> == Index of Moderated-Mediation == #>  #> Levels:  #>                     w1 #> To: M-1.0SD -0.7100578 #> From: Mean   0.2589999 #>  #> Change in Indirect Effect: #>       x y Change  CI.lo CI.hi #> Index x y -0.021 -0.153 0.117 #>  #>  - [CI.lo, CI.hi]: 0.95% percentile confidence interval. #>  coef(out_ind) #>      y~m1~x  #> -0.02060775  confint(out_ind) #>              2.5%     97.5% #> y~m1~x -0.1530286 0.1169893"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Indirect Effect (No Bootstrapping) — indirect_i","title":"Indirect Effect (No Bootstrapping) — indirect_i","text":"Compute indirect effect, optionally conditioned values moderators present.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indirect Effect (No Bootstrapping) — indirect_i","text":"","code":"indirect_i(   x,   y,   m = NULL,   fit = NULL,   est = NULL,   implied_stats = NULL,   wvalues = NULL,   standardized_x = FALSE,   standardized_y = FALSE,   computation_digits = 5,   prods = NULL,   get_prods_only = FALSE,   data = NULL,   expand = TRUE,   warn = TRUE )"},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indirect Effect (No Bootstrapping) — indirect_i","text":"x Character. name predictor start pathway. y Character. name outcome variable end pathway. m vector variable names moderators. pathway goes first mediator successively last mediator. NULL, default, pathway goes x y. fit fit object. Currently supports lavaan::lavaan object. est output lavaan::parameterEstimates(). NULL, default, generated fit. supplied, fit ge ignored. implied_stats Implied means, variances, covariances observed variables, form output lavaan::lavInspect() set \"implied\". standard deviations extracted object standardization. Default NULL, implied statistics computed fit required. wvalues numeric vector named elements. names variable names moderators, values values moderators set . Default NULL. standardized_x Logical. Whether x standardized. Default FALSE. standardized_y Logical. Whether y standardized. Default FALSE. computation_digits number digits storing computation text. Default 3. prods product terms found. internal use. get_prods_only TRUE, quit early return product terms found. results can passed prod argument calling function. Default FALSE. data Data frame (optional). supplied, used identify product terms. expand Whether products two terms searched. TRUE default. warn TRUE, default, function warn possible misspecification, setting value moderator moderate one component path. Set FALSE suppress warnings. Suppress moderators omitted intentionally.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indirect Effect (No Bootstrapping) — indirect_i","text":"returns indirect-class object. class following methods: coef.indirect(), print.indirect(). confint.indirect() method used called cond_indirect() cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indirect Effect (No Bootstrapping) — indirect_i","text":"function low-level function called cond_indirect() cond_indirect_effects(), call function multiple times bootstrapping confidence interval requested. function usually used directly. exported advanced users.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Indirect Effect (No Bootstrapping) — indirect_i","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/indirect_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indirect Effect (No Bootstrapping) — indirect_i","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x   + b1 * w1 + d1 * x:w1 m2 ~ a2 * m1  + b2 * w2 + d2 * m1:w2 m3 ~ a3 * m2  + b3 * w3 + d3 * m2:w3 y  ~ a4 * m3  + b4 * w4 + d4 * m3:w4 \" fit <- sem(mod, dat, meanstructure = TRUE,            fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  wvalues <- c(w1 = 5, w2 = 4, w3 = 2, w4 = 3)  # Compute the conditional indirect effect by indirect_i() indirect_1 <- indirect_i(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\", \"m3\"), fit = fit,                        wvalues = wvalues)  # Manually compute the conditional indirect effect indirect_2 <- (est[est$label == \"a1\", \"est\"] +                 wvalues[\"w1\"] * est[est$label == \"d1\", \"est\"]) *               (est[est$label == \"a2\", \"est\"] +                 wvalues[\"w2\"] * est[est$label == \"d2\", \"est\"]) *               (est[est$label == \"a3\", \"est\"] +                 wvalues[\"w3\"] * est[est$label == \"d3\", \"est\"]) *               (est[est$label == \"a4\", \"est\"] +                 wvalues[\"w4\"] * est[est$label == \"d4\", \"est\"]) # They should be the same coef(indirect_1) #>      y~x  #> 1.176673  indirect_2 #>       w1  #> 1.176673"},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapping Estimates for lm Outputs — lm2boot_out","title":"Bootstrapping Estimates for lm Outputs — lm2boot_out","text":"Generate bootstrapping estimates models list 'lm' outputs.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapping Estimates for lm Outputs — lm2boot_out","text":"","code":"lm2boot_out(outputs, R = 100, seed = NULL)"},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapping Estimates for lm Outputs — lm2boot_out","text":"outputs list lm class objects, output lm2list() (.e., lm_list-class object). R number bootstrap samples. Default 100. seed seed bootstrapping. Default NULL seed set.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapping Estimates for lm Outputs — lm2boot_out","text":"boot_out-class object can used boot_out argument cond_indirect() cond_indirect_effects() forming bootstrapping confidence intervals.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapping Estimates for lm Outputs — lm2boot_out","text":"nonparametric bootstrapping generate bootstrap estimates regression coefficients regression models list lm() outputs, lm_list-class object formed lm2list(). stored estimates can used cond_indirect() cond_indirect_effects() forming bootstrapping confidence intervals conditional effects. approach removes need repeat bootstrapping call cond_indirect() cond_indirect_effects(). also ensures set bootstrap samples used subsequent analysis.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrapping Estimates for lm Outputs — lm2boot_out","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2boot_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapping Estimates for lm Outputs — lm2boot_out","text":"","code":"data(data_med_mod_ab1) dat <- data_med_mod_ab1 lm_m <- lm(m ~ x*w + c1 + c2, dat) lm_y <- lm(y ~ m*w + x + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) # In real research, R should be 2000 or even 5000 lm_boot_out <- lm2boot_out(lm_out, R = 100, seed = 1234) wlevels <- mod_levels(w = \"w\", fit = lm_out) wlevels #>                w #> M+1.0SD 6.046455 #> Mean    4.990179 #> M-1.0SD 3.933902 out <- cond_indirect_effects(wlevels = wlevels,                              x = \"x\",                              y = \"y\",                              m = \"m\",                              fit = lm_out,                              boot_ci = TRUE,                              boot_out = lm_boot_out) out #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w #>  Moderator(s) represented by: w #>  #>       [w]   (w)    ind  CI.lo CI.hi Sig    m~x   y~m #> 1 M+1.0SD 6.046  0.248  0.030 0.458 Sig  0.342 0.725 #> 2 Mean    4.990  0.024 -0.079 0.171      0.063 0.375 #> 3 M-1.0SD 3.934 -0.006 -0.087 0.098     -0.216 0.026 #>  #>  - [CI.lo to CI.hi] are 95.0% percentile confidence intervals by #>    nonparametric bootstrapping with 100 samples. #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":null,"dir":"Reference","previous_headings":"","what":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","title":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","text":"resulting model can used cond_indirect() cond_indirect_effects() path method, fitted lavaan::sem().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","text":"","code":"lm2list(...)"},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","text":"... lm() outputs grouped list.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","text":"returns lm_list-class object forms path model represented set regression models. class summary.lm_list() method prints summary regression model stored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","text":"path model mediation /moderation fitted set regression models using lm(), function can combine object class lm_list-class represents path model, one fitted structural equation model functions lavaan::sem(). class object can used functions, cond_indirect() cond_indirect_effects() output fitting path model, regression coefficients treated path coefficients. regression outputs combined need meet following requirements: models must connected least one another model. , regression model must either () least predictor outcome variable another model, (b) outcome variable predictor another model. sample sizes regression outputs must identical. models must fitted sample.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join 'lm()' Output to Form an 'lm_list-class' Object — lm2list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>  summary(lm_serial_parallel) #>  #>  #> Model: #> m11 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  11.4546     1.1258   10.17  < 2e-16 *** #> x             0.8001     0.0953    8.39  4.2e-13 *** #> c1            0.0855     0.1020    0.84    0.404     #> c2           -0.2444     0.1002   -2.44    0.017 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.459. Adjusted R-square = 0.442. F(3, 96) = 27.148, p < .001 #>  #> Model: #> m12 ~ m11 + x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   9.8742     1.5048    6.56  2.8e-09 *** #> m11           0.4652     0.0946    4.92  3.7e-06 *** #> x             0.1146     0.1164    0.98   0.3274     #> c1            0.1934     0.0949    2.04   0.0444 *   #> c2           -0.2848     0.0957   -2.97   0.0037 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.469. Adjusted R-square = 0.446. F(4, 95) = 20.963, p < .001 #>  #> Model: #> m2 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    2.354      1.236    1.91     0.06 .   #> x              0.435      0.105    4.15  7.1e-05 *** #> c1             0.178      0.112    1.59     0.12     #> c2            -0.167      0.110   -1.52     0.13     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.196. Adjusted R-square = 0.171. F(3, 96) = 7.812, p < .001 #>  #> Model: #> y ~ m11 + m12 + m2 + x + c1 + c2 #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.791908   4.613263   -0.39  0.69859     #> m11          0.203249   0.266930    0.76  0.44832     #> m12          0.519112   0.255389    2.03  0.04494 *   #> m2           0.838632   0.217639    3.85  0.00021 *** #> x            0.071421   0.317264    0.23  0.82238     #> c1          -0.000114   0.244934    0.00  0.99963     #> c2          -0.069787   0.253231   -0.28  0.78348     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.315. Adjusted R-square = 0.271. F(6, 93) = 7.133, p < .001  # Compute indirect effect from x to y through m11 and m12 outm11m12 <- cond_indirect(x = \"x\", y = \"y\",                            m = c(\"m11\", \"m12\"),                            fit = lm_serial_parallel) outm11m12 #>  #> == Indirect Effect == #>                                       #>  Path:           x -> m11 -> m12 -> y #>  Indirect Effect 0.193                #>  #> Computation Formula: #>   (b.m11~x)*(b.m12~m11)*(b.y~m12) #> Computation: #>   (0.80006)*(0.46521)*(0.51911) #> Coefficients of Component Paths: #>     Path Coefficient #>    m11~x       0.800 #>  m12~m11       0.465 #>    y~m12       0.519 #>  # Compute indirect effect from x to y through m11 and m12 with bootstrapping CI # R should be at least 2000 or even 5000 in read study. outm11m12 <- cond_indirect(x = \"x\", y = \"y\",                            m = c(\"m11\", \"m12\"),                            fit = lm_serial_parallel,                            boot_ci = TRUE,                            R = 100,                            seed = 1234) outm11m12 #>  #> == Indirect Effect == #>                                           #>  Path:               x -> m11 -> m12 -> y #>  Indirect Effect     0.193                #>  95.0% Bootstrap CI: [-0.110 to 0.487]    #>  #> Computation Formula: #>   (b.m11~x)*(b.m12~m11)*(b.y~m12) #> Computation: #>   (0.80006)*(0.46521)*(0.51911) #>  #> Percentile confidence interval formed by nonparametric bootstrapping #> with 100 bootstrap samples. #>  #> Coefficients of Component Paths: #>     Path Coefficient #>    m11~x       0.800 #>  m12~m11       0.465 #>    y~m12       0.519 #>"},{"path":"https://sfcheung.github.io/manymome/reference/lm2ptable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","title":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","text":"convert information necessary cond_indirect() compute conditional effects conditional indirect effects.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2ptable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","text":"","code":"lm2ptable(outputs)"},{"path":"https://sfcheung.github.io/manymome/reference/lm2ptable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","text":"outputs list lm class objects.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2ptable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","text":"list following arguments: est: data frame similar parameter estimates table output lavaan::sem(). dat: data frame data regression models merged. implied_stats: list two elements: cov implied covariance matrix mean implied means. used compute standardized effects form levels moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2ptable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","text":"Users usually need call function use cond_indirect() cond_indirect_effects(). two functions conversion internally necessary.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2ptable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm2ptable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a 'lm' Output to a 'lavaan'-Like Object — lm2ptable","text":"","code":"data(data_serial) dat <- data_serial lm_m1 <- lm(m1 ~ x + c1 + c2, dat) lm_m2 <- lm(m2 ~ m1 + x + c1 + c2, dat) lm_y <- lm(y ~ m2 + m1 + x + c1 + c2, dat) out <- lm2ptable(list(lm_m1, lm_m2, lm_y)) out$est #>    lhs op rhs         est #> 1   m1  ~   x  0.82244298 #> 2   m1  ~  c1  0.17148087 #> 3   m1  ~  c2 -0.18886074 #> 4   m1 ~1     10.81566338 #> 5   m2  ~  m1  0.42078353 #> 6   m2  ~   x -0.11609882 #> 7   m2  ~  c1  0.27753061 #> 8   m2  ~  c2 -0.16194767 #> 9   m2 ~1      3.51937327 #> 10   y  ~  m2  0.52077184 #> 11   y  ~  m1 -0.43533604 #> 12   y  ~   x  0.49285091 #> 13   y  ~  c1  0.09883640 #> 14   y  ~  c2 -0.09604136 #> 15   y ~1      9.46787586"},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","title":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","text":"Converts regression models lavaan`` model lm_from_lavaan_list`-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","text":"","code":"lm_from_lavaan_list(fit)"},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","text":"fit lavaan-class object, usually output lavaan::lavaan() wrappers.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","text":"lm_from_lavaan_list-class object, list lm_from_lavaan objects. predict-method (predict.lm_from_lavaan_list()) computing predicted values one variable another.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","text":"identifies dependent variables lavaan model creates lm_from_lavaan-class object .","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/lm_from_lavaan_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a 'lavaan' Model to an 'lm_from_lavaan_list'-Class Object — lm_from_lavaan_list","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) tmp <- data.frame(x = 1, c1 = 2, c2 = 3, m = 4) predict(fit_list, x = \"x\", y = \"y\", m = \"m\", newdata = tmp) #> [1] 0.9728797"},{"path":"https://sfcheung.github.io/manymome/reference/manymome-package.html","id":null,"dir":"Reference","previous_headings":"","what":"manymome: Moderation, Mediation, and Moderated-Mediation in SEM — manymome-package","title":"manymome: Moderation, Mediation, and Moderated-Mediation in SEM — manymome-package","text":"Functions computing indirect effects, moderation effects, conditional indirect effects, bootstraping confidence interval. Support standadized (partially completely) moderation effects conditional indirect effects. standardized effects involve moderator, sampling variation standardization taken account.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/manymome-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"manymome: Moderation, Mediation, and Moderated-Mediation in SEM — manymome-package","text":"Maintainer: Shu Fai Cheung shufai.cheung@gmail.com (ORCID)","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge the Generated Levels of Moderators — merge_mod_levels","title":"Merge the Generated Levels of Moderators — merge_mod_levels","text":"Merge levels moderators generated mod_levels() data frame.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge the Generated Levels of Moderators — merge_mod_levels","text":"","code":"merge_mod_levels(...)"},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge the Generated Levels of Moderators — merge_mod_levels","text":"... output mod_levels().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge the Generated Levels of Moderators — merge_mod_levels","text":"data frame combinations levels.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge the Generated Levels of Moderators — merge_mod_levels","text":"Merge levels moderators generated mod_levels() data frame, row represents combination levels. output used cond_indirect_effects(). Users usually need use function cond_indirect_effects() merge levels internally necessary.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge the Generated Levels of Moderators — merge_mod_levels","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/merge_mod_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge the Generated Levels of Moderators — merge_mod_levels","text":"","code":"data(data_med_mod_ab) dat <- data_med_mod_ab # Form the levels from a list of lm() outputs lm_m <- lm(m ~ x*w1 + c1 + c2, dat) lm_y <- lm(y ~ m*w2 + x + w1 + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) w1_levels <- mod_levels(lm_out, w = \"w1\") w1_levels #>               w1 #> M+1.0SD 6.173157 #> Mean    5.105602 #> M-1.0SD 4.038047 w2_levels <- mod_levels(lm_out, w = \"w2\") w2_levels #>               w2 #> M+1.0SD 4.040487 #> Mean    3.047789 #> M-1.0SD 2.055091 merge_mod_levels(w1_levels, w2_levels) #>                                w1       w2 #> w1: M+1.0SD; w2: M+1.0SD 6.173157 4.040487 #> w1: M+1.0SD; w2: Mean    6.173157 3.047789 #> w1: M+1.0SD; w2: M-1.0SD 6.173157 2.055091 #> w1: Mean; w2: M+1.0SD    5.105602 4.040487 #> w1: Mean; w2: Mean       5.105602 3.047789 #> w1: Mean; w2: M-1.0SD    5.105602 2.055091 #> w1: M-1.0SD; w2: M+1.0SD 4.038047 4.040487 #> w1: M-1.0SD; w2: Mean    4.038047 3.047789 #> w1: M-1.0SD; w2: M-1.0SD 4.038047 2.055091"},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Levels of Moderators — mod_levels","title":"Create Levels of Moderators — mod_levels","text":"Create levels moderators used indirect_i(), cond_indirect(), cond_indirect_effects().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Levels of Moderators — mod_levels","text":"","code":"mod_levels(   w,   fit,   w_type = c(\"auto\", \"numeric\", \"categorical\"),   w_method = c(\"sd\", \"percentile\"),   sd_from_mean = c(-1, 0, 1),   percentiles = c(0.16, 0.5, 0.84),   extract_gp_names = TRUE,   prefix = NULL,   values = NULL,   descending = TRUE )  mod_levels_list(   ...,   fit,   w_type = \"auto\",   w_method = \"sd\",   sd_from_mean = NULL,   percentiles = NULL,   extract_gp_names = TRUE,   prefix = NULL,   descending = TRUE,   merge = FALSE )"},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Levels of Moderators — mod_levels","text":"w Character. names moderator. moderator categorical 3 groups, vector indicator variables. fit fit object. Can lavaan::lavaan object list lm() outputs. w_type Character. Whether moderator \"numeric\" variable \"categorical\" variable. \"auto\", function try determine type automatically. w_method Character, either \"sd\" \"percentile\". \"sd\", levels defined distance mean terms standard deviation. \"percentile\", levels defined percentiles. sd_from_mean numeric vector. Specify distance standard deviation mean level. Default c(-1, 0, 1) mod_levels(). mod_levels_list(), default c(-1, 0, 1) one moderator, c(-1, 1) one moderator. Ignored w_method equal \"sd\". percentiles numeric vector. Specify percentile (proportion) level. Default c(.16, .50, .84) mod_levels(), corresponding approximately one standard deviation mean, mean, one standard deviation mean normal distribution. mod_levels_list(), default c(.16, .50, .84) one moderator, c(.16, .84) one moderator. Ignored w_method equal \"percentile\". extract_gp_names Logical. TRUE, default, function try determine name group variable names. prefix Character. extract_gp_names TRUE prefix supplied, removed variable names create group names. Default NULL, function try determine prefix automatically. values numeric moderators, numeric vector. values used override options. categorical moderators, named list numeric vector, vector length equal number indicator variables. vector named, names used label values. example, set list(gp1 = c(0, 0), gp3 = c(0, 1), two levels returned, one named gp1 indicator variables equal 0 0, named gp3 indicator variables equal 0 1. Default NULL. descending TRUE (default), rows sorted descending order numerical moderators: highest value first row lowest values last row. user supplied values, first value last row last value first row. FALSE, rows sorted ascending order. ... names moderators variables. categorical variable, vector variable names. merge TRUE, mod_levels_list() call merge_mod_levels() return merged levels. Default FALSE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Levels of Moderators — mod_levels","text":"mod_levels() returns data frame levels created. mod_levels_list() returns list data frames, merged data frame merge = TRUE.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Levels of Moderators — mod_levels","text":"creates values moderator can used compute conditional effect conditional indirect effect. default, numeric moderator, uses one standard deviation mean, mean, one standard deviation mean. percentiles three levels normal distribution (16th, 50th, 84th) can also used. categorical variable, simply collect unique categories data. generated levels used cond_indirect() cond_indirect_effects(). model one moderator, mod_levels_list() can used generate combinations levels. output can merged passed cond_indirect_effects() compute conditional effects conditional indirect effects combinations.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create Levels of Moderators — mod_levels","text":"mod_levels: Generate levels one moderator. mod_levels_list: Generate levels several moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Levels of Moderators — mod_levels","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/mod_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Levels of Moderators — mod_levels","text":"","code":"library(lavaan) data(data_med_mod_ab) dat <- data_med_mod_ab # Form the levels from a list of lm() outputs lm_m <- lm(m ~ x*w1 + c1 + c2, dat) lm_y <- lm(y ~ m*w2 + x + w1 + c1 + c2, dat) lm_out <- lm2list(lm_m, lm_y) w1_levels <- mod_levels(lm_out, w = \"w1\") w1_levels #>               w1 #> M+1.0SD 6.173157 #> Mean    5.105602 #> M-1.0SD 4.038047 w2_levels <- mod_levels(lm_out, w = \"w2\") w2_levels #>               w2 #> M+1.0SD 4.040487 #> Mean    3.047789 #> M-1.0SD 2.055091 # Indirect effect from x to y through m, at the first levels of w1 and w2 cond_indirect(x = \"x\", y = \"y\", m = \"m\",               fit = lm_out,               wvalues = c(w1 = w1_levels$w1[1],                           w2 = w2_levels$w2[1])) #>  #> == Conditional Indirect Effect   == #>                                                      #>  Path:                        x -> m -> y            #>  Moderators:                  w1, w2                 #>  Conditional Indirect Effect: 0.398                  #>  When:                        w1 = 6.173, w2 = 4.040 #>  #> Computation Formula: #>   (b.m~x + (b.x:w1)*(w1))*(b.y~m + (b.m:w2)*(w2)) #> Computation: #>   ((-0.66304) + (0.20389)*(6.17316))*((-0.14996) + (0.20267)*(4.04049)) #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>   m~x              0.596               -0.663 #>   y~m              0.669               -0.150 #>  # Can form the levels based on percentiles w1_levels2 <- mod_levels(lm_out, w = \"w1\", w_method = \"percentile\") w1_levels2 #>           w1 #> 84% 6.207972 #> 50% 5.215974 #> 16% 3.932444 # Form the levels from a lavaan output # Compute the product terms before fitting the model # Need to use the \":\" to denote a product term mod <- \" m ~ x + w1 + x:w1 + c1 + c2 y ~ m + x + w1 + w2 + m:w2 + c1 + c2 \" fit <- sem(mod, dat, fixed.x = FALSE) cond_indirect(x = \"x\", y = \"y\", m = \"m\",               fit = fit,               wvalues = c(w1 = w1_levels$w1[1],                           w2 = w2_levels$w2[1])) #>  #> == Conditional Indirect Effect   == #>                                                      #>  Path:                        x -> m -> y            #>  Moderators:                  w1, w2                 #>  Conditional Indirect Effect: 0.398                  #>  When:                        w1 = 6.173, w2 = 4.040 #>  #> Computation Formula: #>   (b.m~x + (b.x:w1)*(w1))*(b.y~m + (b.m:w2)*(w2)) #> Computation: #>   ((-0.66304) + (0.20389)*(6.17316))*((-0.14996) + (0.20267)*(4.04049)) #> Coefficients of Component Paths: #>  Path Conditional Effect Original Coefficient #>   m~x              0.596               -0.663 #>   y~m              0.669               -0.150 #>  # Can pass all levels to cond_indirect_effects() # First merge the levels by merge_mod_levels() w1w2_levels <- merge_mod_levels(w1_levels, w2_levels) cond_indirect_effects(x = \"x\", y = \"y\", m = \"m\",                       fit = fit,                       wlevels = w1w2_levels) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.398 0.596 0.669 #> 2 M+1.0SD Mean    6.173 3.048 0.279 0.596 0.468 #> 3 M+1.0SD M-1.0SD 6.173 2.055 0.159 0.596 0.267 #> 4 Mean    M+1.0SD 5.106 4.040 0.253 0.378 0.669 #> 5 Mean    Mean    5.106 3.048 0.177 0.378 0.468 #> 6 Mean    M-1.0SD 5.106 2.055 0.101 0.378 0.267 #> 7 M-1.0SD M+1.0SD 4.038 4.040 0.107 0.160 0.669 #> 8 M-1.0SD Mean    4.038 3.048 0.075 0.160 0.468 #> 9 M-1.0SD M-1.0SD 4.038 2.055 0.043 0.160 0.267 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>    # mod_levels_list() forms a combinations of levels in one call # It returns a list, by default. # Form the levels from a list of lm() outputs # \"merge = TRUE\" is optional. cond_indirect_effects will merge the levels # automatically. w1w2_levels <- mod_levels_list(\"w1\", \"w2\", fit = fit, merge = TRUE) w1w2_levels #>                                w1       w2 #> w1: M+1.0SD; w2: M+1.0SD 6.173157 4.040487 #> w1: M+1.0SD; w2: M-1.0SD 6.173157 2.055091 #> w1: M-1.0SD; w2: M+1.0SD 4.038047 4.040487 #> w1: M-1.0SD; w2: M-1.0SD 4.038047 2.055091 cond_indirect_effects(x = \"x\", y = \"y\", m = \"m\",                       fit = fit, wlevels = w1w2_levels) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.398 0.596 0.669 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.159 0.596 0.267 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.107 0.160 0.669 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.043 0.160 0.267 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>  # Can work without merge = TRUE: w1w2_levels <- mod_levels_list(\"w1\", \"w2\", fit = fit) w1w2_levels #> [[1]] #>               w1 #> M+1.0SD 6.173157 #> M-1.0SD 4.038047 #>  #> [[2]] #>               w2 #> M+1.0SD 4.040487 #> M-1.0SD 2.055091 #>  cond_indirect_effects(x = \"x\", y = \"y\", m = \"m\",                       fit = fit, wlevels = w1w2_levels) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m -> y #>  Conditioned on moderator(s): w1, w2 #>  Moderator(s) represented by: w1, w2 #>  #>      [w1]    [w2]  (w1)  (w2)   ind   m~x   y~m #> 1 M+1.0SD M+1.0SD 6.173 4.040 0.398 0.596 0.669 #> 2 M+1.0SD M-1.0SD 6.173 2.055 0.159 0.596 0.267 #> 3 M-1.0SD M+1.0SD 4.038 4.040 0.107 0.160 0.669 #> 4 M-1.0SD M-1.0SD 4.038 2.055 0.043 0.160 0.267 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m~x’,‘y~m’ is/are the path coefficient(s) along the path conditional #>    on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/modmed_x1m3w4y1.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Dataset: Moderated Serial Mediation — modmed_x1m3w4y1","title":"Sample Dataset: Moderated Serial Mediation — modmed_x1m3w4y1","text":"Generated serial mediation model one predictor, three mediators, one outcome variable, one moderator stage.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/modmed_x1m3w4y1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Dataset: Moderated Serial Mediation — modmed_x1m3w4y1","text":"","code":"modmed_x1m3w4y1"},{"path":"https://sfcheung.github.io/manymome/reference/modmed_x1m3w4y1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Dataset: Moderated Serial Mediation — modmed_x1m3w4y1","text":"data frame 200 rows 11 variables: x Predictor. Numeric. w1 Moderator 1. Numeric. w2 Moderator 2. Numeric. w3 Moderator 3. Numeric. w4 Moderator 4. Numeric. m1 Mediator 1. Numeric. m2 Mediator 2. Numeric. m3 Mediator 3. Numeric. y Outcome variable. Numeric. gp Three values: \"earth\", \"mars\", \"venus\". String. city Four values: \"alpha\", \"beta\", \"gamma\", \"sigma\". String.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"Plot conditional indirect effects different levels moderators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"","code":"# S3 method for cond_indirect_effects plot(   x,   x_label,   w_label = \"Moderator(s)\",   y_label,   title,   x_from_mean_in_sd = 1,   x_method = c(\"sd\", \"percentile\"),   x_percentiles = c(0.16, 0.84),   x_sd_to_percentiles = NA,   note_standardized = TRUE,   no_title = FALSE,   line_width = 1,   point_size = 5,   graph_type = c(\"default\", \"tumble\"),   ... )"},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"x output cond_indirect_effects(). (Named x required naming arguments `plot`` generic function.) x_label label X-axis. Default value predictor output cond_indirect_effects(). w_label label legend lines. Default \"Moderator(s)\". y_label label Y-axis. Default name response variable model. title title graph. supplied, generated variable names labels (x_label, y_label, w_label). \"\", title printed. can used plot manuscript submission figures required titles. x_from_mean_in_sd many SD mean used define \"low\" \"high\" focal variable. Default 1. x_method define \"high\" \"low\" focal variable levels. Default terms standard deviation focal variable, \"sd\". equal \"percentile\", percentiles focal variable dataset used. x_percentiles x_method \"percentile\", argument specifies two percentiles used, divided 100. must vector two numbers. default c(.16, .84), 16th 84th percentiles, corresponds approximately one SD mean normal distribution, respectively. x_sd_to_percentiles x_method \"percentile\" argument set number, number used determine percentiles used. lower percentile percentile normal distribution x_sd_to_percentiles SD mean. upper percentile percentile normal distribution x_sd_to_percentiles SD mean. Therefore, x_sd_to_percentiles set 1, lower upper percentiles 16th 84th, respectively. Default NA. note_standardized TRUE, check whether variable SD nearly equal one. yes, report plot. Default TRUE. no_title TRUE, title suppressed. Default FALSE. line_width width lines used ggplot2::geom_segment(). Default 1. point_size size points used ggplot2::geom_point(). Default 5. graph_type \"default\", typical line-graph equal end-points plotted. \"tubmle\", tumble graph proposed Bodner (2016) plotted. Default \"default\". ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"ggplot2 graph. Plotted assigned name. can modified like usual ggplot2 graph.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"function plot method output cond_indirect_effects(). use levels moderators output.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"Bodner, T. E. (2016). Tumble graphs: Avoiding misleading end point extrapolation graphing interactions moderated multiple regression analysis. Journal Educational Behavioral Statistics, 41(6), 593-604. doi:10.3102/1076998616657080","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/plot.cond_indirect_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Conditional Indirect Effect — plot.cond_indirect_effects","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 n <- nrow(dat) set.seed(860314) dat$gp <- sample(c(\"gp1\", \"gp2\", \"gp3\"), n, replace = TRUE) dat <- cbind(dat, factor2var(dat$gp, prefix = \"gp\", add_rownames = FALSE))  # lavaan mod <- \" m3 ~ m1 + x + gpgp2 + gpgp3 + x:gpgp2 + x:gpgp3 y ~ m2 + m3 + x + w4 + x:w4 \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE) out_mm_1 <- mod_levels_list(\"w4\", c(\"gpgp2\", \"gpgp3\"),                             sd_from_mean = c(-1, 1),                             fit = fit, merge = TRUE) out_1 <- cond_indirect_effects(wlevels = out_mm_1, x = \"x\", y = \"y\", m = \"m3\", fit = fit) plot(out_1)  plot(out_1, graph_type = \"tumble\")   # Regression lm_m3 <- lm(m3 ~ m1 + x*gp, dat) lm_y <- lm(y ~ m2 + m3 + x*w4, dat) fit_lm <- lm2list(lm_m3, lm_y) out_mm_1_lm <- mod_levels_list(\"w4\", c(\"gpgp2\", \"gpgp3\"),                             sd_from_mean = c(-1, 1),                             fit = fit_lm, merge = TRUE) out_1_lm <- cond_indirect_effects(wlevels = out_mm_1_lm, x = \"x\", y = \"y\", m = \"m3\", fit = fit_lm) plot(out_1_lm)  plot(out_1_lm, graph_type = \"tumble\")"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","title":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"Compute predicted values based model stored 'lm_from_lavaan`-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"","code":"# S3 method for lm_from_lavaan predict(object, newdata, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"object 'lm_from_lavaan'-class object. newdata Required. data frame new data. must data frame. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"numeric vector predicted values, length equal number rows user-supplied data.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"lm_from_lavaan-class object converts regression model variable lavaan`` model formula` object. function uses stored model compute predicted values using user-supplied data.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted Values of a 'lm_from_lavaan'-Class Object — predict.lm_from_lavaan","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) tmp <- data.frame(x = 1, c1 = 2, c2 = 3, m = 4) predict(fit_list$m, newdata = tmp) #> [1] 0.8250255 predict(fit_list$y, newdata = tmp) #> [1] 3.464241"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","title":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"Compute predicted values based models stored 'lm_from_lavaan_list`-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"","code":"# S3 method for lm_from_lavaan_list predict(object, x = NULL, y = NULL, m = NULL, newdata, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"object 'lm_from_lavaan'-class object. x variable name start pathway. y variable name end pathway. m Optional. mediator(s) x y. numeric vector names mediators. path goes first element last element. example, m = c(\"m1\", \"m2\"), path x -> m1 -> m2 -> y. newdata Required. data frame new data. must data frame. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"numeric vector predicted values, length equal number rows user-supplied data.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"lm_from_lavaan_list-class object list lm_from_lavaan-class objects.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_from_lavaan_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted Values of a 'lm_from_lavaan_list'-Class Object — predict.lm_from_lavaan_list","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) tmp <- data.frame(x = 1, c1 = 2, c2 = 3, m = 4) predict(fit_list, x = \"x\", y = \"y\", m = \"m\", newdata = tmp) #> [1] 0.9728797"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","title":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","text":"Compute predicted values based models stored 'lm_list`-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","text":"","code":"# S3 method for lm_list predict(object, x = NULL, y = NULL, m = NULL, newdata, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","text":"object 'lm_list'-class object. x variable name start pathway. y variable name end pathway. m Optional. mediator(s) x y. numeric vector names mediators. path goes first element last element. example, m = c(\"m1\", \"m2\"), path x -> m1 -> m2 -> y. newdata Required. data frame new data. must data frame. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","text":"numeric vector predicted values, length equal number rows user-supplied data.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","text":"lm_list-class object list lm-class objects.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/predict.lm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predicted Values of a 'lm_list'-Class Object — predict.lm_list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>  summary(lm_serial_parallel) #>  #>  #> Model: #> m11 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  11.4546     1.1258   10.17  < 2e-16 *** #> x             0.8001     0.0953    8.39  4.2e-13 *** #> c1            0.0855     0.1020    0.84    0.404     #> c2           -0.2444     0.1002   -2.44    0.017 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.459. Adjusted R-square = 0.442. F(3, 96) = 27.148, p < .001 #>  #> Model: #> m12 ~ m11 + x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   9.8742     1.5048    6.56  2.8e-09 *** #> m11           0.4652     0.0946    4.92  3.7e-06 *** #> x             0.1146     0.1164    0.98   0.3274     #> c1            0.1934     0.0949    2.04   0.0444 *   #> c2           -0.2848     0.0957   -2.97   0.0037 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.469. Adjusted R-square = 0.446. F(4, 95) = 20.963, p < .001 #>  #> Model: #> m2 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    2.354      1.236    1.91     0.06 .   #> x              0.435      0.105    4.15  7.1e-05 *** #> c1             0.178      0.112    1.59     0.12     #> c2            -0.167      0.110   -1.52     0.13     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.196. Adjusted R-square = 0.171. F(3, 96) = 7.812, p < .001 #>  #> Model: #> y ~ m11 + m12 + m2 + x + c1 + c2 #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.791908   4.613263   -0.39  0.69859     #> m11          0.203249   0.266930    0.76  0.44832     #> m12          0.519112   0.255389    2.03  0.04494 *   #> m2           0.838632   0.217639    3.85  0.00021 *** #> x            0.071421   0.317264    0.23  0.82238     #> c1          -0.000114   0.244934    0.00  0.99963     #> c2          -0.069787   0.253231   -0.28  0.78348     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.315. Adjusted R-square = 0.271. F(6, 93) = 7.133, p < .001 newdat <- data_serial_parallel[3:5, ] predict(lm_serial_parallel,         x = \"x\",         y = \"y\",         m = \"m2\",         newdata = newdat) #> [1] 16.24671 19.60951 16.58806"},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the a 'cond_indirect_effects' Class Object — print.cond_indirect_effects","title":"Print the a 'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"Print content output cond_indirect_effects()","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the a 'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"","code":"# S3 method for cond_indirect_effects print(x, digits = 3, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the a 'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"x output cond_indirect_effects(). digits Number digits display. Default 3. ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the a 'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the a 'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.cond_indirect_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the a 'cond_indirect_effects' Class Object — print.cond_indirect_effects","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x  + d1 * w1 + e1 * x:w1 m2 ~ a2 * x y  ~ b1 * m1 + b2 * m2 + cp * x \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE)  # Examples for cond_indirect_effects():  # Create levels of w1, the moderators w1levels <- mod_levels(\"w1\", fit = fit) w1levels #>                 w1 #> M+1.0SD  1.2280576 #> Mean     0.2589999 #> M-1.0SD -0.7100578  # Conditional effects from x to m1 when w1 is equal to each of the levels cond_indirect_effects(x = \"x\", y = \"m1\",                       wlevels = w1levels, fit = fit) #>  #> == Conditional effects == #>  #>  Path: x -> m1 #>  Conditioned on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)   ind  m1~x #> 1 M+1.0SD  1.228 0.750 0.750 #> 2 Mean     0.259 0.523 0.523 #> 3 M-1.0SD -0.710 0.297 0.297 #>  #>  - The 'ind' column shows the  effects. #>  - ‘m1~x’ is/are the path coefficient(s) along the path conditional on #>    the moderators. #>   # Conditional Indirect effect from x1 through m1 to y, # when w1 is equal to each of the levels cond_indirect_effects(x = \"x\", y = \"y\", m = \"m1\",                       wlevels = w1levels, fit = fit) #>  #> == Conditional indirect effects == #>  #>  Path: x -> m1 -> y #>  Conditioned on moderator(s): w1 #>  Moderator(s) represented by: w1 #>  #>      [w1]   (w1)    ind  m1~x   y~m1 #> 1 M+1.0SD  1.228 -0.031 0.750 -0.042 #> 2 Mean     0.259 -0.022 0.523 -0.042 #> 3 M-1.0SD -0.710 -0.012 0.297 -0.042 #>  #>  - The 'ind' column shows the indirect effects. #>  - ‘m1~x’,‘y~m1’ is/are the path coefficient(s) along the path #>    conditional on the moderators. #>"},{"path":"https://sfcheung.github.io/manymome/reference/print.index_of_mome.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Output of 'index_of_mome' — print.index_of_mome","title":"Print the Output of 'index_of_mome' — print.index_of_mome","text":"Print output index_of_mome().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.index_of_mome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Output of 'index_of_mome' — print.index_of_mome","text":"","code":"# S3 method for index_of_mome print(x, digits = 3, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.index_of_mome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Output of 'index_of_mome' — print.index_of_mome","text":"x output index_of_mome(). digits number decimal places printout. ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.index_of_mome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Output of 'index_of_mome' — print.index_of_mome","text":"Return x invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.index_of_mome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print the Output of 'index_of_mome' — print.index_of_mome","text":"print method index_of_mome-class object.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the a 'indirect' Class Object — print.indirect","title":"Print the a 'indirect' Class Object — print.indirect","text":"Print content output indirect_i() cond_indirect().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the a 'indirect' Class Object — print.indirect","text":"","code":"# S3 method for indirect print(x, digits = 3, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the a 'indirect' Class Object — print.indirect","text":"x output output indirect_i() cond_indirect(). digits Number digits display. Default 3. ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the a 'indirect' Class Object — print.indirect","text":"x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the a 'indirect' Class Object — print.indirect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.indirect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the a 'indirect' Class Object — print.indirect","text":"","code":"library(lavaan) dat <- modmed_x1m3w4y1 mod <- \" m1 ~ a1 * x   + b1 * w1 + d1 * x:w1 m2 ~ a2 * m1  + b2 * w2 + d2 * m1:w2 m3 ~ a3 * m2  + b3 * w3 + d3 * m2:w3 y  ~ a4 * m3  + b4 * w4 + d4 * m3:w4 \" fit <- sem(mod, dat, meanstructure = TRUE, fixed.x = FALSE, se = \"none\", baseline = FALSE) est <- parameterEstimates(fit)  wvalues <- c(w1 = 5, w2 = 4, w3 = 2, w4 = 3)  indirect_1 <- indirect_i(x = \"x\", y = \"y\", m = c(\"m1\", \"m2\", \"m3\"), fit = fit,                        wvalues = wvalues) indirect_2 <- (est[est$label == \"a1\", \"est\"] +                 wvalues[\"w1\"] * est[est$label == \"d1\", \"est\"]) *               (est[est$label == \"a2\", \"est\"] +                 wvalues[\"w2\"] * est[est$label == \"d2\", \"est\"]) *               (est[est$label == \"a3\", \"est\"] +                 wvalues[\"w3\"] * est[est$label == \"d3\", \"est\"]) *               (est[est$label == \"a4\", \"est\"] +                 wvalues[\"w4\"] * est[est$label == \"d4\", \"est\"]) indirect_1$indirect #> [1] 1.176673 indirect_2 #>       w1  #> 1.176673"},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a lm_list-Class Object — print.lm_list","title":"Print a lm_list-Class Object — print.lm_list","text":"Print content output lm2list().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a lm_list-Class Object — print.lm_list","text":"","code":"# S3 method for lm_list print(x, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a lm_list-Class Object — print.lm_list","text":"x output output lm2list(). ... arguments. used.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a lm_list-Class Object — print.lm_list","text":"x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a lm_list-Class Object — print.lm_list","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/print.lm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a lm_list-Class Object — print.lm_list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>"},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"A Simple Latent Mediation Model — simple_mediation_latent","title":"A Simple Latent Mediation Model — simple_mediation_latent","text":"Generated simple mediation model among three latent factors, fx, fm, fy, three indicators.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Simple Latent Mediation Model — simple_mediation_latent","text":"","code":"simple_mediation_latent"},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Simple Latent Mediation Model — simple_mediation_latent","text":"data frame 200 rows 11 variables: x1 Indicator fx. Numeric. x2 Indicator fx. Numeric. x3 Indicator fx. Numeric. m1 Indicator fm. Numeric. m2 Indicator fm. Numeric. m3 Indicator fm. Numeric. y1 Indicator fy. Numeric. y2 Indicator fy. Numeric. y3 Indicator fy. Numeric.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/simple_mediation_latent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Simple Latent Mediation Model — simple_mediation_latent","text":"model:","code":"fx =~ x1 + x2 + x3 fm =~ m1 + m2 + m3 fy =~ y1 + y2 + y3 fm ~ a * fx fy ~ b * fm + cp * fx indirect := a * b"},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a lm_list-Class Object — summary.lm_list","title":"Summary of a lm_list-Class Object — summary.lm_list","text":"summary content output lm2list().","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a lm_list-Class Object — summary.lm_list","text":"","code":"# S3 method for lm_list summary(object, ...)  # S3 method for summary_lm_list print(x, digits = 3, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a lm_list-Class Object — summary.lm_list","text":"object output output lm2list(). ... arguments. used. x object class \"summary_lm_list\". digits number significant digits printing numerical results.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a lm_list-Class Object — summary.lm_list","text":"x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summary of a lm_list-Class Object — summary.lm_list","text":"print.summary_lm_list: Print method output summary lm_list.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of a lm_list-Class Object — summary.lm_list","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/summary.lm_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of a lm_list-Class Object — summary.lm_list","text":"","code":"data(data_serial_parallel) lm_m11 <- lm(m11 ~ x + c1 + c2, data_serial_parallel) lm_m12 <- lm(m12 ~ m11 + x + c1 + c2, data_serial_parallel) lm_m2 <- lm(m2 ~ x + c1 + c2, data_serial_parallel) lm_y <- lm(y ~ m11 + m12 + m2 + x + c1 + c2, data_serial_parallel) # Join them to form a lm_list-class object lm_serial_parallel <- lm2list(lm_m11, lm_m12, lm_m2, lm_y) lm_serial_parallel #>  #> The models: #> m11 ~ x + c1 + c2 #> m12 ~ m11 + x + c1 + c2 #> m2 ~ x + c1 + c2 #> y ~ m11 + m12 + m2 + x + c1 + c2 #>  summary(lm_serial_parallel) #>  #>  #> Model: #> m11 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  11.4546     1.1258   10.17  < 2e-16 *** #> x             0.8001     0.0953    8.39  4.2e-13 *** #> c1            0.0855     0.1020    0.84    0.404     #> c2           -0.2444     0.1002   -2.44    0.017 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.459. Adjusted R-square = 0.442. F(3, 96) = 27.148, p < .001 #>  #> Model: #> m12 ~ m11 + x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   9.8742     1.5048    6.56  2.8e-09 *** #> m11           0.4652     0.0946    4.92  3.7e-06 *** #> x             0.1146     0.1164    0.98   0.3274     #> c1            0.1934     0.0949    2.04   0.0444 *   #> c2           -0.2848     0.0957   -2.97   0.0037 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.469. Adjusted R-square = 0.446. F(4, 95) = 20.963, p < .001 #>  #> Model: #> m2 ~ x + c1 + c2 #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)    2.354      1.236    1.91     0.06 .   #> x              0.435      0.105    4.15  7.1e-05 *** #> c1             0.178      0.112    1.59     0.12     #> c2            -0.167      0.110   -1.52     0.13     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.196. Adjusted R-square = 0.171. F(3, 96) = 7.812, p < .001 #>  #> Model: #> y ~ m11 + m12 + m2 + x + c1 + c2 #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -1.791908   4.613263   -0.39  0.69859     #> m11          0.203249   0.266930    0.76  0.44832     #> m12          0.519112   0.255389    2.03  0.04494 *   #> m2           0.838632   0.217639    3.85  0.00021 *** #> x            0.071421   0.317264    0.23  0.82238     #> c1          -0.000114   0.244934    0.00  0.99963     #> c2          -0.069787   0.253231   -0.28  0.78348     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> R-square = 0.315. Adjusted R-square = 0.271. F(6, 93) = 7.133, p < .001"},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","title":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"Extract terms object rom lm_from_lavaan-class object.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"","code":"# S3 method for lm_from_lavaan terms(x, ...)"},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"x 'lm_from_lavaan'-class object. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"terms-class object. See terms.object details.","code":""},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"lm_from_lavaan-class object converts regression model variable lavaan`` model formulaobject. function simply calls [stats::terms()] theformula` object extract predictors variable.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/manymome/reference/terms.lm_from_lavaan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Terms of a 'lm_from_lavaan'-Class Object — terms.lm_from_lavaan","text":"","code":"library(lavaan) data(data_med) mod <- \" m ~ a * x + c1 + c2 y ~ b * m + x + c1 + c2 \" fit <- sem(mod, data_med, fixed.x = FALSE) fit_list <- lm_from_lavaan_list(fit) terms(fit_list$m) #> m ~ x + c1 + c2 #> attr(,\"variables\") #> list(m, x, c1, c2) #> attr(,\"factors\") #>    x c1 c2 #> m  0  0  0 #> x  1  0  0 #> c1 0  1  0 #> c2 0  0  1 #> attr(,\"term.labels\") #> [1] \"x\"  \"c1\" \"c2\" #> attr(,\"order\") #> [1] 1 1 1 #> attr(,\"intercept\") #> [1] 1 #> attr(,\"response\") #> [1] 1 #> attr(,\".Environment\") #> <environment: 0x56268b2ddf40> terms(fit_list$y) #> y ~ m + x + c1 + c2 #> attr(,\"variables\") #> list(y, m, x, c1, c2) #> attr(,\"factors\") #>    m x c1 c2 #> y  0 0  0  0 #> m  1 0  0  0 #> x  0 1  0  0 #> c1 0 0  1  0 #> c2 0 0  0  1 #> attr(,\"term.labels\") #> [1] \"m\"  \"x\"  \"c1\" \"c2\" #> attr(,\"order\") #> [1] 1 1 1 1 #> attr(,\"intercept\") #> [1] 1 #> attr(,\"response\") #> [1] 1 #> attr(,\".Environment\") #> <environment: 0x56268b2dfdf0>"},{"path":"https://sfcheung.github.io/manymome/news/index.html","id":"manymome-0009000","dir":"Changelog","previous_headings":"","what":"manymome 0.0.0.9000","title":"manymome 0.0.0.9000","text":"Initialize package.","code":""}]
